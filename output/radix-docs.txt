accessibility.mdx
---
metaTitle: Accessibility
metaDescription: Radix Primitives follow the WAI-ARIA authoring practices guidelines and are tested in a wide selection of modern browsers and commonly used assistive technologies.
---

# Accessibility

<Description>
	Radix Primitives follow the WAI-ARIA authoring practices guidelines and are
	tested in a wide selection of modern browsers and commonly used assistive
	technologies.
</Description>

We take care of many of the difficult implementation details related to accessibility, including `aria` and `role` attributes, focus management, and keyboard navigation. That means that users should be able to use our components as-is in most contexts and rely on functionality to follow the expected accessibility design patterns.

## WAI-ARIA

[WAI-ARIA](https://www.w3.org/TR/wai-aria-1.2/), published and maintained by the W3C, specifies the semantics for many common UI patterns that show up in Radix Primitives. This is designed to provide meaning for controls that aren't built using elements provided by the browser. For example, if you use a `div` instead of a `button` element to create a button, there are attributes you need to add to the `div` in order to convey that it's a button for screen readers or voice recognition tools.

In addition to semantics, there are behaviors that are expected from different types of components. A `button` element is going to respond to certain interactions in ways that a `div` will not, so it's up to the developer to reimplement those interactions with JavaScript. The [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices-1.2/) provide additional guidance for implementing behaviors for various controls that come with Radix Primitives.

## Accessible Labels

With many built-in form controls, the native HTML `label` element is designed to provide semantic meaning and context for corresponding `input` elements. For non-form control elements, or for custom controls like those provided by Radix Primitives, [WAI-ARIA provides a specification](https://www.w3.org/TR/wai-aria-1.2/#namecalculation) for how to provide accessible names and descriptions to those controls.

Where possible, Radix Primitives include abstractions to make labelling our controls simple. The [`Label`](../components/label) primitive is designed to work with many of our controls. Ultimately it's up to you to provide those labels so that users have the proper context when navigating your application.

## Keyboard Navigation

Many complex components, like [`Tabs`](../components/tabs) and [`Dialog`](../components/dialog), come with expectations from users on how to interact with their content using a keyboard or other non-mouse input modalities. Radix Primitives provide basic keyboard support in accordance with the [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices-1.2/).

## Focus Management

Proper keyboard navigation and good labelling often go hand-in-hand with managing focus. When a user interacts with an element and something changes as a result, it's often helpful to move focus with the interaction so that the next tab stop is logical depending on the new context of the app. And for screen reader users, moving focus often results in an announcement to convey this new context, which relies on proper labelling.

In many Radix Primitives, we move focus based on the interactions a user normally takes in a given component. For example, in [`AlertDialog`](../components/alert-dialog), when the modal is opened, focus is programmatically moved to a `Cancel` button element to anticipate a response to the prompt.

accessible-icon.mdx
---
metaTitle: Accessible Icon
metaDescription: Makes icons accessible by adding a label.
name: accessible-icon
---

# Accessible Icon

<Description>Makes icons accessible by adding a label.</Description>

<Highlights
	features={[
		"Quickly make any icon accessible by wrapping it and providing a meaningful label.",
		"No visual difference, but announced correctly by screen readers.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-accessible-icon
```

## Anatomy

Import the component.

```jsx
import { AccessibleIcon } from "radix-ui";

export default () => <AccessibleIcon.Root />;
```

## API Reference

### Root

Contains the icon to make accessible.

<PropsTable
	data={[
		{
			name: "label",
			required: true,
			type: "string",
			description: (
				<span>
					The accessible label for the icon. This label will be visually hidden
					but announced to screen reader users, similar to <Code>alt</Code> text
					for <Code>img</Code>
					tags.
				</span>
			),
		},
	]}
/>

## Accessibility

Most icons or icon systems come with no accessibility built-in. For example, the same visual **cross** icon may in fact mean **"close"** or **"delete"**. This component lets you give meaning to icons used throughout your app.

This is built with [Visually Hidden](../utilities/visually-hidden).

accordion.mdx
---
metaTitle: Accordion
metaDescription: A vertically stacked set of interactive headings that each reveal an associated section of content.
name: accordion
aria: https://www.w3.org/WAI/ARIA/apg/patterns/accordion
---

# Accordion

<Description>
	A vertically stacked set of interactive headings that each reveal an
	associated section of content.
</Description>

<HeroContainer>
	<AccordionDemo />
</HeroContainer>

<HeroCodeBlock folder="Accordion" />

<Highlights
	features={[
		"Full keyboard navigation.",
		"Supports horizontal/vertical orientation.",
		"Supports Right to Left direction.",
		"Can expand one or multiple items.",
		"Can be controlled or uncontrolled.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-accordion
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Accordion } from "radix-ui";

export default () => (
	<Accordion.Root>
		<Accordion.Item>
			<Accordion.Header>
				<Accordion.Trigger />
			</Accordion.Header>
			<Accordion.Content />
		</Accordion.Item>
	</Accordion.Root>
);
```

## API Reference

### Root

Contains all the parts of an accordion.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "type",
			required: true,
			type: '"single" | "multiple"',
			typeSimple: "enum",
			description: (
				<span>
					Determines whether one or multiple items can be opened at the same
					time.
				</span>
			),
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					The controlled value of the item to expand when <Code>type</Code> is{" "}
					<Code>"single"</Code>. Must be used in conjunction with{" "}
					<Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "defaultValue",
			required: false,
			type: "string",
			description: (
				<span>
					The value of the item to expand when initially rendered and{" "}
					<Code>type</Code> is <Code>"single"</Code>. Use when you do not need
					to control the state of the items.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the expanded state of an item changes and{" "}
					<Code>type</Code> is <Code>"single"</Code>.
				</span>
			),
		},
		{
			name: "value",
			required: false,
			default: "[]",
			type: "string[]",
			description: (
				<span>
					The controlled value of the item to expand when <Code>type</Code> is{" "}
					<Code>"multiple"</Code>. Must be used in conjunction with{" "}
					<Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "defaultValue",
			required: false,
			default: "[]",
			type: "string[]",
			description: (
				<span>
					The value of the item to expand when initially rendered when{" "}
					<Code>type</Code> is <Code>"multiple"</Code>. Use when you do not need
					to control the state of the items.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string[]) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the expanded state of an item changes and{" "}
					<Code>type</Code> is <Code>"multiple"</Code>.
				</span>
			),
		},
		{
			name: "collapsible",
			required: false,
			default: "false",
			type: "boolean",
			description: (
				<span>
					When <Code>type</Code> is <Code>"single"</Code>, allows closing
					content when clicking trigger for an open item.
				</span>
			),
		},
		{
			name: "disabled",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					accordion and all its items.
				</span>
			),
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			default: '"ltr"',
			description:
				"The reading direction of the accordion when applicable. If omitted, assumes LTR (left-to-right) reading mode.",
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical"',
			typeSimple: "enum",
			default: '"vertical"',
			description: "The orientation of the accordion.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Item

Contains all the parts of a collapsible section.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "disabled",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "value",
			required: true,
			type: "string",
			description: "A unique value for the item.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Header

Wraps an `Accordion.Trigger`. Use the `asChild` prop to update it to the appropriate heading level for your page.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Trigger

Toggles the collapsed state of its associated item. It should be nested inside of an `Accordion.Header`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Content

Contains the collapsible content for an item.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-accordion-content-width",
			description: "The width of the content when it opens/closes",
		},
		{
			cssVariable: "--radix-accordion-content-height",
			description: "The height of the content when it opens/closes",
		},
	]}
/>

## Examples

### Expanded by default

Use the `defaultValue` prop to define the open item by default.

```jsx line=1
<Accordion.Root type="single" __defaultValue__="item-2">
	<Accordion.Item value="item-1">…</Accordion.Item>
	<Accordion.Item value="item-2">…</Accordion.Item>
</Accordion.Root>
```

### Allow collapsing all items

Use the `collapsible` prop to allow all items to close.

```jsx line=1
<Accordion.Root type="single" __collapsible__>
	<Accordion.Item value="item-1">…</Accordion.Item>
	<Accordion.Item value="item-2">…</Accordion.Item>
</Accordion.Root>
```

### Multiple items open at the same time

Set the `type` prop to `multiple` to enable opening multiple items at once.

```jsx line=1
<Accordion.Root type="__multiple__">
	<Accordion.Item value="item-1">…</Accordion.Item>
	<Accordion.Item value="item-2">…</Accordion.Item>
</Accordion.Root>
```

### Rotated icon when open

You can add extra decorative elements, such as chevrons, and rotate it when the item is open.

```jsx line=12
// index.jsx
import { Accordion } from "radix-ui";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import "./styles.css";

export default () => (
	<Accordion.Root type="single">
		<Accordion.Item value="item-1">
			<Accordion.Header>
				<Accordion.Trigger className="AccordionTrigger">
					<span>Trigger text</span>
					<ChevronDownIcon __className__="AccordionChevron" aria-hidden />
				</Accordion.Trigger>
			</Accordion.Header>
			<Accordion.Content>…</Accordion.Content>
		</Accordion.Item>
	</Accordion.Root>
);
```

```css line=5-7
/* styles.css */
.AccordionChevron {
	transition: transform 300ms;
}
.AccordionTrigger[data-state="open"] > .AccordionChevron {
	transform: rotate(180deg);
}
```

### Horizontal orientation

Use the `orientation` prop to create a horizontal accordion.

```jsx line=1
<Accordion.Root __orientation__="horizontal">
	<Accordion.Item value="item-1">…</Accordion.Item>
	<Accordion.Item value="item-2">…</Accordion.Item>
</Accordion.Root>
```

### Animating content size

Use the `--radix-accordion-content-width` and/or `--radix-accordion-content-height` CSS variables to animate the size of the content when it opens/closes:

```jsx line=9
// index.jsx
import { Accordion } from "radix-ui";
import "./styles.css";

export default () => (
	<Accordion.Root type="single">
		<Accordion.Item value="item-1">
			<Accordion.Header>…</Accordion.Header>
			<Accordion.Content __className__="AccordionContent">…</Accordion.Content>
		</Accordion.Item>
	</Accordion.Root>
);
```

```css line=21,27
/* styles.css */
.AccordionContent {
	overflow: hidden;
}
.AccordionContent[data-state="open"] {
	animation: slideDown 300ms ease-out;
}
.AccordionContent[data-state="closed"] {
	animation: slideUp 300ms ease-out;
}

@keyframes slideDown {
	from {
		height: 0;
	}
	to {
		height: var(__--radix-accordion-content-height__);
	}
}

@keyframes slideUp {
	from {
		height: var(__--radix-accordion-content-height__);
	}
	to {
		height: 0;
	}
}
```

## Accessibility

Adheres to the [Accordion WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/accordion).

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: (
				<span>
					When focus is on an <Code>Accordion.Trigger</Code> of a collapsed
					section, expands the section.
				</span>
			),
		},
		{
			keys: ["Enter"],
			description: (
				<span>
					When focus is on an <Code>Accordion.Trigger</Code> of a collapsed
					section, expands the section.
				</span>
			),
		},
		{
			keys: ["Tab"],
			description: "Moves focus to the next focusable element.",
		},
		{
			keys: ["Shift + Tab"],
			description: "Moves focus to the previous focusable element.",
		},
		{
			keys: ["ArrowDown"],
			description: (
				<span>
					Moves focus to the next <Code>Accordion.Trigger</Code> when{" "}
					<Code>orientation</Code> is <Code>vertical</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowUp"],
			description: (
				<span>
					Moves focus to the previous <Code>Accordion.Trigger</Code> when{" "}
					<Code>orientation</Code> is <Code>vertical</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowRight"],
			description: (
				<span>
					Moves focus to the next <Code>Accordion.Trigger</Code> when{" "}
					<Code>orientation</Code> is <Code>horizontal</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowLeft"],
			description: (
				<span>
					Moves focus to the previous <Code>Accordion.Trigger</Code> when{" "}
					<Code>orientation</Code> is <Code>horizontal</Code>.
				</span>
			),
		},
		{
			keys: ["Home"],
			description: (
				<span>
					When focus is on an <Code>Accordion.Trigger</Code>, moves focus to the
					first <Code>Accordion.Trigger</Code>.
				</span>
			),
		},
		{
			keys: ["End"],
			description: (
				<span>
					When focus is on an <Code>Accordion.Trigger</Code>, moves focus to the
					last <Code>Accordion.Trigger</Code>.
				</span>
			),
		},
	]}
/>

alert-dialog.mdx
---
metaTitle: Alert Dialog
metaDescription: A modal dialog that interrupts the user with important content and expects a response.
name: alert-dialog
aria: https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog
---

# Alert Dialog

<Description>
	A modal dialog that interrupts the user with important content and expects a
	response.
</Description>

<HeroContainer>
	<AlertDialogDemo />
</HeroContainer>

<HeroCodeBlock folder="AlertDialog" />

<Highlights
	features={[
		"Focus is automatically trapped.",
		"Can be controlled or uncontrolled.",
		<span>
			Manages screen reader announcements with <Code>Title</Code> and{" "}
			<Code>Description</Code> components.
		</span>,
		"Esc closes the component automatically.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-alert-dialog
```

## Anatomy

Import all parts and piece them together.

```jsx
import { AlertDialog } from "radix-ui";

export default () => (
	<AlertDialog.Root>
		<AlertDialog.Trigger />
		<AlertDialog.Portal>
			<AlertDialog.Overlay />
			<AlertDialog.Content>
				<AlertDialog.Title />
				<AlertDialog.Description />
				<AlertDialog.Cancel />
				<AlertDialog.Action />
			</AlertDialog.Content>
		</AlertDialog.Portal>
	</AlertDialog.Root>
);
```

## API Reference

### Root

Contains all the parts of an alert dialog.

<PropsTable
	data={[
		{
			name: "defaultOpen",
			type: "boolean",
			description:
				"The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.",
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the dialog. Must be used in conjunction
					with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description:
				"Event handler called when the open state of the dialog changes.",
		},
	]}
/>

### Trigger

A button that opens the dialog.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
	]}
/>

### Portal

When used, portals your overlay and content parts into the `body`.

<PropsTable
	data={[
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. If used on this
					part, it will be inherited by <Code>AlertDialog.Overlay</Code> and{" "}
					<Code>AlertDialog.Content</Code>.
				</span>
			),
		},
		{
			name: "container",
			type: "HTMLElement",
			default: "document.body",
			description: "Specify a container element to portal the content into.",
		},
	]}
/>

### Overlay

A layer that covers the inert portion of the view when the dialog is open.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>AlertDialog.Portal</Code>.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
	]}
/>

### Content

Contains content to be rendered when the dialog is open.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>AlertDialog.Portal</Code>.
				</span>
			),
		},
		{
			name: "onOpenAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves to the destructive action after
					opening. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onCloseAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves to the trigger after closing. It
					can be prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
	]}
/>

### Cancel

A button that closes the dialog. This button should be distinguished visually from `AlertDialog.Action` buttons.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Action

A button that closes the dialog. These buttons should be distinguished visually from the `AlertDialog.Cancel` button.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Title

An accessible name to be announced when the dialog is opened. Alternatively, you can provide `aria-label` or `aria-labelledby` to `AlertDialog.Content` and exclude this component.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Description

An accessible description to be announced when the dialog is opened. Alternatively, you can provide `aria-describedby` to `AlertDialog.Content` and exclude this component.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

## Examples

### Close after asynchronous form submission

Use the controlled props to programmatically close the Alert Dialog after an async operation has completed.

```jsx line=4,7,10,15,17
import * as React from "react";
import { AlertDialog } from "radix-ui";

const wait = () => new Promise((resolve) => setTimeout(resolve, 1000));

export default () => {
	const [open, setOpen] = React.useState(false);

	return (
		<AlertDialog.Root __open__={open} __onOpenChange__={setOpen}>
			<AlertDialog.Trigger>Open</AlertDialog.Trigger>
			<AlertDialog.Portal>
				<AlertDialog.Overlay />
				<AlertDialog.Content>
					<form
						onSubmit={(event) => {
							wait().then(() => setOpen(false));
							event.preventDefault();
						}}
					>
						{/** some inputs */}
						<button type="submit">Submit</button>
					</form>
				</AlertDialog.Content>
			</AlertDialog.Portal>
		</AlertDialog.Root>
	);
};
```

### Custom portal container

Customise the element that your alert dialog portals into.

```jsx line=2,13
export default () => {
	const [container, setContainer] = React.useState(null);
	return (
		<div>
			<AlertDialog.Root>
				<AlertDialog.Trigger />
				<AlertDialog.Portal __container__={container}>
					<AlertDialog.Overlay />
					<AlertDialog.Content>...</AlertDialog.Content>
				</AlertDialog.Portal>
			</AlertDialog.Root>

			<div ref={setContainer} />
		</div>
	);
};
```

## Accessibility

Adheres to the [Alert and Message Dialogs WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog).

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: "Opens/closes the dialog.",
		},
		{
			keys: ["Enter"],
			description: "Opens/closes the dialog.",
		},
		{
			keys: ["Tab"],
			description: "Moves focus to the next focusable element.",
		},
		{
			keys: ["Shift + Tab"],
			description: "Moves focus to the previous focusable element.",
		},
		{
			keys: ["Esc"],
			description: (
				<span>
					Closes the dialog and moves focus to <Code>AlertDialog.Trigger</Code>.
				</span>
			),
		},
	]}
/>

animation.mdx
---
metaTitle: Animation
metaDescription: Animate Radix Primitives with CSS keyframes or the JavaScript animation library of your choice.
---

# Animation

<Description>
	Animate Radix Primitives with CSS keyframes or the JavaScript animation
	library of your choice.
</Description>

Adding animation to Radix Primitives should feel similar to any other component, but there are some caveats noted here in regards to exiting animations with JS animation libraries.

## Animating with CSS animation

The simplest way to animate Primitives is with CSS.

You can use CSS animation to animate both mount and unmount phases. The latter is possible because the Radix Primitives will suspend unmount while your animation plays out.

```css
@keyframes fadeIn {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

@keyframes fadeOut {
	from {
		opacity: 1;
	}
	to {
		opacity: 0;
	}
}

.DialogOverlay[data-state="open"],
.DialogContent[data-state="open"] {
	animation: fadeIn 300ms ease-out;
}

.DialogOverlay[data-state="closed"],
.DialogContent[data-state="closed"] {
	animation: fadeOut 300ms ease-in;
}
```

## Delegating unmounting for JavaScript Animation

When many stateful Primitives are hidden from view, they are actually removed from the React Tree, and their elements removed from the DOM. JavaScript animation libraries need control of the unmounting phase, so we provide the `forceMount` prop on many components to allow consumers to delegate the mounting and unmounting of children based on the animation state determined by those libraries.

For example, if you want to use React Spring to animate a `Dialog`, you would do so by conditionally rendering the dialog `Overlay` and `Content` parts based on the animation state from one of its hooks like `useTransition`:

```jsx
import { Dialog } from "radix-ui";
import { useTransition, animated, config } from "react-spring";

function Example() {
	const [open, setOpen] = React.useState(false);
	const transitions = useTransition(open, {
		from: { opacity: 0, y: -10 },
		enter: { opacity: 1, y: 0 },
		leave: { opacity: 0, y: 10 },
		config: config.stiff,
	});
	return (
		<Dialog.Root open={open} onOpenChange={setOpen}>
			<Dialog.Trigger>Open Dialog</Dialog.Trigger>
			{transitions((styles, item) =>
				item ? (
					<>
						<Dialog.Overlay forceMount asChild>
							<animated.div
								style={{
									opacity: styles.opacity,
								}}
							/>
						</Dialog.Overlay>
						<Dialog.Content forceMount asChild>
							<animated.div style={styles}>
								<h1>Hello from inside the Dialog!</h1>
								<Dialog.Close>close</Dialog.Close>
							</animated.div>
						</Dialog.Content>
					</>
				) : null,
			)}
		</Dialog.Root>
	);
}
```

aspect-ratio.mdx
---
metaTitle: Aspect Ratio
metaDescription: Displays content within a desired ratio.
name: aspect-ratio
---

# Aspect Ratio

<Description>Displays content within a desired ratio.</Description>

<HeroContainer>
	<AspectRatioDemo />
</HeroContainer>

<HeroCodeBlock folder="AspectRatio" />

<Highlights features={["Accepts any custom ratio."]} />

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-aspect-ratio
```

## Anatomy

Import the component.

```jsx
import { AspectRatio } from "radix-ui";

export default () => <AspectRatio.Root />;
```

## API Reference

### Root

Contains the content you want to constrain to a given ratio.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "ratio",
			type: "number",
			default: "1",
			description: "The desired ratio",
		},
	]}
/>

avatar.mdx
---
metaTitle: Avatar
metaDescription: An image element with a fallback for representing the user.
name: avatar
---

# Avatar

<Description>
	An image element with a fallback for representing the user.
</Description>

<HeroContainer>
	<AvatarDemo />
</HeroContainer>

<HeroCodeBlock folder="Avatar" />

<Highlights
	features={[
		"Automatic and manual control over when the image renders.",
		"Fallback part accepts any children.",
		"Optionally delay fallback rendering to avoid content flashing.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-avatar
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Avatar } from "radix-ui";

export default () => (
	<Avatar.Root>
		<Avatar.Image />
		<Avatar.Fallback />
	</Avatar.Root>
);
```

## API Reference

### Root

Contains all the parts of an avatar.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Image

The image to render. By default it will only render when it has loaded. You can use the `onLoadingStatusChange` handler if you need more control.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "onLoadingStatusChange",
			type: '(status: "idle" | "loading" | "loaded" | "error") => void',
			typeSimple: "function",
			description:
				"A callback providing information about the loading status of the image. This is useful in case you want to control more precisely what to render as the image is loading.",
		},
	]}
/>

### Fallback

An element that renders when the image hasn't loaded. This means whilst it's loading, or if there was an error. If you notice a flash during loading, you can provide a `delayMs` prop to delay its rendering so it only renders for those with slower connections. For more control, use the `onLoadingStatusChange` handler on `Avatar.Image`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "delayMs",
			type: "number",
			description:
				"Useful for delaying rendering so it only appears for those with slower connections.",
		},
	]}
/>

## Examples

### Clickable Avatar with tooltip

You can compose the Avatar with a [Tooltip](/primitives/docs/components/tooltip) to display extra information.

```jsx line=1,4,5,7,9-13
import { Avatar, __Tooltip__ } from "radix-ui";

export default () => (
	<Tooltip.Root>
		<Tooltip.Trigger>
			<Avatar.Root>…</Avatar.Root>
		</Tooltip.Trigger>

		<Tooltip.Content side="top">
			Tooltip content
			<Tooltip.Arrow />
		</Tooltip.Content>
	</Tooltip.Root>
);
```

checkbox.mdx
---
metaTitle: Checkbox
metaDescription: A control that allows the user to toggle between checked and not checked.
name: checkbox
aria: https://www.w3.org/WAI/ARIA/apg/patterns/checkbox
---

# Checkbox

<Description>
	A control that allows the user to toggle between checked and not checked.
</Description>

<HeroContainer>
	<CheckboxDemo />
</HeroContainer>

<HeroCodeBlock folder="Checkbox" />

<Highlights
	features={[
		"Supports indeterminate state.",
		"Full keyboard navigation.",
		"Can be controlled or uncontrolled.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-checkbox
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Checkbox } from "radix-ui";

export default () => (
	<Checkbox.Root>
		<Checkbox.Indicator />
	</Checkbox.Root>
);
```

## API Reference

### Root

Contains all the parts of a checkbox. An `input` will also render when used within a `form` to ensure events propagate correctly.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "defaultChecked",
			type: `boolean | 'indeterminate'`,
			description:
				"The checked state of the checkbox when it is initially rendered. Use when you do not need to control its checked state.",
		},
		{
			name: "checked",
			type: `boolean | 'indeterminate'`,
			description: (
				<span>
					The controlled checked state of the checkbox. Must be used in
					conjunction with <Code>onCheckedChange</Code>.
				</span>
			),
		},
		{
			name: "onCheckedChange",
			type: `(checked: boolean | 'indeterminate') => void`,
			typeSimple: "function",
			description:
				"Event handler called when the checked state of the checkbox changes.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					checkbox.
				</span>
			),
		},
		{
			name: "required",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, indicates that the user must check the
					checkbox before the owning form can be submitted.
				</span>
			),
		},
		{
			name: "name",
			type: "string",
			description:
				"The name of the checkbox. Submitted with its owning form as part of a name/value pair.",
		},
		{
			name: "value",
			type: "string",
			default: "on",
			description: (
				<span>
					The value given as data when submitted with a <Code>name</Code>.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked", "indeterminate"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Indicator

Renders when the checkbox is in a checked or indeterminate state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description:
				"Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked", "indeterminate"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

## Examples

### Indeterminate

You can set the checkbox to `indeterminate` by taking control of its state.

```jsx line=5,9-14,16
import { DividerHorizontalIcon, CheckIcon } from "@radix-ui/react-icons";
import { Checkbox } from "radix-ui";

export default () => {
	const [checked, setChecked] = React.useState("indeterminate");

	return (
		<>
			<StyledCheckbox checked={checked} onCheckedChange={setChecked}>
				<Checkbox.Indicator>
					{checked === "indeterminate" && <DividerHorizontalIcon />}
					{checked === true && <CheckIcon />}
				</Checkbox.Indicator>
			</StyledCheckbox>

			<button
				type="button"
				onClick={() =>
					setChecked((prevIsChecked) =>
						prevIsChecked === "indeterminate" ? false : "indeterminate",
					)
				}
			>
				Toggle indeterminate
			</button>
		</>
	);
};
```

## Accessibility

Adheres to the [tri-state Checkbox WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/checkbox).

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: "Checks/unchecks the checkbox.",
		},
	]}
/>

collapsible.mdx
---
metaTitle: Collapsible
metaDescription: An interactive component which expands/collapses a panel.
name: collapsible
aria: https://www.w3.org/WAI/ARIA/apg/patterns/disclosure
---

# Collapsible

<Description>
	An interactive component which expands/collapses a panel.
</Description>

<HeroContainer>
	<CollapsibleDemo />
</HeroContainer>

<HeroCodeBlock folder="Collapsible" />

<Highlights
	features={["Full keyboard navigation.", "Can be controlled or uncontrolled."]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-collapsible
```

## Anatomy

Import the components and piece the parts together.

```jsx
import { Collapsible } from "radix-ui";

export default () => (
	<Collapsible.Root>
		<Collapsible.Trigger />
		<Collapsible.Content />
	</Collapsible.Root>
);
```

## API Reference

### Root

Contains all the parts of a collapsible.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "defaultOpen",
			type: "boolean",
			description:
				"The open state of the collapsible when it is initially rendered. Use when you do not need to control its open state.",
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the collapsible. Must be used in
					conjunction with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description:
				"Event handler called when the open state of the collapsible changes.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					collapsible.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Trigger

The button that toggles the collapsible.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Content

The component that contains the collapsible content.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description:
				"Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-collapsible-content-width",
			description: "The width of the content when it opens/closes",
		},
		{
			cssVariable: "--radix-collapsible-content-height",
			description: "The height of the content when it opens/closes",
		},
	]}
/>

## Examples

### Animating content size

Use the `--radix-collapsible-content-width` and/or `--radix-collapsible-content-height` CSS variables to animate the size of the content when it opens/closes. Here's a demo:

```jsx line=8
// index.jsx
import { Collapsible } from "radix-ui";
import "./styles.css";

export default () => (
	<Collapsible.Root>
		<Collapsible.Trigger>…</Collapsible.Trigger>
		<Collapsible.Content __className__="CollapsibleContent">
			…
		</Collapsible.Content>
	</Collapsible.Root>
);
```

```css line=17,23
/* styles.css */
.CollapsibleContent {
	overflow: hidden;
}
.CollapsibleContent[data-state="open"] {
	animation: slideDown 300ms ease-out;
}
.CollapsibleContent[data-state="closed"] {
	animation: slideUp 300ms ease-out;
}

@keyframes slideDown {
	from {
		height: 0;
	}
	to {
		height: var(__--radix-collapsible-content-height__);
	}
}

@keyframes slideUp {
	from {
		height: var(__--radix-collapsible-content-height__);
	}
	to {
		height: 0;
	}
}
```

## Accessibility

Adheres to the [Disclosure WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure).

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: "Opens/closes the collapsible.",
		},
		{
			keys: ["Enter"],
			description: "Opens/closes the collapsible.",
		},
	]}
/>

composition.mdx
---
metaTitle: Composition
metaDescription: Use the `asChild` prop to compose Radix's functionality onto alternative element types or your own React components.
---

# Composition

<Description>
	Use the `asChild` prop to compose Radix's functionality onto alternative
	element types or your own React components.
</Description>

All Radix primitive parts that render a DOM element accept an `asChild` prop. When `asChild` is set to `true`, Radix will not render a default DOM element, instead cloning the part's child and passing it the props and behavior required to make it functional.

## Changing the element type

In the majority of cases you shouldn’t need to modify the element type as Radix has been designed to provide the most appropriate defaults. However, there are cases where it is helpful to do so.

A good example is with `Tooltip.Trigger`. By default this part is rendered as a `button`, though you may want to add a tooltip to a link (`a` tag) as well. Let's see how you can achieve this using `asChild`:

```jsx line=7
import * as React from "react";
import { Tooltip } from "radix-ui";

export default () => (
	<Tooltip.Root>
		<Tooltip.Trigger __asChild__>
			<a href="https://www.radix-ui.com/">Radix UI</a>
		</Tooltip.Trigger>
		<Tooltip.Portal>…</Tooltip.Portal>
	</Tooltip.Root>
);
```

> If you do decide to change the underlying element type, it is your responsibility to ensure it remains accessible and functional. In the case of `Tooltip.Trigger` for example, it must be a focusable element that can respond to pointer and keyboard events. If you were to switch it to a `div`, it would no longer be accessible.

In reality, you will rarely modify the underlying DOM element like we've seen above. Instead it's more common to use your own React components. This is especially true for most `Trigger` parts, as you usually want to compose the functionality with the custom buttons and links in your design system.

## Composing with your own React components

This works exactly the same as above, you pass `asChild` to the part and then wrap your own component with it.
However, there are a few gotchas to be aware of.

### Your component must spread props

When Radix clones your component, it will pass its own props and event handlers to make it functional and accessible. If your component doesn't support those props, it will break.

This is done by spreading all of the props onto the underlying DOM node.

```jsx line=5
// before
const MyButton = () => <button />;

// after
const MyButton = (props) => <button {...__props__} />;
```

We recommend always doing this so that you are not concerned with implementation details (ie. which props/events to accept). We find this is good practice for "leaf" components in general.

> Similarly to when changing the element type directly, it is your responsibility to ensure the element type rendered by your custom component remains accessible and functional.

### Your component must forward ref

Additionally, Radix will sometimes need to attach a `ref` to your component (for example to measure its size). If your component doesn't accept a `ref`, then it will break.

This is done using `React.forwardRef` (read more on [react.dev](https://react.dev/reference/react/forwardRef)).

```jsx line=5-7
// before
const MyButton = (props) => <button {...props} />;

// after
const MyButton = __React.forwardRef__((props, __forwardedRef__) => (
	<button {...props} __ref__={__forwardedRef__} />
));
```

Whilst this isn't necessary for **all** parts, we recommend always doing it so that you are not concerned with implementation details. This is also generally good practice anyway for leaf components.

## Composing multiple primitives

`asChild` can be used as deeply as you need to. This means it is a great way to compose multiple primitive's behavior together.
Here is an example of how you can compose `Tooltip.Trigger` and `Dialog.Trigger` together with your own button:

```jsx line=12-16
import * as React from "react";
import { Dialog, Tooltip } from "radix-ui";

const MyButton = React.forwardRef((props, forwardedRef) => (
	<button {...props} ref={forwardedRef} />
));

export default () => {
	return (
		<Dialog.Root>
			<Tooltip.Root>
				<Tooltip.Trigger __asChild__>
					<Dialog.Trigger __asChild__>
						<MyButton>Open dialog</MyButton>
					</Dialog.Trigger>
				</Tooltip.Trigger>
				<Tooltip.Portal>…</Tooltip.Portal>
			</Tooltip.Root>

			<Dialog.Portal>...</Dialog.Portal>
		</Dialog.Root>
	);
};
```

context-menu.mdx
---
metaTitle: Context Menu
metaDescription: Displays a menu located at the pointer, triggered by a right click or a long press.
name: context-menu
aria: https://www.w3.org/WAI/ARIA/apg/patterns/menu
---

# Context Menu

<Description>
	Displays a menu located at the pointer, triggered by a right click or a long
	press.
</Description>

<HeroContainer>
	<ContextMenuDemo />
</HeroContainer>

<HeroCodeBlock folder="ContextMenu" />

<Highlights
	features={[
		"Supports submenus with configurable reading direction.",
		"Supports items, labels, groups of items.",
		"Supports checkable items (single or multiple) with optional indeterminate state.",
		"Supports modal and non-modal modes.",
		"Customize side, alignment, offsets, collision handling.",
		"Focus is fully managed.",
		"Full keyboard navigation.",
		"Typeahead support.",
		"Dismissing and layering behavior is highly customizable.",
		"Triggers with a long press on touch devices",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-context-menu
```

## Anatomy

Import all parts and piece them together.

```jsx
import { ContextMenu } from "radix-ui";

export default () => (
	<ContextMenu.Root>
		<ContextMenu.Trigger />

		<ContextMenu.Portal>
			<ContextMenu.Content>
				<ContextMenu.Label />
				<ContextMenu.Item />

				<ContextMenu.Group>
					<ContextMenu.Item />
				</ContextMenu.Group>

				<ContextMenu.CheckboxItem>
					<ContextMenu.ItemIndicator />
				</ContextMenu.CheckboxItem>

				<ContextMenu.RadioGroup>
					<ContextMenu.RadioItem>
						<ContextMenu.ItemIndicator />
					</ContextMenu.RadioItem>
				</ContextMenu.RadioGroup>

				<ContextMenu.Sub>
					<ContextMenu.SubTrigger />
					<ContextMenu.Portal>
						<ContextMenu.SubContent />
					</ContextMenu.Portal>
				</ContextMenu.Sub>

				<ContextMenu.Separator />
			</ContextMenu.Content>
		</ContextMenu.Portal>
	</ContextMenu.Root>
);
```

## API Reference

Adheres to the [Menu WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/menu) and uses [roving tabindex](https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions.html) to manage focus movement among menu items.

### Root

Contains all the parts of a context menu.

<PropsTable
	data={[
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of submenus when applicable. If omitted,
					inherits globally from <Code>DirectionProvider</Code> or assumes LTR
					(left-to-right) reading mode.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description:
				"Event handler called when the open state of the context menu changes.",
		},
		{
			name: "modal",
			required: false,
			type: "boolean",
			default: "true",
			description: (
				<span>
					The modality of the context menu. When set to <Code>true</Code>,
					interaction with outside elements will be disabled and only menu
					content will be visible to screen readers.
				</span>
			),
		},
	]}
/>

### Trigger

The area that opens the context menu. Wrap it around the target you want the context menu to open from when right-clicking (or using the relevant keyboard shortcuts).

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "disabled",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, the context menu won't open when
					right-clicking. Note that this will also restore the native context
					menu.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
	]}
/>

### Portal

When used, portals the content part into the `body`.

<PropsTable
	data={[
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. If used on this
					part, it will be inherited by <Code>ContextMenu.Content</Code> and{" "}
					<Code>ContextMenu.SubContent</Code> respectively.
				</span>
			),
		},
		{
			name: "container",
			type: "HTMLElement",
			default: "document.body",
			description: "Specify a container element to portal the content into.",
		},
	]}
/>

### Content

The component that pops out in an open context menu.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last item
					to first, and vice versa.
				</span>
			),
		},
		{
			name: "onCloseAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves back after closing. It can be
					prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onFocusOutside",
			type: "(event: FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves outside the bounds of the
					component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onInteractOutside",
			type: "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when an interaction (pointer or focus event)
					happens outside the bounds of the component. It can be prevented by
					calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>ContextMenu.Portal</Code>.
				</span>
			),
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>The vertical distance in pixels from the anchor.</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "0",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-context-menu-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets
				</>
			),
		},
		{
			cssVariable: "--radix-context-menu-content-available-width",
			description: (
				<>The remaining width between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-context-menu-content-available-height",
			description: (
				<>The remaining height between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-context-menu-trigger-width",
			description: <>The width of the trigger</>,
		},
		{
			cssVariable: "--radix-context-menu-trigger-height",
			description: <>The height of the trigger</>,
		},
	]}
/>

### Arrow

An optional arrow element to render alongside a submenu. This can be used to help visually link the trigger item with the `ContextMenu.Content`. Must be rendered inside `ContextMenu.Content`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "width",
			type: "number",
			default: 10,
			description: <span>The width of the arrow in pixels.</span>,
		},
		{
			name: "height",
			type: "number",
			default: 5,
			description: <span>The height of the arrow in pixels.</span>,
		},
	]}
/>

### Item

The component that contains the context menu items.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects an item (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the context menu from closing when selecting that item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Group

Used to group multiple `ContextMenu.Item`s.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Label

Used to render a label. It won't be focusable using arrow keys.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### CheckboxItem

An item that can be controlled and rendered like a checkbox.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "checked",
			type: `boolean | 'indeterminate'`,
			description: (
				<span>
					The controlled checked state of the item. Must be used in conjunction
					with <Code>onCheckedChange</Code>.
				</span>
			),
		},
		{
			name: "onCheckedChange",
			type: `(checked: boolean) => void`,
			typeSimple: "function",
			description: (
				<span>Event handler called when the checked state changes.</span>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects an item (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the context menu from closing when selecting that item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked", "indeterminate"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### RadioGroup

Used to group multiple `ContextMenu.RadioItem`s.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			type: "string",
			description: "The value of the selected item in the group.",
		},
		{
			name: "onValueChange",
			type: "(value: string) => void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
	]}
/>

### RadioItem

An item that can be controlled and rendered like a radio.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			type: "string",
			required: true,
			description: "The unique value of the item.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects an item (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the context menu from closing when selecting that item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked", "indeterminate"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### ItemIndicator

Renders when the parent `ContextMenu.CheckboxItem` or `ContextMenu.RadioItem` is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked", "indeterminate"],
		},
	]}
/>

### Separator

Used to visually separate items in the context menu.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Sub

Contains all the parts of a submenu.

<PropsTable
	data={[
		{
			name: "defaultOpen",
			type: "boolean",
			description: (
				<span>
					The open state of the submenu when it is initially rendered. Use when
					you do not need to control its open state.
				</span>
			),
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the submenu. Must be used in conjunction
					with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the open state of the submenu changes.
				</span>
			),
		},
	]}
/>

### SubTrigger

An item that opens a submenu. Must be rendered inside `ContextMenu.Sub`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### SubContent

The component that pops out when a submenu is open. Must be rendered inside `ContextMenu.Sub`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last item
					to first, and vice versa.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onFocusOutside",
			type: "(event: FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves outside the bounds of the
					component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onInteractOutside",
			type: "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when an interaction (pointer or focus event)
					happens outside the bounds of the component. It can be prevented by
					calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>ContextMenu.Portal</Code>.
				</span>
			),
		},
		{
			name: "sideOffset",
			type: "number",
			default: "0",
			description: <span>The distance in pixels from the trigger.</span>,
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					An offset in pixels from the <Code>"start"</Code> or{" "}
					<Code>"end"</Code> alignment options.
				</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "0",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>.
				</span>
			),
		},
		{
			name: "arrowPadding",
			type: "number",
			default: "0",
			description: (
				<span>
					The padding between the arrow and the edges of the content. If your
					content has <Code>border-radius</Code>, this will prevent it from
					overflowing the corners.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-context-menu-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets
				</>
			),
		},
		{
			cssVariable: "--radix-context-menu-content-available-width",
			description: (
				<>The remaining width between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-context-menu-content-available-height",
			description: (
				<>The remaining height between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-context-menu-trigger-width",
			description: <>The width of the trigger</>,
		},
		{
			cssVariable: "--radix-context-menu-trigger-height",
			description: <>The height of the trigger</>,
		},
	]}
/>

## Examples

### With submenus

You can create submenus by using `ContextMenu.Sub` in combination with its parts.

```jsx line=8-17
<ContextMenu.Root>
	<ContextMenu.Trigger>…</ContextMenu.Trigger>
	<ContextMenu.Portal>
		<ContextMenu.Content>
			<ContextMenu.Item>…</ContextMenu.Item>
			<ContextMenu.Item>…</ContextMenu.Item>
			<ContextMenu.Separator />
			<ContextMenu.Sub>
				<ContextMenu.SubTrigger>Sub menu →</ContextMenu.SubTrigger>
				<ContextMenu.Portal>
					<ContextMenu.SubContent>
						<ContextMenu.Item>Sub menu item</ContextMenu.Item>
						<ContextMenu.Item>Sub menu item</ContextMenu.Item>
						<ContextMenu.Arrow />
					</ContextMenu.SubContent>
				</ContextMenu.Portal>
			</ContextMenu.Sub>
			<ContextMenu.Separator />
			<ContextMenu.Item>…</ContextMenu.Item>
		</ContextMenu.Content>
	</ContextMenu.Portal>
</ContextMenu.Root>
```

### With disabled items

You can add special styles to disabled items via the `data-disabled` attribute.

```jsx line=10
// index.jsx
import { ContextMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<ContextMenu.Root>
		<ContextMenu.Trigger>…</ContextMenu.Trigger>
		<ContextMenu.Portal>
			<ContextMenu.Content>
				<ContextMenu.Item __className__="ContextMenuItem" __disabled__>
					…
				</ContextMenu.Item>
				<ContextMenu.Item className="ContextMenuItem">…</ContextMenu.Item>
			</ContextMenu.Content>
		</ContextMenu.Portal>
	</ContextMenu.Root>
);
```

```css line=2
/* styles.css */
.ContextMenuItem[__data-disabled__] {
	color: gainsboro;
}
```

### With separators

Use the `Separator` part to add a separator between items.

```jsx line=6,8
<ContextMenu.Root>
	<ContextMenu.Trigger>…</ContextMenu.Trigger>
	<ContextMenu.Portal>
		<ContextMenu.Content>
			<ContextMenu.Item>…</ContextMenu.Item>
			<ContextMenu.Separator />
			<ContextMenu.Item>…</ContextMenu.Item>
			<ContextMenu.Separator />
			<ContextMenu.Item>…</ContextMenu.Item>
		</ContextMenu.Content>
	</ContextMenu.Portal>
</ContextMenu.Root>
```

### With labels

Use the `Label` part to help label a section.

```jsx line=5
<ContextMenu.Root>
	<ContextMenu.Trigger>…</ContextMenu.Trigger>
	<ContextMenu.Portal>
		<ContextMenu.Content>
			<ContextMenu.Label>Label</ContextMenu.Label>
			<ContextMenu.Item>…</ContextMenu.Item>
			<ContextMenu.Item>…</ContextMenu.Item>
			<ContextMenu.Item>…</ContextMenu.Item>
		</ContextMenu.Content>
	</ContextMenu.Portal>
</ContextMenu.Root>
```

### With checkbox items

Use the `CheckboxItem` part to add an item that can be checked.

```jsx line=6,16-21
import * as React from "react";
import { CheckIcon } from "@radix-ui/react-icons";
import { ContextMenu } from "radix-ui";

export default () => {
	const [checked, setChecked] = React.useState(true);

	return (
		<ContextMenu.Root>
			<ContextMenu.Trigger>…</ContextMenu.Trigger>
			<ContextMenu.Portal>
				<ContextMenu.Content>
					<ContextMenu.Item>…</ContextMenu.Item>
					<ContextMenu.Item>…</ContextMenu.Item>
					<ContextMenu.Separator />
					<ContextMenu.CheckboxItem
						checked={checked}
						onCheckedChange={setChecked}
					>
						<ContextMenu.ItemIndicator>
							<CheckIcon />
						</ContextMenu.ItemIndicator>
						Checkbox item
					</ContextMenu.CheckboxItem>
				</ContextMenu.Content>
			</ContextMenu.Portal>
		</ContextMenu.Root>
	);
};
```

### With radio items

Use the `RadioGroup` and `RadioItem` parts to add an item that can be checked amongst others.

```jsx line=6,13-32
import * as React from "react";
import { CheckIcon } from "@radix-ui/react-icons";
import { ContextMenu } from "radix-ui";

export default () => {
	const [color, setColor] = React.useState("blue");

	return (
		<ContextMenu.Root>
			<ContextMenu.Trigger>…</ContextMenu.Trigger>
			<ContextMenu.Portal>
				<ContextMenu.Content>
					<ContextMenu.RadioGroup value={color} onValueChange={setColor}>
						<ContextMenu.RadioItem value="red">
							<ContextMenu.ItemIndicator>
								<CheckIcon />
							</ContextMenu.ItemIndicator>
							Red
						</ContextMenu.RadioItem>
						<ContextMenu.RadioItem value="blue">
							<ContextMenu.ItemIndicator>
								<CheckIcon />
							</ContextMenu.ItemIndicator>
							Blue
						</ContextMenu.RadioItem>
						<ContextMenu.RadioItem value="green">
							<ContextMenu.ItemIndicator>
								<CheckIcon />
							</ContextMenu.ItemIndicator>
							Green
						</ContextMenu.RadioItem>
					</ContextMenu.RadioGroup>
				</ContextMenu.Content>
			</ContextMenu.Portal>
		</ContextMenu.Root>
	);
};
```

### With complex items

You can add extra decorative elements in the `Item` parts, such as images.

```jsx line=9,13
import { ContextMenu } from "radix-ui";

export default () => (
	<ContextMenu.Root>
		<ContextMenu.Trigger>…</ContextMenu.Trigger>
		<ContextMenu.Portal>
			<ContextMenu.Content>
				<ContextMenu.Item>
					<img src="…" />
					Adolfo Hess
				</ContextMenu.Item>
				<ContextMenu.Item>
					<img src="…" />
					Miyah Myles
				</ContextMenu.Item>
			</ContextMenu.Content>
		</ContextMenu.Portal>
	</ContextMenu.Root>
);
```

### Constrain the content/sub-content size

You may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.

We expose several CSS custom properties such as `--radix-context-menu-trigger-width` and `--radix-context-menu-content-available-height` to support this. Use them to constrain the content dimensions.

```jsx line=9
// index.jsx
import { ContextMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<ContextMenu.Root>
		<ContextMenu.Trigger>…</ContextMenu.Trigger>
		<ContextMenu.Portal>
			<ContextMenu.Content __className__="ContextMenuContent">
				…
			</ContextMenu.Content>
		</ContextMenu.Portal>
	</ContextMenu.Root>
);
```

```css
/* styles.css */
.ContextMenuContent {
	width: var(__--radix-context-menu-trigger-width__);
	max-height: var(__--radix-context-menu-content-available-height__);
}
```

### Origin-aware animations

We expose a CSS custom property `--radix-context-menu-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.

```jsx line=9
// index.jsx
import { ContextMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<ContextMenu.Root>
		<ContextMenu.Trigger>…</ContextMenu.Trigger>
		<ContextMenu.Portal>
			<ContextMenu.Content __className__="ContextMenuContent">
				…
			</ContextMenu.Content>
		</ContextMenu.Portal>
	</ContextMenu.Root>
);
```

```css line=3
/* styles.css */
.ContextMenuContent {
	transform-origin: var(__--radix-context-menu-content-transform-origin__);
	animation: scaleIn 0.5s ease-out;
}

@keyframes scaleIn {
	from {
		opacity: 0;
		transform: scale(0);
	}
	to {
		opacity: 1;
		transform: scale(1);
	}
}
```

### Collision-aware animations

We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.

```jsx line=9
// index.jsx
import { ContextMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<ContextMenu.Root>
		<ContextMenu.Trigger>…</ContextMenu.Trigger>
		<ContextMenu.Portal>
			<ContextMenu.Content __className__="ContextMenuContent">
				…
			</ContextMenu.Content>
		</ContextMenu.Portal>
	</ContextMenu.Root>
);
```

```css line=6-11
/* styles.css */
.ContextMenuContent {
	animation-duration: 0.6s;
	animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
}
.ContextMenuContent[__data-side="top"__] {
	animation-name: slideUp;
}
.ContextMenuContent[__data-side="bottom"__] {
	animation-name: slideDown;
}

@keyframes slideUp {
	from {
		opacity: 0;
		transform: translateY(10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

@keyframes slideDown {
	from {
		opacity: 0;
		transform: translateY(-10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}
```

## Accessibility

Uses [roving tabindex](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex) to manage focus movement among menu items.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: <span>Activates the focused item.</span>,
		},
		{
			keys: ["Enter"],
			description: <span>Activates the focused item.</span>,
		},
		{
			keys: ["ArrowDown"],
			description: <span>Moves focus to the next item.</span>,
		},
		{
			keys: ["ArrowUp"],
			description: <span>Moves focus to the previous item.</span>,
		},
		{
			keys: ["ArrowRight", "ArrowLeft"],
			description: (
				<span>
					When focus is on <Code>ContextMenu.SubTrigger</Code>, opens or closes
					the submenu depending on reading direction.
				</span>
			),
		},
		{
			keys: ["Esc"],
			description: "Closes the context menu",
		},
	]}
/>

dialog.mdx
---
metaTitle: Dialog
metaDescription: A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.
name: dialog
aria: https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal
---

# Dialog

<Description>
	A window overlaid on either the primary window or another dialog window,
	rendering the content underneath inert.
</Description>

<HeroContainer>
	<DialogDemo />
</HeroContainer>

<HeroCodeBlock folder="Dialog" />

<Highlights
	features={[
		"Supports modal and non-modal modes.",
		"Focus is automatically trapped within modal.",
		"Can be controlled or uncontrolled.",
		<span>
			Manages screen reader announcements with <Code>Title</Code> and{" "}
			<Code>Description</Code> components.
		</span>,
		"Esc closes the component automatically.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-dialog
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Dialog } from "radix-ui";

export default () => (
	<Dialog.Root>
		<Dialog.Trigger />
		<Dialog.Portal>
			<Dialog.Overlay />
			<Dialog.Content>
				<Dialog.Title />
				<Dialog.Description />
				<Dialog.Close />
			</Dialog.Content>
		</Dialog.Portal>
	</Dialog.Root>
);
```

## API Reference

### Root

Contains all the parts of a dialog.

<PropsTable
	data={[
		{
			name: "defaultOpen",
			type: "boolean",
			description: (
				<span>
					The open state of the dialog when it is initially rendered. Use when
					you do not need to control its open state.
				</span>
			),
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the dialog. Must be used in conjunction
					with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the open state of the dialog changes.
				</span>
			),
		},
		{
			name: "modal",
			required: false,
			type: "boolean",
			default: "true",
			description: (
				<span>
					The modality of the dialog. When set to <Code>true</Code>, interaction
					with outside elements will be disabled and only dialog content will be
					visible to screen readers.
				</span>
			),
		},
	]}
/>

### Trigger

The button that opens the dialog.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
	]}
/>

### Portal

When used, portals your overlay and content parts into the `body`.

<PropsTable
	data={[
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. If used on this
					part, it will be inherited by <Code>Dialog.Overlay</Code> and{" "}
					<Code>Dialog.Content</Code>.
				</span>
			),
		},
		{
			name: "container",
			type: "HTMLElement",
			default: "document.body",
			description: "Specify a container element to portal the content into.",
		},
	]}
/>

### Overlay

A layer that covers the inert portion of the view when the dialog is open.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>Dialog.Portal</Code>.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
	]}
/>

### Content

Contains content to be rendered in the open dialog.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>Dialog.Portal</Code>.
				</span>
			),
		},
		{
			name: "onOpenAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves into the component after
					opening. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onCloseAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves to the trigger after closing. It
					can be prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onInteractOutside",
			type: "(event: React.FocusEvent | MouseEvent | TouchEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when an interaction (pointer or focus event)
					happens outside the bounds of the component. It can be prevented by
					calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
	]}
/>

### Close

The button that closes the dialog.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Title

An accessible title to be announced when the dialog is opened.

If you want to hide the title, wrap it inside our [Visually Hidden](../utilities/visually-hidden) utility like this `<VisuallyHidden asChild>`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Description

An optional accessible description to be announced when the dialog is opened.

If you want to hide the description, wrap it inside our [Visually Hidden](../utilities/visually-hidden) utility like this `<VisuallyHidden asChild>`. If you want to remove the description entirely, remove this part and pass `aria-describedby={undefined}` to `Dialog.Content`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

## Examples

### Close after asynchronous form submission

Use the controlled props to programmatically close the Dialog after an async operation has completed.

```jsx line=4,7,10,15,17
import * as React from "react";
import { Dialog } from "radix-ui";

const wait = () => new Promise((resolve) => setTimeout(resolve, 1000));

export default () => {
	const [open, setOpen] = React.useState(false);

	return (
		<Dialog.Root __open__={open} __onOpenChange__={setOpen}>
			<Dialog.Trigger>Open</Dialog.Trigger>
			<Dialog.Portal>
				<Dialog.Overlay />
				<Dialog.Content>
					<form
						onSubmit={(event) => {
							wait().then(() => setOpen(false));
							event.preventDefault();
						}}
					>
						{/** some inputs */}
						<button type="submit">Submit</button>
					</form>
				</Dialog.Content>
			</Dialog.Portal>
		</Dialog.Root>
	);
};
```

### Scrollable overlay

Move the content inside the overlay to render a dialog with overflow.

```jsx
// index.jsx
import { Dialog } from "radix-ui";
import "./styles.css";

export default () => {
	return (
		<Dialog.Root>
			<Dialog.Trigger />
			<Dialog.Portal>
				<Dialog.Overlay className="DialogOverlay">
					<Dialog.Content className="DialogContent">...</Dialog.Content>
				</Dialog.Overlay>
			</Dialog.Portal>
		</Dialog.Root>
	);
};
```

```css
/* styles.css */
.DialogOverlay {
	background: rgba(0 0 0 / 0.5);
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	display: grid;
	place-items: center;
	overflow-y: auto;
}

.DialogContent {
	min-width: 300px;
	background: white;
	padding: 30px;
	border-radius: 4px;
}
```

### Custom portal container

Customise the element that your dialog portals into.

```jsx line=5,10,16
import * as React from "react";
import { Dialog } from "radix-ui";

export default () => {
	const [container, setContainer] = React.useState(null);
	return (
		<div>
			<Dialog.Root>
				<Dialog.Trigger />
				<Dialog.Portal __container__={container}>
					<Dialog.Overlay />
					<Dialog.Content>...</Dialog.Content>
				</Dialog.Portal>
			</Dialog.Root>

			<div ref={__setContainer__} />
		</div>
	);
};
```

## Accessibility

Adheres to the [Dialog WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal).

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: "Opens/closes the dialog.",
		},
		{
			keys: ["Enter"],
			description: "Opens/closes the dialog.",
		},
		{
			keys: ["Tab"],
			description: "Moves focus to the next focusable element.",
		},
		{
			keys: ["Shift + Tab"],
			description: "Moves focus to the previous focusable element.",
		},
		{
			keys: ["Esc"],
			description: (
				<span>
					Closes the dialog and moves focus to <Code>Dialog.Trigger</Code>.
				</span>
			),
		},
	]}
/>

## Custom APIs

Create your own API by abstracting the primitive parts into your own component.

### Abstract the overlay and the close button

This example abstracts the `Dialog.Overlay` and `Dialog.Close` parts.

#### Usage

```jsx
import { Dialog, DialogTrigger, DialogContent } from "./your-dialog";

export default () => (
	<Dialog>
		<DialogTrigger>Dialog trigger</DialogTrigger>
		<DialogContent>Dialog Content</DialogContent>
	</Dialog>
);
```

#### Implementation

```jsx
// your-dialog.jsx
import * as React from "react";
import { Dialog as DialogPrimitive } from "radix-ui";
import { Cross1Icon } from "@radix-ui/react-icons";

export const DialogContent = React.forwardRef(
	({ children, ...props }, forwardedRef) => (
		<DialogPrimitive.Portal>
			<DialogPrimitive.Overlay />
			<DialogPrimitive.Content {...props} ref={forwardedRef}>
				{children}
				<DialogPrimitive.Close aria-label="Close">
					<Cross1Icon />
				</DialogPrimitive.Close>
			</DialogPrimitive.Content>
		</DialogPrimitive.Portal>
	),
);

export const Dialog = DialogPrimitive.Root;
export const DialogTrigger = DialogPrimitive.Trigger;
```

direction-provider.mdx
---
metaTitle: Direction Provider
metaDescription: Wraps your app to provide global reading direction.
name: direction
---

# Direction Provider

<Description>Wraps your app to provide global reading direction.</Description>

<Highlights
	features={["Enables all primitives to inherit global reading direction."]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-direction
```

## Anatomy

Import the component.

```jsx
import { Direction } from "radix-ui";

export default () => <Direction.Provider />;
```

## API Reference

### Provider

When creating localized apps that require right-to-left (RTL) reading direction, you need to wrap your application with the `Direction.Provider` component to ensure all of the primitives adjust their behavior based on the `dir` prop.

<PropsTable
	data={[
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The global reading direction of your application. This will be
					inherited by all primitives.
				</span>
			),
		},
	]}
/>

## Example

Use the direction provider.

```jsx
import { Direction } from "radix-ui";

export default () => (
	<Direction.Provider dir="rtl">{/* your app */}</Direction.Provider>
);
```

dropdown-menu.mdx
---
metaTitle: Dropdown Menu
metaDescription: Displays a menu to the user—such as a set of actions or functions—triggered by a button.
name: dropdown-menu
aria: https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/
---

# Dropdown Menu

<Description>
	Displays a menu to the user—such as a set of actions or functions—triggered by
	a button.
</Description>

<HeroContainer>
	<DropdownMenuDemo />
</HeroContainer>

<HeroCodeBlock folder="DropdownMenu" />

<Highlights
	features={[
		"Can be controlled or uncontrolled.",
		"Supports submenus with configurable reading direction.",
		"Supports items, labels, groups of items.",
		"Supports checkable items (single or multiple) with optional indeterminate state.",
		"Supports modal and non-modal modes.",
		"Customize side, alignment, offsets, collision handling.",
		"Optionally render a pointing arrow.",
		"Focus is fully managed.",
		"Full keyboard navigation.",
		"Typeahead support.",
		"Dismissing and layering behavior is highly customizable.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-dropdown-menu
```

## Anatomy

Import all parts and piece them together.

```jsx
import { DropdownMenu } from "radix-ui";

export default () => (
	<DropdownMenu.Root>
		<DropdownMenu.Trigger />

		<DropdownMenu.Portal>
			<DropdownMenu.Content>
				<DropdownMenu.Label />
				<DropdownMenu.Item />

				<DropdownMenu.Group>
					<DropdownMenu.Item />
				</DropdownMenu.Group>

				<DropdownMenu.CheckboxItem>
					<DropdownMenu.ItemIndicator />
				</DropdownMenu.CheckboxItem>

				<DropdownMenu.RadioGroup>
					<DropdownMenu.RadioItem>
						<DropdownMenu.ItemIndicator />
					</DropdownMenu.RadioItem>
				</DropdownMenu.RadioGroup>

				<DropdownMenu.Sub>
					<DropdownMenu.SubTrigger />
					<DropdownMenu.Portal>
						<DropdownMenu.SubContent />
					</DropdownMenu.Portal>
				</DropdownMenu.Sub>

				<DropdownMenu.Separator />
				<DropdownMenu.Arrow />
			</DropdownMenu.Content>
		</DropdownMenu.Portal>
	</DropdownMenu.Root>
);
```

## API Reference

### Root

Contains all the parts of a dropdown menu.

<PropsTable
	data={[
		{
			name: "defaultOpen",
			type: "boolean",
			description: (
				<span>
					The open state of the dropdown menu when it is initially rendered. Use
					when you do not need to control its open state.
				</span>
			),
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the dropdown menu. Must be used in
					conjunction with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the open state of the dropdown menu changes.
				</span>
			),
		},
		{
			name: "modal",
			required: false,
			type: "boolean",
			default: "true",
			description: (
				<span>
					The modality of the dropdown menu. When set to <Code>true</Code>,
					interaction with outside elements will be disabled and only menu
					content will be visible to screen readers.
				</span>
			),
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of submenus when applicable. If omitted,
					inherits globally from <Code>DirectionProvider</Code> or assumes LTR
					(left-to-right) reading mode.
				</span>
			),
		},
	]}
/>

### Trigger

The button that toggles the dropdown menu. By default, the `DropdownMenu.Content` will position itself against the trigger.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Portal

When used, portals the content part into the `body`.

<PropsTable
	data={[
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. If used on this
					part, it will be inherited by <Code>DropdownMenu.Content</Code> and{" "}
					<Code>DropdownMenu.SubContent</Code> respectively.
				</span>
			),
		},
		{
			name: "container",
			type: "HTMLElement",
			default: "document.body",
			description: "Specify a container element to portal the content into.",
		},
	]}
/>

### Content

The component that pops out when the dropdown menu is open.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last item
					to first, and vice versa.
				</span>
			),
		},
		{
			name: "onCloseAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves to the trigger after closing. It
					can be prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onFocusOutside",
			type: "(event: FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves outside the bounds of the
					component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onInteractOutside",
			type: "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when an interaction (pointer or focus event)
					happens outside the bounds of the component. It can be prevented by
					calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>DropdownMenu.Portal</Code>.
				</span>
			),
		},
		{
			name: "side",
			type: '"top" | "right" | "bottom" | "left"',
			typeSimple: "enum",
			default: '"bottom"',
			description: (
				<span>
					The preferred side of the trigger to render against when open. Will be
					reversed when collisions occur and <Code>avoidCollisions</Code> is
					enabled.
				</span>
			),
		},
		{
			name: "sideOffset",
			type: "number",
			default: "0",
			description: <span>The distance in pixels from the trigger.</span>,
		},
		{
			name: "align",
			type: '"start" | "center" | "end"',
			typeSimple: "enum",
			default: '"center"',
			description: (
				<span>
					The preferred alignment against the trigger. May change when
					collisions occur.
				</span>
			),
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					An offset in pixels from the <Code>"start"</Code> or{" "}
					<Code>"end"</Code> alignment options.
				</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "0",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>.
				</span>
			),
		},
		{
			name: "arrowPadding",
			type: "number",
			default: "0",
			description: (
				<span>
					The padding between the arrow and the edges of the content. If your
					content has <Code>border-radius</Code>, this will prevent it from
					overflowing the corners.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-dropdown-menu-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets
				</>
			),
		},
		{
			cssVariable: "--radix-dropdown-menu-content-available-width",
			description: (
				<>The remaining width between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-dropdown-menu-content-available-height",
			description: (
				<>The remaining height between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-dropdown-menu-trigger-width",
			description: <>The width of the trigger</>,
		},
		{
			cssVariable: "--radix-dropdown-menu-trigger-height",
			description: <>The height of the trigger</>,
		},
	]}
/>

### Arrow

An optional arrow element to render alongside the dropdown menu. This can be used to help visually link the trigger with the `DropdownMenu.Content`. Must be rendered inside `DropdownMenu.Content`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "width",
			type: "number",
			default: 10,
			description: <span>The width of the arrow in pixels.</span>,
		},
		{
			name: "height",
			type: "number",
			default: 5,
			description: <span>The height of the arrow in pixels.</span>,
		},
	]}
/>

### Item

The component that contains the dropdown menu items.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects an item (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the dropdown menu from closing when selecting that item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Group

Used to group multiple `DropdownMenu.Item`s.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Label

Used to render a label. It won't be focusable using arrow keys.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### CheckboxItem

An item that can be controlled and rendered like a checkbox.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "checked",
			type: `boolean | 'indeterminate'`,
			description: (
				<span>
					The controlled checked state of the item. Must be used in conjunction
					with <Code>onCheckedChange</Code>.
				</span>
			),
		},
		{
			name: "onCheckedChange",
			type: `(checked: boolean) => void`,
			typeSimple: "function",
			description: (
				<span>Event handler called when the checked state changes.</span>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects an item (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the dropdown menu from closing when selecting that item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked", "indeterminate"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### RadioGroup

Used to group multiple `DropdownMenu.RadioItem`s.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			type: "string",
			description: "The value of the selected item in the group.",
		},
		{
			name: "onValueChange",
			type: "(value: string) => void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
	]}
/>

### RadioItem

An item that can be controlled and rendered like a radio.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			type: "string",
			required: true,
			description: "The unique value of the item.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects an item (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the dropdown menu from closing when selecting that item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked", "indeterminate"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### ItemIndicator

Renders when the parent `DropdownMenu.CheckboxItem` or `DropdownMenu.RadioItem` is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked", "indeterminate"],
		},
	]}
/>

### Separator

Used to visually separate items in the dropdown menu.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Sub

Contains all the parts of a submenu.

<PropsTable
	data={[
		{
			name: "defaultOpen",
			type: "boolean",
			description: (
				<span>
					The open state of the submenu when it is initially rendered. Use when
					you do not need to control its open state.
				</span>
			),
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the submenu. Must be used in conjunction
					with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the open state of the submenu changes.
				</span>
			),
		},
	]}
/>

### SubTrigger

An item that opens a submenu. Must be rendered inside `DropdownMenu.Sub`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-dropdown-menu-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets
				</>
			),
		},
		{
			cssVariable: "--radix-dropdown-menu-content-available-width",
			description: (
				<>The remaining width between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-dropdown-menu-content-available-height",
			description: (
				<>The remaining height between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-dropdown-menu-trigger-width",
			description: <>The width of the trigger</>,
		},
		{
			cssVariable: "--radix-dropdown-menu-trigger-height",
			description: <>The height of the trigger</>,
		},
	]}
/>

### SubContent

The component that pops out when a submenu is open. Must be rendered inside `DropdownMenu.Sub`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last item
					to first, and vice versa.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onFocusOutside",
			type: "(event: FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves outside the bounds of the
					component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onInteractOutside",
			type: "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when an interaction (pointer or focus event)
					happens outside the bounds of the component. It can be prevented by
					calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>DropdownMenu.Portal</Code>.
				</span>
			),
		},
		{
			name: "sideOffset",
			type: "number",
			default: "0",
			description: <span>The distance in pixels from the trigger.</span>,
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					An offset in pixels from the <Code>"start"</Code> or{" "}
					<Code>"end"</Code> alignment options.
				</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "0",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>.
				</span>
			),
		},
		{
			name: "arrowPadding",
			type: "number",
			default: "0",
			description: (
				<span>
					The padding between the arrow and the edges of the content. If your
					content has <Code>border-radius</Code>, this will prevent it from
					overflowing the corners.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

## Examples

### With submenus

You can create submenus by using `DropdownMenu.Sub` in combination with its parts.

```jsx line=8-17
<DropdownMenu.Root>
	<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
	<DropdownMenu.Portal>
		<DropdownMenu.Content>
			<DropdownMenu.Item>…</DropdownMenu.Item>
			<DropdownMenu.Item>…</DropdownMenu.Item>
			<DropdownMenu.Separator />
			<DropdownMenu.Sub>
				<DropdownMenu.SubTrigger>Sub menu →</DropdownMenu.SubTrigger>
				<DropdownMenu.Portal>
					<DropdownMenu.SubContent>
						<DropdownMenu.Item>Sub menu item</DropdownMenu.Item>
						<DropdownMenu.Item>Sub menu item</DropdownMenu.Item>
						<DropdownMenu.Arrow />
					</DropdownMenu.SubContent>
				</DropdownMenu.Portal>
			</DropdownMenu.Sub>
			<DropdownMenu.Separator />
			<DropdownMenu.Item>…</DropdownMenu.Item>
		</DropdownMenu.Content>
	</DropdownMenu.Portal>
</DropdownMenu.Root>
```

### With disabled items

You can add special styles to disabled items via the `data-disabled` attribute.

```jsx line=10
// index.jsx
import { DropdownMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<DropdownMenu.Root>
		<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
		<DropdownMenu.Portal>
			<DropdownMenu.Content>
				<DropdownMenu.Item __className__="DropdownMenuItem" __disabled__>
					…
				</DropdownMenu.Item>
				<DropdownMenu.Item className="DropdownMenuItem">…</DropdownMenu.Item>
			</DropdownMenu.Content>
		</DropdownMenu.Portal>
	</DropdownMenu.Root>
);
```

```css line=2
/* styles.css */
.DropdownMenuItem[__data-disabled__] {
	color: gainsboro;
}
```

### With separators

Use the `Separator` part to add a separator between items.

```jsx line=6,8
<DropdownMenu.Root>
	<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
	<DropdownMenu.Portal>
		<DropdownMenu.Content>
			<DropdownMenu.Item>…</DropdownMenu.Item>
			<DropdownMenu.Separator />
			<DropdownMenu.Item>…</DropdownMenu.Item>
			<DropdownMenu.Separator />
			<DropdownMenu.Item>…</DropdownMenu.Item>
		</DropdownMenu.Content>
	</DropdownMenu.Portal>
</DropdownMenu.Root>
```

### With labels

Use the `Label` part to help label a section.

```jsx line=5
<DropdownMenu.Root>
	<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
	<DropdownMenu.Portal>
		<DropdownMenu.Content>
			<DropdownMenu.Label>Label</DropdownMenu.Label>
			<DropdownMenu.Item>…</DropdownMenu.Item>
			<DropdownMenu.Item>…</DropdownMenu.Item>
			<DropdownMenu.Item>…</DropdownMenu.Item>
		</DropdownMenu.Content>
	</DropdownMenu.Portal>
</DropdownMenu.Root>
```

### With checkbox items

Use the `CheckboxItem` part to add an item that can be checked.

```jsx line=6,16-21
import * as React from "react";
import { CheckIcon } from "@radix-ui/react-icons";
import { DropdownMenu } from "radix-ui";

export default () => {
	const [checked, setChecked] = React.useState(true);

	return (
		<DropdownMenu.Root>
			<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
			<DropdownMenu.Portal>
				<DropdownMenu.Content>
					<DropdownMenu.Item>…</DropdownMenu.Item>
					<DropdownMenu.Item>…</DropdownMenu.Item>
					<DropdownMenu.Separator />
					<DropdownMenu.CheckboxItem
						checked={checked}
						onCheckedChange={setChecked}
					>
						<DropdownMenu.ItemIndicator>
							<CheckIcon />
						</DropdownMenu.ItemIndicator>
						Checkbox item
					</DropdownMenu.CheckboxItem>
				</DropdownMenu.Content>
			</DropdownMenu.Portal>
		</DropdownMenu.Root>
	);
};
```

### With radio items

Use the `RadioGroup` and `RadioItem` parts to add an item that can be checked amongst others.

```jsx line=6,13-32
import * as React from "react";
import { CheckIcon } from "@radix-ui/react-icons";
import { DropdownMenu } from "radix-ui";

export default () => {
	const [color, setColor] = React.useState("blue");

	return (
		<DropdownMenu.Root>
			<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
			<DropdownMenu.Portal>
				<DropdownMenu.Content>
					<DropdownMenu.RadioGroup value={color} onValueChange={setColor}>
						<DropdownMenu.RadioItem value="red">
							<DropdownMenu.ItemIndicator>
								<CheckIcon />
							</DropdownMenu.ItemIndicator>
							Red
						</DropdownMenu.RadioItem>
						<DropdownMenu.RadioItem value="blue">
							<DropdownMenu.ItemIndicator>
								<CheckIcon />
							</DropdownMenu.ItemIndicator>
							Blue
						</DropdownMenu.RadioItem>
						<DropdownMenu.RadioItem value="green">
							<DropdownMenu.ItemIndicator>
								<CheckIcon />
							</DropdownMenu.ItemIndicator>
							Green
						</DropdownMenu.RadioItem>
					</DropdownMenu.RadioGroup>
				</DropdownMenu.Content>
			</DropdownMenu.Portal>
		</DropdownMenu.Root>
	);
};
```

### With complex items

You can add extra decorative elements in the `Item` parts, such as images.

```jsx line=9,13
import { DropdownMenu } from "radix-ui";

export default () => (
	<DropdownMenu.Root>
		<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
		<DropdownMenu.Portal>
			<DropdownMenu.Content>
				<DropdownMenu.Item>
					<img src="…" />
					Adolfo Hess
				</DropdownMenu.Item>
				<DropdownMenu.Item>
					<img src="…" />
					Miyah Myles
				</DropdownMenu.Item>
			</DropdownMenu.Content>
		</DropdownMenu.Portal>
	</DropdownMenu.Root>
);
```

### Constrain the content/sub-content size

You may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.

We expose several CSS custom properties such as `--radix-dropdown-menu-trigger-width` and `--radix-dropdown-menu-content-available-height` to support this. Use them to constrain the content dimensions.

```jsx line=9
// index.jsx
import { DropdownMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<DropdownMenu.Root>
		<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
		<DropdownMenu.Portal>
			<DropdownMenu.Content __className__="DropdownMenuContent" sideOffset={5}>
				…
			</DropdownMenu.Content>
		</DropdownMenu.Portal>
	</DropdownMenu.Root>
);
```

```css
/* styles.css */
.DropdownMenuContent {
	width: var(__--radix-dropdown-menu-trigger-width__);
	max-height: var(__--radix-dropdown-menu-content-available-height__);
}
```

### Origin-aware animations

We expose a CSS custom property `--radix-dropdown-menu-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.

```jsx line=9
// index.jsx
import { DropdownMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<DropdownMenu.Root>
		<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
		<DropdownMenu.Portal>
			<DropdownMenu.Content __className__="DropdownMenuContent">
				…
			</DropdownMenu.Content>
		</DropdownMenu.Portal>
	</DropdownMenu.Root>
);
```

```css line=3
/* styles.css */
.DropdownMenuContent {
	transform-origin: var(__--radix-dropdown-menu-content-transform-origin__);
	animation: scaleIn 0.5s ease-out;
}

@keyframes scaleIn {
	from {
		opacity: 0;
		transform: scale(0);
	}
	to {
		opacity: 1;
		transform: scale(1);
	}
}
```

### Collision-aware animations

We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.

```jsx line=9
// index.jsx
import { DropdownMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<DropdownMenu.Root>
		<DropdownMenu.Trigger>…</DropdownMenu.Trigger>
		<DropdownMenu.Portal>
			<DropdownMenu.Content __className__="DropdownMenuContent">
				…
			</DropdownMenu.Content>
		</DropdownMenu.Portal>
	</DropdownMenu.Root>
);
```

```css line=6-11
/* styles.css */
.DropdownMenuContent {
	animation-duration: 0.6s;
	animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
}
.DropdownMenuContent[__data-side="top"__] {
	animation-name: slideUp;
}
.DropdownMenuContent[__data-side="bottom"__] {
	animation-name: slideDown;
}

@keyframes slideUp {
	from {
		opacity: 0;
		transform: translateY(10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

@keyframes slideDown {
	from {
		opacity: 0;
		transform: translateY(-10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}
```

## Accessibility

Adheres to the [Menu Button WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/) and uses [roving tabindex](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex) to manage focus movement among menu items.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: (
				<span>
					When focus is on <Code>DropdownMenu.Trigger</Code>, opens the dropdown
					menu and focuses the first item.
					<br />
					When focus is on an item, activates the focused item.
				</span>
			),
		},
		{
			keys: ["Enter"],
			description: (
				<span>
					When focus is on <Code>DropdownMenu.Trigger</Code>, opens the dropdown
					menu and focuses the first item.
					<br />
					When focus is on an item, activates the focused item.
				</span>
			),
		},
		{
			keys: ["ArrowDown"],
			description: (
				<span>
					When focus is on <Code>DropdownMenu.Trigger</Code>, opens the dropdown
					menu.
					<br />
					When focus is on an item, moves focus to the next item.
				</span>
			),
		},
		{
			keys: ["ArrowUp"],
			description: (
				<span>When focus is on an item, moves focus to the previous item.</span>
			),
		},
		{
			keys: ["ArrowRight", "ArrowLeft"],
			description: (
				<span>
					When focus is on <Code>DropdownMenu.SubTrigger</Code>, opens or closes
					the submenu depending on reading direction.
				</span>
			),
		},
		{
			keys: ["Esc"],
			description: (
				<span>
					Closes the dropdown menu and moves focus to{" "}
					<Code>DropdownMenu.Trigger</Code>.
				</span>
			),
		},
	]}
/>

## Custom APIs

Create your own API by abstracting the primitive parts into your own component.

### Abstract the arrow and item indicators

This example abstracts the `DropdownMenu.Arrow` and `DropdownMenu.ItemIndicator` parts. It also wraps implementation details for `CheckboxItem` and `RadioItem`.

#### Usage

```jsx
import {
	DropdownMenu,
	DropdownMenuTrigger,
	DropdownMenuContent,
	DropdownMenuLabel,
	DropdownMenuItem,
	DropdownMenuGroup,
	DropdownMenuCheckboxItem,
	DropdownMenuRadioGroup,
	DropdownMenuRadioItem,
	DropdownMenuSeparator,
} from "./your-dropdown-menu";

export default () => (
	<DropdownMenu>
		<DropdownMenuTrigger>DropdownMenu trigger</DropdownMenuTrigger>
		<DropdownMenuContent>
			<DropdownMenuItem>Item</DropdownMenuItem>
			<DropdownMenuLabel>Label</DropdownMenuLabel>
			<DropdownMenuGroup>Group</DropdownMenuGroup>
			<DropdownMenuCheckboxItem>CheckboxItem</DropdownMenuCheckboxItem>
			<DropdownMenuSeparator>Separator</DropdownMenuSeparator>
			<DropdownMenuRadioGroup>
				<DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>
				<DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>
			</DropdownMenuRadioGroup>
		</DropdownMenuContent>
	</DropdownMenu>
);
```

#### Implementation

```jsx
// your-dropdown-menu.jsx
import * as React from "react";
import { DropdownMenu as DropdownMenuPrimitive } from "radix-ui";
import { CheckIcon, DividerHorizontalIcon } from "@radix-ui/react-icons";

export const DropdownMenu = DropdownMenuPrimitive.Root;
export const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

export const DropdownMenuContent = React.forwardRef(
	({ children, ...props }, forwardedRef) => {
		return (
			<DropdownMenuPrimitive.Portal>
				<DropdownMenuPrimitive.Content {...props} ref={forwardedRef}>
					{children}
					<DropdownMenuPrimitive.Arrow />
				</DropdownMenuPrimitive.Content>
			</DropdownMenuPrimitive.Portal>
		);
	},
);

export const DropdownMenuLabel = DropdownMenuPrimitive.Label;
export const DropdownMenuItem = DropdownMenuPrimitive.Item;
export const DropdownMenuGroup = DropdownMenuPrimitive.Group;

export const DropdownMenuCheckboxItem = React.forwardRef(
	({ children, ...props }, forwardedRef) => {
		return (
			<DropdownMenuPrimitive.CheckboxItem {...props} ref={forwardedRef}>
				{children}
				<DropdownMenuPrimitive.ItemIndicator>
					{props.checked === "indeterminate" && <DividerHorizontalIcon />}
					{props.checked === true && <CheckIcon />}
				</DropdownMenuPrimitive.ItemIndicator>
			</DropdownMenuPrimitive.CheckboxItem>
		);
	},
);

export const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

export const DropdownMenuRadioItem = React.forwardRef(
	({ children, ...props }, forwardedRef) => {
		return (
			<DropdownMenuPrimitive.RadioItem {...props} ref={forwardedRef}>
				{children}
				<DropdownMenuPrimitive.ItemIndicator>
					<CheckIcon />
				</DropdownMenuPrimitive.ItemIndicator>
			</DropdownMenuPrimitive.RadioItem>
		);
	},
);

export const DropdownMenuSeparator = DropdownMenuPrimitive.Separator;
```

form.mdx
---
metaTitle: Form
metaDescription: Collect information from your users using validation rules.
name: form
---

# Form

<Description>
	Collect information from your users using validation rules.
</Description>

<HeroContainer>
	<FormDemo />
</HeroContainer>

<HeroCodeBlock folder="Form" />

<Highlights
	features={[
		<>
			Built on top of the native browser{" "}
			<Link href="https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation">
				constraint validation API.
			</Link>
		</>,
		"Supports built-in validation.",
		"Supports custom validation.",
		"Full customization of validation messages.",
		"Accessible validation messages.",
		"Supports client-side and server-side scenarios.",
		"Focus is fully managed.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-form
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Form } from "radix-ui";

export default () => (
	<Form.Root>
		<Form.Field>
			<Form.Label />
			<Form.Control />
			<Form.Message />
			<Form.ValidityState />
		</Form.Field>

		<Form.Message />
		<Form.ValidityState />

		<Form.Submit />
	</Form.Root>
);
```

## API Reference

### Root

Contains all the parts of a form.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "onClearServerErrors",
			required: false,
			type: "() => void",
			typeSimple: "function",
			description:
				"Event handler called when the form is submitted or reset and the server errors need to be cleared.",
		},
	]}
/>

### Field

The wrapper for a field. It handles id/name and label accessibility automatically.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "name",
			required: true,
			type: "string",
			description:
				"The name of the field that will be passed down to the control and used to match with validation messages.",
		},
		{
			name: "serverInvalid",
			required: false,
			type: "boolean",
			description: "Use this prop to mark the field as invalid on the server.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-invalid]",
			values: "Present when the field is invalid",
		},
		{
			attribute: "[data-valid]",
			values: "Present when the field is valid",
		},
	]}
/>

### Label

A label element which is automatically wired when nested inside a `Field` part.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-invalid]",
			values: "Present when the field is invalid",
		},
		{
			attribute: "[data-valid]",
			values: "Present when the field is valid",
		},
	]}
/>

### Control

A control element (by default an `input`) which is automatically wired when nested inside a `Field` part.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-invalid]",
			values: "Present when the field is invalid",
		},
		{
			attribute: "[data-valid]",
			values: "Present when the field is valid",
		},
	]}
/>

### Message

A validation message which is automatically wired (functionality and accessibility) to a given control when nested inside a `Field` part. It can be used for built-in and custom client-side validation, as well as server-side validation. When used outside a `Field` you must pass a `name` prop matching a field.

`Form.Message` accepts a `match` prop which is used to determine when the message should show. It matches the native HTML validity state (`ValidityState` on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)) which validates against attributes such as `required`, `min`, `max`. The message will show if the given `match` is `true` on the control’s validity state.

You can also pass a function to `match` to provide custom validation rules.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "match",
			required: false,
			type: (
				<>
					| 'badInput'
					<br />
					| 'patternMismatch'
					<br />
					| 'rangeOverflow'
					<br />
					| 'rangeUnderflow'
					<br />
					| 'stepMismatch'
					<br />
					| 'tooLong'
					<br />
					| 'tooShort'
					<br />
					| 'typeMismatch'
					<br />
					| 'valid'
					<br />
					| 'valueMissing'
					<br />| {`((value: string, formData: FormData) => boolean)`}
					<br />| {`((value: string, formData: FormData) => Promise<boolean>)`}
					<br />
				</>
			),
			typeSimple: "Matcher",
			description:
				"Used to indicate on which condition the message should be visible.",
		},
		{
			name: "forceMatch",
			required: false,
			type: "boolean",
			default: "false",
			description:
				"Forces the message to be shown. This is useful when using server-side validation.",
		},
		{
			name: "name",
			required: false,
			type: "string",
			description: (
				<>
					Used to target a specific field by name when rendering outside of a{" "}
					<Code>Field</Code> part.
				</>
			),
		},
	]}
/>

### ValidityState

Use this render-prop component to access a given field’s validity state in render (see `ValidityState` on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)). A field's validity is available automatically when nested inside a `Field` part, otherwise you must pass a `name` prop to associate it.

<PropsTable
	data={[
		{
			name: "children",
			required: false,
			type: "(validity: ValidityState | undefined) => React.ReactNode",
			typeSimple: "function",
			description:
				"A render function that receives the validity state of the field.",
		},
		{
			name: "name",
			required: false,
			type: "string",
			description: (
				<>
					Used to target a specific field by name when rendering outside of a{" "}
					<Code>Field</Code> part.
				</>
			),
		},
	]}
/>

### Submit

The submit button.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

## Examples

### Composing with your own components

Using `asChild` you can compose the `Form` primitive parts with your own components.

```jsx line=3
<Form.Field name="name">
	<Form.Label>Full name</Form.Label>
	<Form.Control __asChild__>
		<TextField.Input variant="primary" />
	</Form.Control>
</Form.Field>
```

It can also be used to compose other types of controls, such as a `select`:

```jsx line=3
<Form.Field name="country">
	<Form.Label>Country</Form.Label>
	<Form.Control __asChild__>
		<select>
			<option value="uk">United Kingdom</option>…
		</select>
	</Form.Control>
</Form.Field>
```

> Note: At the moment, it is not possible to compose `Form` with Radix's other form primitives such as `Checkbox`, `Select`, etc. We are working on a solution for this.

### Providing your own validation messages

When no `children` are provided, `Form.Message` will render a default error message for the given `match`.

```jsx
// will yield "This value is missing"
<Form.Message match="valueMissing" />
```

You can provide a more meaningful message by passing your own `children`. This is also useful for internationalization.

```jsx
// will yield "Please provide a name"
<Form.Message match="valueMissing">__Please provide a name__</Form.Message>
```

### Custom validation

On top of all the built-in client-side validation matches described above you can also provide your own custom validation whilst still making use of the platform's validation abilities. It uses the `customError` type present in the [constraint validition API](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation).

You can pass your own validation function into the `match` prop on `Form.Message`. Here's an example:

```jsx line=4
<Form.Field name="name">
	<Form.Label>Full name</Form.Label>
	<Form.Control />
	<Form.Message __match__={(value, formData) => value !== "John"}>
		Only John is allowed.
	</Form.Message>
</Form.Field>
```

> `match` will be called with the current value of the control as first argument and the entire `FormData` as second argument.
> `match` can also be an `async` function (or return a promise) to perform async validation.

### Styling based on validity

We add `data-valid` and `data-invalid` attributes to the relevant parts. Use it to style your components accordingly.
Here is an example styling the `Label` part.

```jsx line=8
//index.jsx
import * as React from "react";
import { Form } from "radix-ui";

export default () => (
	<Form.Root>
		<Form.Field name="email">
			<Form.Label __className__="FormLabel">Email</Form.Label>
			<Form.Control type="email" />
		</Form.Field>
	</Form.Root>
);
```

```css line=2,5
/* styles.css */
.FormLabel[__data-invalid__] {
	color: red;
}
.FormLabel[__data-valid__] {
	color: green;
}
```

### Accessing the validity state for more control

You may need to access the raw validity state of a field in order to display your own icons, or interface with a component library via it's defined props. You can do this by using the `Form.ValidityState` part:

```jsx line=3-4,7-8
<Form.Field name="name">
	<Form.Label>Full name</Form.Label>
	<Form.ValidityState>
		{(validity) => (
			<Form.Control asChild>
				<TextField.Input
					variant="primary"
					state={getTextFieldInputState(__validity__)}
				/>
			</Form.Control>
		)}
	</Form.ValidityState>
</Form.Field>
```

### Server-side validation

The component also supports server-side validation using the same `Form.Message` component.
You can re-use the same messages you defined for client-side errors by passing a `forceMatch` prop which will force the message to show regardless of the client-side matching logic.

If the message doesn't exist on the client-side, you can render a `Form.Message` without a `match` too.
The field is marked as invalid by passing a `serverInvalid` boolean prop to the `Form.Field` part.

Here's an example with server-side error handling:

```jsx line=5-8,13,23,28-30,49-54
import * as React from "react";
import { Form } from "radix-ui";

function Page() {
	const [serverErrors, setServerErrors] = React.useState({
		email: false,
		password: false,
	});

	return (
		<Form.Root
			// `onSubmit` only triggered if it passes client-side validation
			onSubmit={(event) => {
				const data = Object.fromEntries(new FormData(event.currentTarget));

				// Submit form data and catch errors in the response
				submitForm(data)
					.then(() => {})
					/**
					 * Map errors from your server response into a structure you'd like to work with.
					 * In this case resulting in this object: `{ email: false, password: true }`
					 */
					.catch((errors) => __setServerErrors__(mapServerErrors(errors)));

				// prevent default form submission
				event.preventDefault();
			}}
			onClearServerErrors={() =>
				__setServerErrors__({ email: false, password: false })
			}
		>
			<Form.Field name="email" __serverInvalid__={serverErrors.email}>
				<Form.Label>Email address</Form.Label>
				<Form.Control type="email" required />
				<Form.Message match="valueMissing">
					Please enter your email.
				</Form.Message>
				<Form.Message match="typeMismatch" __forceMatch__={serverErrors.email}>
					Please provide a valid email.
				</Form.Message>
			</Form.Field>

			<Form.Field name="password" __serverInvalid__={serverErrors.password}>
				<Form.Label>Password</Form.Label>
				<Form.Control type="password" required />
				<Form.Message match="valueMissing">
					Please enter a password.
				</Form.Message>
				{serverErrors.password && (
					<Form.Message>
						Please provide a valid password. It should contain at least 1 number
						and 1 special character.
					</Form.Message>
				)}
			</Form.Field>

			<Form.Submit>Submit</Form.Submit>
		</Form.Root>
	);
}
```

You should clear the server errors using the `onClearServerErrors` callback prop on the `Form.Root` part. It will clear the server errors before the form is re-submitted, and when the form is reset.

In addition, this provides control over when to reset single server errors. For example you could reset the email server error as soon as the user edits it:

```jsx line=3
<Form.Field name="email" serverInvalid={serverErrors.email}>
	<Form.Label>Email address</Form.Label>
	<Form.Control
		type="email"
		__onChange__={() => setServerErrors((prev) => ({ ...prev, email: false }))}
	/>
	<Form.Message match="valueMissing">Please enter your email.</Form.Message>
	<Form.Message match="typeMismatch" forceMatch={serverErrors.email}>
		Please provide a valid email.
	</Form.Message>
</Form.Field>
```

## Accessibility

The component follows the "inline errors" pattern for validation:

- Label and control are associated using the `name` provided on `Form.Field`
- When one or more client-side error messages display, they are automatically associated with their matching control and announced accordingly
- Focus is moved to the first invalid control

getting-started.mdx
---
metaTitle: Getting started
metaDescription: A quick tutorial to get you up and running with Radix Primitives.
name: popover
---

# Getting started

<Description>
	A quick tutorial to get you up and running with Radix Primitives.
</Description>

## Implementing a Popover

In this quick tutorial, we will install and style the [Popover](../components/popover) component.

### 1. Install the primitive

Install Radix Primitives from your command line.

```bash
npm install radix-ui@latest
```

### 2. Import the parts

Import and structure the parts.

```jsx line=3,6-14
// index.jsx
import * as React from "react";
import { Popover } from "radix-ui";

const PopoverDemo = () => (
	<Popover.Root>
		<Popover.Trigger>More info</Popover.Trigger>
		<Popover.Portal>
			<Popover.Content>
				Some more info…
				<Popover.Arrow />
			</Popover.Content>
		</Popover.Portal>
	</Popover.Root>
);

export default PopoverDemo;
```

### 3. Add your styles

Add styles where desired.

```jsx line=4,8,10,12
// index.jsx
import * as React from "react";
import { Popover } from "radix-ui";
import "./styles.css";

const PopoverDemo = () => (
	<Popover.Root>
		<Popover.Trigger __className__="PopoverTrigger">Show info</Popover.Trigger>
		<Popover.Portal>
			<Popover.Content __className__="PopoverContent">
				Some content
				<Popover.Arrow __className__="PopoverArrow" />
			</Popover.Content>
		</Popover.Portal>
	</Popover.Root>
);

export default PopoverDemo;
```

```css
/* styles.css */
.PopoverTrigger {
	background-color: white;
	border-radius: 4px;
}

.PopoverContent {
	border-radius: 4px;
	padding: 20px;
	width: 260px;
	background-color: white;
}

.PopoverArrow {
	fill: white;
}
```

### Demo

Here's a complete demo.

<HeroContainer>
	<GettingStartedDemo />
</HeroContainer>

<HeroCodeBlock folder="GettingStarted" cssLib="css" />

## Summary

The steps above outline briefly what's involved in using a Radix Primitive in your application.

These components are low-level enough to give you control over how you want to wrap them. You're free to introduce your own high-level API to better suit the needs of your team and product.

In a few simple steps, we've implemented a fully accessible Popover component, without having to worry about many of its complexities.

- Adheres to [WAI-ARIA](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal) design pattern.
- Can be controlled or uncontrolled.
- Customize side, alignment, offsets, collision handling.
- Optionally render a pointing arrow.
- Focus is fully managed and customizable.
- Dismissing and layering behavior is highly customizable.

hover-card.mdx
---
metaTitle: Hover Card
metaDescription: For sighted users to preview content available behind a link.
name: hover-card
---

# Hover Card

<Description>
	For sighted users to preview content available behind a link.
</Description>

<HeroContainer>
	<HoverCardDemo />
</HeroContainer>

<HeroCodeBlock folder="HoverCard" />

<Highlights
	features={[
		"Can be controlled or uncontrolled.",
		"Customize side, alignment, offsets, collision handling.",
		"Optionally render a pointing arrow.",
		"Supports custom open and close delays.",
		"Ignored by screen readers.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-hover-card
```

## Anatomy

Import all parts and piece them together.

```jsx
import { HoverCard } from "radix-ui";

export default () => (
	<HoverCard.Root>
		<HoverCard.Trigger />
		<HoverCard.Portal>
			<HoverCard.Content>
				<HoverCard.Arrow />
			</HoverCard.Content>
		</HoverCard.Portal>
	</HoverCard.Root>
);
```

## API Reference

### Root

Contains all the parts of a hover card.

<PropsTable
	data={[
		{
			name: "defaultOpen",
			type: "boolean",
			description: (
				<span>
					The open state of the hover card when it is initially rendered. Use
					when you do not need to control its open state.
				</span>
			),
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the hover card. Must be used in
					conjunction with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the open state of the hover card changes.
				</span>
			),
		},
		{
			name: "openDelay",
			type: "number",
			default: 700,
			description:
				"The duration from when the mouse enters the trigger until the hover card opens.",
		},
		{
			name: "closeDelay",
			type: "number",
			default: 300,
			description:
				"The duration from when the mouse leaves the trigger or content until the hover card closes.",
		},
	]}
/>

### Trigger

The link that opens the hover card when hovered.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
	]}
/>

### Portal

When used, portals the content part into the `body`.

<PropsTable
	data={[
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. If used on this
					part, it will be inherited by <Code>HoverCard.Content</Code>.
				</span>
			),
		},
		{
			name: "container",
			type: "HTMLElement",
			default: "document.body",
			description: "Specify a container element to portal the content into.",
		},
	]}
/>

### Content

The component that pops out when the hover card is open.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>HoverCard.Portal</Code>.
				</span>
			),
		},
		{
			name: "side",
			type: '"top" | "right" | "bottom" | "left"',
			typeSimple: "enum",
			default: '"bottom"',
			description: (
				<span>
					The preferred side of the trigger to render against when open. Will be
					reversed when collisions occur and <Code>avoidCollisions</Code> is
					enabled.
				</span>
			),
		},
		{
			name: "sideOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					<span>The distance in pixels from the trigger.</span>
				</span>
			),
		},
		{
			name: "align",
			type: '"start" | "center" | "end"',
			typeSimple: "enum",
			default: '"center"',
			description: (
				<span>
					The preferred alignment against the trigger. May change when
					collisions occur.
				</span>
			),
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					An offset in pixels from the <Code>"start"</Code> or{" "}
					<Code>"end"</Code> alignment options.
				</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "0",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>.
				</span>
			),
		},
		{
			name: "arrowPadding",
			type: "number",
			default: "0",
			description: (
				<span>
					The padding between the arrow and the edges of the content. If your
					content has <Code>border-radius</Code>, this will prevent it from
					overflowing the corners.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-hover-card-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets
				</>
			),
		},
		{
			cssVariable: "--radix-hover-card-content-available-width",
			description: (
				<>The remaining width between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-hover-card-content-available-height",
			description: (
				<>The remaining height between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-hover-card-trigger-width",
			description: <>The width of the trigger</>,
		},
		{
			cssVariable: "--radix-hover-card-trigger-height",
			description: <>The height of the trigger</>,
		},
	]}
/>

### Arrow

An optional arrow element to render alongside the hover card. This can be used to help visually link the trigger with the `HoverCard.Content`. Must be rendered inside `HoverCard.Content`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "width",
			type: "number",
			default: 10,
			description: <span>The width of the arrow in pixels.</span>,
		},
		{
			name: "height",
			type: "number",
			default: 5,
			description: <span>The height of the arrow in pixels.</span>,
		},
	]}
/>

## Examples

### Show instantly

Use the `openDelay` prop to control the time it takes for the hover card to open.

```jsx line=4
import { HoverCard } from "radix-ui";

export default () => (
	<HoverCard.Root __openDelay__={0}>
		<HoverCard.Trigger>…</HoverCard.Trigger>
		<HoverCard.Content>…</HoverCard.Content>
	</HoverCard.Root>
);
```

### Constrain the content size

You may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.

We expose several CSS custom properties such as `--radix-hover-card-trigger-width` and `--radix-hover-card-content-available-height` to support this. Use them to constrain the content dimensions.

```jsx line=9
// index.jsx
import { HoverCard } from "radix-ui";
import "./styles.css";

export default () => (
	<HoverCard.Root>
		<HoverCard.Trigger>…</HoverCard.Trigger>
		<HoverCard.Portal>
			<HoverCard.Content __className__="HoverCardContent" sideOffset={5}>
				…
			</HoverCard.Content>
		</HoverCard.Portal>
	</HoverCard.Root>
);
```

```css
/* styles.css */
.HoverCardContent {
	width: var(__--radix-hover-card-trigger-width__);
	max-height: var(__--radix-hover-card-content-available-height__);
}
```

### Origin-aware animations

We expose a CSS custom property `--radix-hover-card-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.

```jsx line=8
// index.jsx
import { HoverCard } from "radix-ui";
import "./styles.css";

export default () => (
	<HoverCard.Root>
		<HoverCard.Trigger>…</HoverCard.Trigger>
		<HoverCard.Content __className__="HoverCardContent">…</HoverCard.Content>
	</HoverCard.Root>
);
```

```css line=3
/* styles.css */
.HoverCardContent {
	transform-origin: var(__--radix-hover-card-content-transform-origin__);
	animation: scaleIn 0.5s ease-out;
}

@keyframes scaleIn {
	from {
		opacity: 0;
		transform: scale(0);
	}
	to {
		opacity: 1;
		transform: scale(1);
	}
}
```

### Collision-aware animations

We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.

```jsx line=8
// index.jsx
import { HoverCard } from "radix-ui";
import "./styles.css";

export default () => (
	<HoverCard.Root>
		<HoverCard.Trigger>…</HoverCard.Trigger>
		<HoverCard.Content __className__="HoverCardContent">…</HoverCard.Content>
	</HoverCard.Root>
);
```

```css line=6-11
/* styles.css */
.HoverCardContent {
	animation-duration: 0.6s;
	animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
}
.HoverCardContent[__data-side="top"__] {
	animation-name: slideUp;
}
.HoverCardContent[__data-side="bottom"__] {
	animation-name: slideDown;
}

@keyframes slideUp {
	from {
		opacity: 0;
		transform: translateY(10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

@keyframes slideDown {
	from {
		opacity: 0;
		transform: translateY(-10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}
```

## Accessibility

The hover card is intended for sighted users only, the content will be inaccessible to keyboard users.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Tab"],
			description: "Opens/closes the hover card.",
		},
		{
			keys: ["Enter"],
			description: "Opens the hover card link",
		},
	]}
/>

introduction.mdx
---
metaTitle: Introduction
metaDescription: An open-source UI component library for building high-quality, accessible design systems and web apps.
---

# Introduction

<Description>
	An open-source UI component library for building high-quality, accessible
	design systems and web apps.
</Description>

Radix Primitives is a low-level UI component library with a focus on accessibility, customization and developer experience. You can use these components either as the base layer of your design system, or adopt them incrementally.

## Vision

Most of us share similar definitions for common UI patterns like accordion, checkbox,
combobox, dialog, dropdown, select, slider, and tooltip. These UI patterns are [documented by WAI-ARIA](https://www.w3.org/TR/wai-aria-practices/#aria_ex) and generally understood by the community.

However, the implementations provided to us by the web platform are inadequate. They're
either non-existent, lacking in functionality, or cannot be customized sufficiently.

So, developers are forced to build custom components; an incredibly difficult task. As a
result, most components on the web are inaccessible, non-performant, and lacking important
features.

Our goal is to create a well-funded, open-source component library that the community can
use to build accessible design systems.

## Key Features

### Accessible

Components adhere to the [WAI-ARIA design patterns](https://www.w3.org/TR/wai-aria-practices-1.2) where possible. We handle many of the difficult implementation details related to accessibility, including aria and role attributes, focus management, and keyboard navigation. Learn more in our [accessibility](./accessibility) overview.

### Unstyled

Components ship without styles, giving you complete control over the look and feel. Components can be styled with any styling solution. Learn more in our [styling](../guides/styling) guide.

### Opened

Radix Primitives are designed to be customized to suit your needs. Our open component architecture provides you granular access to each component part, so you can wrap them and add your own event listeners, props, or refs.

### Uncontrolled

Where applicable, components are uncontrolled by default but can also be controlled, alternatively. All of the behavior wiring is handled internally, so you can get up and running as smoothly as possible, without needing to create any local states.

### Developer experience

One of our main goals is to provide the best possible developer experience. Radix Primitives provides a fully-typed API. All components share a similar API, creating a consistent and predictable experience. We've also implemented an `asChild` prop, giving users full control over the rendered element.

### Incremental adoption

We recommend installing the `radix-ui` package and importing the primitives you need. This is the simplest way to get started, prevent version conflicts or duplication, and makes it easy to manage updates. The package is tree-shakeable, so you should only ship the components you use.

```bash
npm install radix-ui
```

```tsx
import { Dialog, DropdownMenu, Tooltip } from "radix-ui";
```

Alternatively, each primitive can be installed individually:

```bash
npm install @radix-ui/react-dialog
npm install @radix-ui/react-dropdown-menu
npm install @radix-ui/react-tooltip
```

```tsx
import * as Dialog from "@radix-ui/react-dialog";
import * as DropdownMenu from "@radix-ui/react-dropdown-menu";
import * as Tooltip from "@radix-ui/react-tooltip";
```

When installing separately, we recommend updating all Radix packages together to prevent duplication of shared dependencies and keep your bundle size down.

## Community

To get involved with the Radix community, ask questions and share tips, [Join our Discord](https://discord.com/invite/7Xb99uG).

To receive updates on new primitives, announcements, blog posts, and general Radix tips, follow along on [Bluesky](https://bsky.app/profile/radix-ui.com) or [Twitter](https://twitter.com/radix_ui).

To file issues, request features, and contribute, check out our GitHub.

- [GitHub repo](https://github.com/radix-ui/primitives)
- [Code of conduct](https://github.com/radix-ui/primitives/blob/main/CODE_OF_CONDUCT.md)

label.mdx
---
metaTitle: Label
metaDescription: Renders an accessible label associated with controls.
name: label
---

# Label

<Description>Renders an accessible label associated with controls.</Description>

<HeroContainer>
	<LabelDemo />
</HeroContainer>

<HeroCodeBlock folder="Label" />

<Highlights
	features={[
		"Text selection is prevented when double clicking label.",
		"Supports nested controls.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-label
```

## Anatomy

Import the component.

```jsx
import { Label } from "radix-ui";

export default () => <Label.Root />;
```

## API Reference

### Root

Contains the content for the label.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "htmlFor",
			type: "string",
			description: "The id of the element the label is associated with.",
		},
	]}
/>

## Accessibility

This component is based on the native `label` element, it will automatically apply the correct labelling when wrapping controls or using the `htmlFor` attribute. For your own custom controls to work correctly, ensure they use native elements such as `button` or `input` as a base.

menubar.mdx
---
metaTitle: Menubar
metaDescription:
  A visually persistent menu common in desktop applications that provides quick
  access to a consistent set of commands.
name: menubar
aria: https://www.w3.org/WAI/ARIA/apg/patterns/menu/
---

# Menu Bar

<Description>
	A visually persistent menu common in desktop applications that provides quick
	access to a consistent set of commands.
</Description>

<HeroContainer>
	<MenubarDemo />
</HeroContainer>

<HeroCodeBlock folder="Menubar" />

<Highlights
	features={[
		"Can be controlled or uncontrolled.",
		"Supports submenus with configurable reading direction.",
		"Supports items, labels, groups of items.",
		"Supports checkable items (single or multiple).",
		"Customize side, alignment, offsets, collision handling.",
		"Optionally render a pointing arrow.",
		"Focus is fully managed.",
		"Full keyboard navigation.",
		"Typeahead support.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-menubar
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Menubar } from "radix-ui";

export default () => (
	<Menubar.Root>
		<Menubar.Menu>
			<Menubar.Trigger />
			<Menubar.Portal>
				<Menubar.Content>
					<Menubar.Label />
					<Menubar.Item />

					<Menubar.Group>
						<Menubar.Item />
					</Menubar.Group>

					<Menubar.CheckboxItem>
						<Menubar.ItemIndicator />
					</Menubar.CheckboxItem>

					<Menubar.RadioGroup>
						<Menubar.RadioItem>
							<Menubar.ItemIndicator />
						</Menubar.RadioItem>
					</Menubar.RadioGroup>

					<Menubar.Sub>
						<Menubar.SubTrigger />
						<Menubar.Portal>
							<Menubar.SubContent />
						</Menubar.Portal>
					</Menubar.Sub>

					<Menubar.Separator />
					<Menubar.Arrow />
				</Menubar.Content>
			</Menubar.Portal>
		</Menubar.Menu>
	</Menubar.Root>
);
```

## API Reference

### Root

Contains all the parts of a menubar.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "defaultValue",
			required: false,
			type: "string",
			description: (
				<span>
					The value of the menu that should be open when initially rendered. Use
					when you do not need to control the value state.
				</span>
			),
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					The controlled value of the menu to open. Should be used in
					conjunction with <Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction. If omitted, inherits globally from{" "}
					<Code>DirectionProvider</Code> or assumes LTR (left-to-right) reading
					mode.
				</span>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last item
					to first, and vice versa.
				</span>
			),
		},
	]}
/>

### Menu

A top level menu item, contains a trigger with content combination.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					A unique value that associates the item with an active value when the
					navigation menu is controlled. This prop is managed automatically when
					uncontrolled.
				</span>
			),
		},
	]}
/>

### Trigger

The button that toggles the content. By default, the `Menubar.Content` will position itself against the trigger.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Portal

When used, portals the content part into the `body`.

<PropsTable
	data={[
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. If used on this
					part, it will be inherited by <Code>Menubar.Content</Code> and{" "}
					<Code>Menubar.SubContent</Code> respectively.
				</span>
			),
		},
		{
			name: "container",
			type: "HTMLElement",
			default: "document.body",
			description: "Specify a container element to portal the content into.",
		},
	]}
/>

### Content

The component that pops out when a menu is open.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last item
					to first, and vice versa.
				</span>
			),
		},
		{
			name: "onCloseAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves to the trigger after closing. It
					can be prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onFocusOutside",
			type: "(event: FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves outside the bounds of the
					component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onInteractOutside",
			type: "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when an interaction (pointer or focus event)
					happens outside the bounds of the component. It can be prevented by
					calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>Menubar.Portal</Code>.
				</span>
			),
		},
		{
			name: "side",
			type: '"top" | "right" | "bottom" | "left"',
			typeSimple: "enum",
			default: '"bottom"',
			description: (
				<span>
					The preferred side of the trigger to render against when open. Will be
					reversed when collisions occur and <Code>avoidCollisions</Code> is
					enabled.
				</span>
			),
		},
		{
			name: "sideOffset",
			type: "number",
			default: "0",
			description: <span>The distance in pixels from the trigger.</span>,
		},
		{
			name: "align",
			type: '"start" | "center" | "end"',
			typeSimple: "enum",
			default: '"center"',
			description: (
				<span>
					The preferred alignment against the trigger. May change when
					collisions occur.
				</span>
			),
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					An offset in pixels from the <Code>"start"</Code> or{" "}
					<Code>"end"</Code> alignment options.
				</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "0",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>.
				</span>
			),
		},
		{
			name: "arrowPadding",
			type: "number",
			default: "0",
			description: (
				<span>
					The padding between the arrow and the edges of the content. If your
					content has <Code>border-radius</Code>, this will prevent it from
					overflowing the corners.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-menubar-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets
				</>
			),
		},
		{
			cssVariable: "--radix-menubar-content-available-width",
			description: (
				<>The remaining width between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-menubar-content-available-height",
			description: (
				<>The remaining height between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-menubar-trigger-width",
			description: <>The width of the trigger</>,
		},
		{
			cssVariable: "--radix-menubar-trigger-height",
			description: <>The height of the trigger</>,
		},
	]}
/>

### Arrow

An optional arrow element to render alongside a menubar menu. This can be used to help visually link the trigger with the `Menubar.Content`. Must be rendered inside `Menubar.Content`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "width",
			type: "number",
			default: 10,
			description: <span>The width of the arrow in pixels.</span>,
		},
		{
			name: "height",
			type: "number",
			default: 5,
			description: <span>The height of the arrow in pixels.</span>,
		},
	]}
/>

### Item

The component that contains the menubar items.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects an item (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the menubar from closing when selecting that item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Group

Used to group multiple `Menubar.Item`s.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Label

Used to render a label. It won't be focusable using arrow keys.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### CheckboxItem

An item that can be controlled and rendered like a checkbox.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "checked",
			type: `boolean | 'indeterminate'`,
			description: (
				<span>
					The controlled checked state of the item. Must be used in conjunction
					with <Code>onCheckedChange</Code>.
				</span>
			),
		},
		{
			name: "onCheckedChange",
			type: "(checked: boolean) => void",
			typeSimple: "function",
			description: (
				<span>Event handler called when the checked state changes.</span>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects an item (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the menubar from closing when selecting that item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### RadioGroup

Used to group multiple `Menubar.RadioItem`s.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			type: "string",
			description: "The value of the selected item in the group.",
		},
		{
			name: "onValueChange",
			type: "(value: string) => void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
	]}
/>

### RadioItem

An item that can be controlled and rendered like a radio.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			type: "string",
			required: true,
			description: "The unique value of the item.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects an item (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the menubar from closing when selecting that item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### ItemIndicator

Renders when the parent `Menubar.CheckboxItem` or `Menubar.RadioItem` is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked"],
		},
	]}
/>

### Separator

Used to visually separate items in a menubar menu.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Sub

Contains all the parts of a submenu.

<PropsTable
	data={[
		{
			name: "defaultOpen",
			type: "boolean",
			description: (
				<span>
					The open state of the submenu when it is initially rendered. Use when
					you do not need to control its open state.
				</span>
			),
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the submenu. Must be used in conjunction
					with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the open state of the submenu changes.
				</span>
			),
		},
	]}
/>

### SubTrigger

An item that opens a submenu. Must be rendered inside `Menubar.Sub`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the item. Use this
					when the content is complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### SubContent

The component that pops out when a submenu is open. Must be rendered inside `Menubar.Sub`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last item
					to first, and vice versa.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onFocusOutside",
			type: "(event: FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves outside the bounds of the
					component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onInteractOutside",
			type: "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when an interaction (pointer or focus event)
					happens outside the bounds of the component. It can be prevented by
					calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>Menubar.Portal</Code>.
				</span>
			),
		},
		{
			name: "sideOffset",
			type: "number",
			default: "0",
			description: <span>The distance in pixels from the trigger.</span>,
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					An offset in pixels from the <Code>"start"</Code> or{" "}
					<Code>"end"</Code> alignment options.
				</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "0",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>.
				</span>
			),
		},
		{
			name: "arrowPadding",
			type: "number",
			default: "0",
			description: (
				<span>
					The padding between the arrow and the edges of the content. If your
					content has <Code>border-radius</Code>, this will prevent it from
					overflowing the corners.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-menubar-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets
				</>
			),
		},
		{
			cssVariable: "--radix-menubar-content-available-width",
			description: (
				<>The remaining width between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-menubar-content-available-height",
			description: (
				<>The remaining height between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-menubar-trigger-width",
			description: <>The width of the trigger</>,
		},
		{
			cssVariable: "--radix-menubar-trigger-height",
			description: <>The height of the trigger</>,
		},
	]}
/>

## Examples

### With submenus

You can create submenus by using `Menubar.Sub` in combination with its parts.

```jsx line=9-18
<Menubar.Root>
	<Menubar.Menu>
		<Menubar.Trigger>…</Menubar.Trigger>
		<Menubar.Portal>
			<Menubar.Content>
				<Menubar.Item>…</Menubar.Item>
				<Menubar.Item>…</Menubar.Item>
				<Menubar.Separator />
				<Menubar.Sub>
					<Menubar.SubTrigger>Sub menu →</Menubar.SubTrigger>
					<Menubar.Portal>
						<Menubar.SubContent>
							<Menubar.Item>Sub menu item</Menubar.Item>
							<Menubar.Item>Sub menu item</Menubar.Item>
							<Menubar.Arrow />
						</Menubar.SubContent>
					</Menubar.Portal>
				</Menubar.Sub>
				<Menubar.Separator />
				<Menubar.Item>…</Menubar.Item>
			</Menubar.Content>
		</Menubar.Portal>
	</Menubar.Menu>
</Menubar.Root>
```

### With disabled items

You can add special styles to disabled items via the `data-disabled` attribute.

```jsx line=11
// index.jsx
import { Menubar } from "radix-ui";
import "./styles.css";

export default () => (
	<Menubar.Root>
		<Menubar.Menu>
			<Menubar.Trigger>…</Menubar.Trigger>
			<Menubar.Portal>
				<Menubar.Content>
					<Menubar.Item __className__="MenubarItem" __disabled__>
						…
					</Menubar.Item>
					<Menubar.Item className="MenubarItem">…</Menubar.Item>
				</Menubar.Content>
			</Menubar.Portal>
		</Menubar.Menu>
	</Menubar.Root>
);
```

```css line=2
/* styles.css */
.MenubarItem[__data-disabled__] {
	color: gainsboro;
}
```

### With separators

Use the `Separator` part to add a separator between items.

```jsx line=7,9
<Menubar.Root>
	<Menubar.Menu>
		<Menubar.Trigger>…</Menubar.Trigger>
		<Menubar.Portal>
			<Menubar.Content>
				<Menubar.Item>…</Menubar.Item>
				<Menubar.Separator />
				<Menubar.Item>…</Menubar.Item>
				<Menubar.Separator />
				<Menubar.Item>…</Menubar.Item>
			</Menubar.Content>
		</Menubar.Portal>
	</Menubar.Menu>
</Menubar.Root>
```

### With labels

Use the `Label` part to help label a section.

```jsx line=6
<Menubar.Root>
	<Menubar.Menu>
		<Menubar.Trigger>…</Menubar.Trigger>
		<Menubar.Portal>
			<Menubar.Content>
				<Menubar.Label>Label</Menubar.Label>
				<Menubar.Item>…</Menubar.Item>
				<Menubar.Item>…</Menubar.Item>
				<Menubar.Item>…</Menubar.Item>
			</Menubar.Content>
		</Menubar.Portal>
	</Menubar.Menu>
</Menubar.Root>
```

### With checkbox items

Use the `CheckboxItem` part to add an item that can be checked.

```jsx line=6,17-22
import * as React from "react";
import { CheckIcon } from "@radix-ui/react-icons";
import { Menubar } from "radix-ui";

export default () => {
	const [checked, setChecked] = React.useState(true);

	return (
		<Menubar.Root>
			<Menubar.Menu>
				<Menubar.Trigger>…</Menubar.Trigger>
				<Menubar.Portal>
					<Menubar.Content>
						<Menubar.Item>…</Menubar.Item>
						<Menubar.Item>…</Menubar.Item>
						<Menubar.Separator />
						<Menubar.CheckboxItem
							checked={checked}
							onCheckedChange={setChecked}
						>
							<Menubar.ItemIndicator>
								<CheckIcon />
							</Menubar.ItemIndicator>
							Checkbox item
						</Menubar.CheckboxItem>
					</Menubar.Content>
				</Menubar.Portal>
			</Menubar.Menu>
		</Menubar.Root>
	);
};
```

### With radio items

Use the `RadioGroup` and `RadioItem` parts to add an item that can be checked amongst others.

```jsx line=6,14-27
import * as React from "react";
import { CheckIcon } from "@radix-ui/react-icons";
import { Menubar } from "radix-ui";

export default () => {
	const [color, setColor] = React.useState("blue");

	return (
		<Menubar.Root>
			<Menubar.Menu>
				<Menubar.Trigger>…</Menubar.Trigger>
				<Menubar.Portal>
					<Menubar.Content>
						<Menubar.RadioGroup value={color} onValueChange={setColor}>
							<Menubar.RadioItem value="red">
								<Menubar.ItemIndicator>
									<CheckIcon />
								</Menubar.ItemIndicator>
								Red
							</Menubar.RadioItem>
							<Menubar.RadioItem value="blue">
								<Menubar.ItemIndicator>
									<CheckIcon />
								</Menubar.ItemIndicator>
								Blue
							</Menubar.RadioItem>
						</Menubar.RadioGroup>
					</Menubar.Content>
				</Menubar.Portal>
			</Menubar.Menu>
		</Menubar.Root>
	);
};
```

### With complex items

You can add extra decorative elements in the `Item` parts, such as images.

```jsx line=10,14
import { Menubar } from "radix-ui";

export default () => (
	<Menubar.Root>
		<Menubar.Menu>
			<Menubar.Trigger>…</Menubar.Trigger>
			<Menubar.Portal>
				<Menubar.Content>
					<Menubar.Item>
						<img src="…" />
						Adolfo Hess
					</Menubar.Item>
					<Menubar.Item>
						<img src="…" />
						Miyah Myles
					</Menubar.Item>
				</Menubar.Content>
			</Menubar.Portal>
		</Menubar.Menu>
	</Menubar.Root>
);
```

### Constrain the content/sub-content size

You may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.

We expose several CSS custom properties such as `--radix-menubar-trigger-width` and `--radix-menubar-content-available-height` to support this. Use them to constrain the content dimensions.

```jsx line=9
// index.jsx
import { Menubar } from "radix-ui";
import "./styles.css";

export default () => (
	<Menubar.Root>
		<Menubar.Trigger>…</Menubar.Trigger>
		<Menubar.Portal>
			<Menubar.Content __className__="MenubarContent" sideOffset={5}>
				…
			</Menubar.Content>
		</Menubar.Portal>
	</Menubar.Root>
);
```

```css
/* styles.css */
.MenubarContent {
	width: var(__--radix-menubar-trigger-width__);
	max-height: var(__--radix-menubar-content-available-height__);
}
```

### Origin-aware animations

We expose a CSS custom property `--radix-menubar-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.

```jsx line=10
// index.jsx
import { Menubar } from "radix-ui";
import "./styles.css";

export default () => (
	<Menubar.Root>
		<Menubar.Menu>
			<Menubar.Trigger>…</Menubar.Trigger>
			<Menubar.Portal>
				<Menubar.Content __className__="MenubarContent">…</Menubar.Content>
			</Menubar.Portal>
		</Menubar.Menu>
	</Menubar.Root>
);
```

```css line=3
/* styles.css */
.MenubarContent {
	transform-origin: var(__--radix-menubar-content-transform-origin__);
	animation: scaleIn 0.5s ease-out;
}

@keyframes scaleIn {
	from {
		opacity: 0;
		transform: scale(0);
	}
	to {
		opacity: 1;
		transform: scale(1);
	}
}
```

### Collision-aware animations

We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.

```jsx line=10
// index.jsx
import { Menubar } from "radix-ui";
import "./styles.css";

export default () => (
	<Menubar.Root>
		<Menubar.Menu>
			<Menubar.Trigger>…</Menubar.Trigger>
			<Menubar.Portal>
				<Menubar.Content __className__="MenubarContent">…</Menubar.Content>
			</Menubar.Portal>
		</Menubar.Menu>
	</Menubar.Root>
);
```

```css line=6-11
/* styles.css */
.MenubarContent {
	animation-duration: 0.6s;
	animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
}
.MenubarContent[__data-side="top"__] {
	animation-name: slideUp;
}
.MenubarContent[__data-side="bottom"__] {
	animation-name: slideDown;
}

@keyframes slideUp {
	from {
		opacity: 0;
		transform: translateY(10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

@keyframes slideDown {
	from {
		opacity: 0;
		transform: translateY(-10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}
```

## Accessibility

Adheres to the [Menu Button WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/) and uses [roving tabindex](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex) to manage focus movement among menu items.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: (
				<span>
					When focus is on <Code>Menubar.Trigger</Code>, opens the menubar and
					focuses the first item.
					<br />
					When focus is on an item, activates the focused item.
				</span>
			),
		},
		{
			keys: ["Enter"],
			description: (
				<span>
					When focus is on <Code>Menubar.Trigger</Code>, opens the associated
					menu.
					<br />
					When focus is on an item, activates the focused item.
				</span>
			),
		},
		{
			keys: ["ArrowDown"],
			description: (
				<span>
					When focus is on <Code>Menubar.Trigger</Code>, opens the associated
					menu.
					<br />
					When focus is on an item, moves focus to the next item.
				</span>
			),
		},
		{
			keys: ["ArrowUp"],
			description: (
				<span>When focus is on an item, moves focus to the previous item.</span>
			),
		},
		{
			keys: ["ArrowRight", "ArrowLeft"],
			description: (
				<span>
					When focus is on a <Code>Menubar.Trigger</Code>, moves focus to the
					next or previous item. <br />
					When focus is on a <Code>Menubar.SubTrigger</Code>, opens or closes
					the submenu depending on reading direction. <br />
					When focus is within a <Code>Menubar.Content</Code>, opens the next
					menu in the menubar.
				</span>
			),
		},
		{
			keys: ["Esc"],
			description: (
				<span>
					Closes the currently open menu and moves focus to its{" "}
					<Code>Menubar.Trigger</Code>.
				</span>
			),
		},
	]}
/>

navigation-menu.mdx
---
metaTitle: Navigation Menu
metaDescription: A collection of links for navigating websites.
name: navigation-menu
aria: https://www.w3.org/TR/wai-aria/#navigation
---

# Navigation Menu

<Description>A collection of links for navigating websites.</Description>

<HeroContainer>
	<NavigationMenuDemo />
</HeroContainer>

<HeroCodeBlock folder="NavigationMenu" />

<Highlights
	features={[
		"Can be controlled or uncontrolled.",
		"Flexible layout structure with managed tab focus.",
		"Supports submenus.",
		"Optional active item indicator.",
		"Full keyboard navigation.",
		"Exposes CSS variables for advanced animation.",
		"Supports custom timings.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-navigation-menu
```

## Anatomy

Import all parts and piece them together.

```jsx
import { NavigationMenu } from "radix-ui";

export default () => (
	<NavigationMenu.Root>
		<NavigationMenu.List>
			<NavigationMenu.Item>
				<NavigationMenu.Trigger />
				<NavigationMenu.Content>
					<NavigationMenu.Link />
				</NavigationMenu.Content>
			</NavigationMenu.Item>

			<NavigationMenu.Item>
				<NavigationMenu.Link />
			</NavigationMenu.Item>

			<NavigationMenu.Item>
				<NavigationMenu.Trigger />
				<NavigationMenu.Content>
					<NavigationMenu.Sub>
						<NavigationMenu.List />
						<NavigationMenu.Viewport />
					</NavigationMenu.Sub>
				</NavigationMenu.Content>
			</NavigationMenu.Item>

			<NavigationMenu.Indicator />
		</NavigationMenu.List>

		<NavigationMenu.Viewport />
	</NavigationMenu.Root>
);
```

## API Reference

### Root

Contains all the parts of a navigation menu.

<PropsTable
	data={[
		{
			name: "defaultValue",
			required: false,
			type: "string",
			description:
				"The value of the menu item that should be active when initially rendered. Use when you do not need to control the value state.",
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					The controlled value of the menu item to activate. Should be used in
					conjunction with <Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
		{
			name: "delayDuration",
			type: "number",
			default: 200,
			description:
				"The duration from when the mouse enters a trigger until the content opens.",
		},
		{
			name: "skipDelayDuration",
			type: "number",
			default: 300,
			description:
				"How much time a user has to enter another trigger without incurring a delay again.",
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of the menu when applicable. If omitted,
					inherits globally from <Code>DirectionProvider</Code> or assumes LTR
					(left-to-right) reading mode.
				</span>
			),
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical"',
			typeSimple: "enum",
			default: '"horizontal"',
			description: "The orientation of the menu.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Sub

Signifies a submenu. Use it in place of the root part when nested to create a submenu.

<PropsTable
	data={[
		{
			name: "defaultValue",
			required: false,
			type: "string",
			description:
				"The value of the menu item that should be active when initially rendered. Use when you do not need to control the value state.",
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					The controlled value of the sub menu item to activate. Should be used
					in conjunction with <Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical"',
			typeSimple: "enum",
			default: '"horizontal"',
			description: "The orientation of the menu.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### List

Contains the top level menu items.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Item

A top level menu item, contains a link or trigger with content combination.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					A unique value that associates the item with an active value when the
					navigation menu is controlled. This prop is managed automatically when
					uncontrolled.
				</span>
			),
		},
	]}
/>

### Trigger

The button that toggles the content.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Content

Contains the content associated with each trigger.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onFocusOutside",
			type: "(event: FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves outside the bounds of the
					component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onInteractOutside",
			type: "(event: React.FocusEvent | MouseEvent | TouchEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when an interaction (pointer or focus event)
					happens outside the bounds of the component. It can be prevented by
					calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-motion]",
			values: ["to-start", "to-end", "from-start", "from-end"],
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Link

A navigational link.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "active",
			required: false,
			type: "boolean",
			default: "false",
			description: "Used to identify the link as the currently active page.",
		},
		{
			name: "onSelect",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the user selects a link (via mouse or
					keyboard). Calling <Code>event.preventDefault</Code> in this handler
					will prevent the navigation menu from closing when selecting that
					link.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-active]",
			values: "Present when active",
		},
	]}
/>

### Indicator

An optional indicator element that renders below the list, is used to highlight the currently active trigger.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["visible", "hidden"],
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Viewport

An optional viewport element that is used to render active content outside of the list.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-navigation-menu-viewport-width",
			description:
				"The width of the viewport when visible/hidden, computed from the active content",
		},
		{
			cssVariable: "--radix-navigation-menu-viewport-height",
			description:
				"The height of the viewport when visible/hidden, computed from the active content",
		},
	]}
/>

## Examples

### Vertical

You can create a vertical menu by using the `orientation` prop.

```jsx line=1
<NavigationMenu.Root __orientation__="vertical">
	<NavigationMenu.List>
		<NavigationMenu.Item>
			<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>
			<NavigationMenu.Content>Item one content</NavigationMenu.Content>
		</NavigationMenu.Item>
		<NavigationMenu.Item>
			<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>
			<NavigationMenu.Content>Item Two content</NavigationMenu.Content>
		</NavigationMenu.Item>
	</NavigationMenu.List>
</NavigationMenu.Root>
```

### Flexible layouts

Use the `Viewport` part when you need extra control over where `Content` is rendered. This can be helpful when your design
requires an adjusted DOM structure or if you need flexibility to achieve [advanced animation](/primitives/docs/components/navigation-menu#advanced-animation).
Tab focus will be maintained automatically.

```jsx line=14
<NavigationMenu.Root>
	<NavigationMenu.List>
		<NavigationMenu.Item>
			<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>
			<NavigationMenu.Content>Item one content</NavigationMenu.Content>
		</NavigationMenu.Item>
		<NavigationMenu.Item>
			<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>
			<NavigationMenu.Content>Item two content</NavigationMenu.Content>
		</NavigationMenu.Item>
	</NavigationMenu.List>

	{/* NavigationMenu.Content will be rendered here when active */}
	<NavigationMenu.Viewport />
</NavigationMenu.Root>
```

### With indicator

You can use the optional `Indicator` part to highlight the currently active `Trigger`, this is useful when you want to provide
an animated visual cue such as an arrow or highlight to accompany the `Viewport`.

```jsx line=17
// index.jsx
import { NavigationMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<NavigationMenu.Root>
		<NavigationMenu.List>
			<NavigationMenu.Item>
				<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>
				<NavigationMenu.Content>Item one content</NavigationMenu.Content>
			</NavigationMenu.Item>
			<NavigationMenu.Item>
				<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>
				<NavigationMenu.Content>Item two content</NavigationMenu.Content>
			</NavigationMenu.Item>

			<NavigationMenu.Indicator __className__="NavigationMenuIndicator" />
		</NavigationMenu.List>

		<NavigationMenu.Viewport />
	</NavigationMenu.Root>
);
```

```css
/* styles.css */
.NavigationMenuIndicator {
	background-color: grey;
}
.NavigationMenuIndicator[data-orientation="horizontal"] {
	height: 3px;
	transition:
		width,
		transform,
		250ms ease;
}
```

### With submenus

Create a submenu by nesting your `NavigationMenu` and using the `Sub` part in place of its `Root`.
Submenus work differently to `Root` navigation menus and are similar to [`Tabs`](/primitives/docs/components/tabs) in that one item should always be active, so be
sure to assign and set a `defaultValue`.

```jsx line=10,25
<NavigationMenu.Root>
	<NavigationMenu.List>
		<NavigationMenu.Item>
			<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>
			<NavigationMenu.Content>Item one content</NavigationMenu.Content>
		</NavigationMenu.Item>
		<NavigationMenu.Item>
			<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>
			<NavigationMenu.Content>
				<NavigationMenu.__Sub__ __defaultValue__="sub1">
					<NavigationMenu.List>
						<NavigationMenu.Item value="sub1">
							<NavigationMenu.Trigger>Sub item one</NavigationMenu.Trigger>
							<NavigationMenu.Content>
								Sub item one content
							</NavigationMenu.Content>
						</NavigationMenu.Item>
						<NavigationMenu.Item value="sub2">
							<NavigationMenu.Trigger>Sub item two</NavigationMenu.Trigger>
							<NavigationMenu.Content>
								Sub item two content
							</NavigationMenu.Content>
						</NavigationMenu.Item>
					</NavigationMenu.List>
				</NavigationMenu.__Sub__>
			</NavigationMenu.Content>
		</NavigationMenu.Item>
	</NavigationMenu.List>
</NavigationMenu.Root>
```

### With client side routing

If you need to use the `Link` component provided by your routing package then we recommend composing with `NavigationMenu.Link` via a custom component.
This will ensure accessibility and consistent keyboard control is maintained. Here's an example using Next.js:

```jsx line=7-16,22,25
// index.jsx
import { usePathname } from "next/navigation";
import NextLink from "next/link";
import { NavigationMenu } from "radix-ui";
import "./styles.css";

const Link = ({ href, ...props }) => {
	const pathname = usePathname();
	const isActive = href === pathname;

	return (
		<NavigationMenu.Link asChild active={isActive}>
			<NextLink href={href} className="NavigationMenuLink" {...props} />
		</NavigationMenu.Link>
	);
};

export default () => (
	<NavigationMenu.Root>
		<NavigationMenu.List>
			<NavigationMenu.Item>
				<Link href="/">Home</Link>
			</NavigationMenu.Item>
			<NavigationMenu.Item>
				<Link href="/about">About</Link>
			</NavigationMenu.Item>
		</NavigationMenu.List>
	</NavigationMenu.Root>
);
```

```css
/* styles.css */
.NavigationMenuLink {
	text-decoration: none;
}
.NavigationMenuLink[data-active] {
	text-decoration: "underline";
}
```

### Advanced animation

We expose `--radix-navigation-menu-viewport-[width|height]` and `data-motion['from-start'|'to-start'|'from-end'|'to-end']` attributes
to allow you to animate `Viewport` size and `Content` position based on the enter/exit direction.

Combining these with `position: absolute;` allows you to create smooth overlapping animation effects when moving between items.

```jsx line=10-12,16-18,22
// index.jsx
import { NavigationMenu } from "radix-ui";
import "./styles.css";

export default () => (
	<NavigationMenu.Root>
		<NavigationMenu.List>
			<NavigationMenu.Item>
				<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>
				<NavigationMenu.Content __className__="NavigationMenuContent">
					Item one content
				</NavigationMenu.Content>
			</NavigationMenu.Item>
			<NavigationMenu.Item>
				<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>
				<NavigationMenu.Content __className__="NavigationMenuContent">
					Item two content
				</NavigationMenu.Content>
			</NavigationMenu.Item>
		</NavigationMenu.List>

		<NavigationMenu.Viewport __className__="NavigationMenuViewport" />
	</NavigationMenu.Root>
);
```

```css line=9-20,24,25
/* styles.css */
.NavigationMenuContent {
	position: absolute;
	top: 0;
	left: 0;
	animation-duration: 250ms;
	animation-timing-function: ease;
}
.NavigationMenuContent[__data-motion__="from-start"] {
	animation-name: enterFromLeft;
}
.NavigationMenuContent[__data-motion__="from-end"] {
	animation-name: enterFromRight;
}
.NavigationMenuContent[__data-motion__="to-start"] {
	animation-name: exitToLeft;
}
.NavigationMenuContent[__data-motion__="to-end"] {
	animation-name: exitToRight;
}

.NavigationMenuViewport {
	position: relative;
	width: var(__--radix-navigation-menu-viewport-width__);
	height: var(__--radix-navigation-menu-viewport-height__);
	transition:
		width,
		height,
		250ms ease;
}

@keyframes enterFromRight {
	from {
		opacity: 0;
		transform: translateX(200px);
	}
	to {
		opacity: 1;
		transform: translateX(0);
	}
}

@keyframes enterFromLeft {
	from {
		opacity: 0;
		transform: translateX(-200px);
	}
	to {
		opacity: 1;
		transform: translateX(0);
	}
}

@keyframes exitToRight {
	from {
		opacity: 1;
		transform: translateX(0);
	}
	to {
		opacity: 0;
		transform: translateX(200px);
	}
}

@keyframes exitToLeft {
	from {
		opacity: 1;
		transform: translateX(0);
	}
	to {
		opacity: 0;
		transform: translateX(-200px);
	}
}
```

## Accessibility

Adheres to the [`navigation` role requirements](https://www.w3.org/TR/wai-aria-1.2/#navigation).

### Differences to menubar

`NavigationMenu` should not be confused with `menubar`, although this primitive shares the name `menu` in the colloquial sense to refer to a set of navigation links, it does not use the WAI-ARIA `menu` role.
This is because `menu` and `menubars` behave like native operating system menus most commonly found in desktop application windows, as such they feature complex functionality like composite focus management and first-character navigation.

These features are often considered [unnecessary for website navigation](https://github.com/w3c/aria-practices/issues/353) and at worst can confuse users who are familiar with established website patterns.

See the W3C [Disclosure Navigation Menu](https://w3c.github.io/aria-practices/examples/disclosure/disclosure-navigation.html) example for more information.

### Link usage and aria-current

It's important to use `NavigationMenu.Link` for all navigational links within a menu, this not only applies to the main list
but also within any content rendered via `NavigationMenu.Content`. This will ensure consistent keyboard interactions and accessibility
while also giving access to the `active` prop for setting `aria-current` and the active styles.
See [this example](/primitives/docs/components/navigation-menu#with-client-side-routing) for more information on usage with third party routing components.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space", "Enter"],
			description: (
				<span>
					When focus is on <Code>NavigationMenu.Trigger</Code>, opens the
					content.
				</span>
			),
		},
		{
			keys: ["Tab"],
			description: "Moves focus to the next focusable element.",
		},
		{
			keys: ["ArrowDown"],
			description: (
				<span>
					When <Code>horizontal</Code> and focus is on an open{" "}
					<Code>NavigationMenu.Trigger</Code>, moves focus into{" "}
					<Code>NavigationMenu.Content</Code>.
					<br />
					Moves focus to the next <Code>NavigationMenu.Trigger</Code> or{" "}
					<Code>NavigationMenu.Link</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowUp"],
			description: (
				<span>
					Moves focus to the previous <Code>NavigationMenu.Trigger</Code> or{" "}
					<Code>NavigationMenu.Link</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowRight", "ArrowLeft"],
			description: (
				<span>
					When <Code>vertical</Code> and focus is on an open{" "}
					<Code>NavigationMenu.Trigger</Code>, moves focus into its{" "}
					<Code>NavigationMenu.Content</Code>.
					<br />
					Moves focus to the next / previous <Code>
						NavigationMenu.Trigger
					</Code>{" "}
					or <Code>NavigationMenu.Link</Code>.
				</span>
			),
		},
		{
			keys: ["Home", "End"],
			description: (
				<span>
					Moves focus to the first/last <Code>NavigationMenu.Trigger</Code> or{" "}
					<Code>NavigationMenu.Link</Code>.
				</span>
			),
		},
		{
			keys: ["Esc"],
			description: (
				<span>
					Closes open <Code>NavigationMenu.Content</Code> and moves focus to its{" "}
					<Code>NavigationMenu.Trigger</Code>.
				</span>
			),
		},
	]}
/>

one-time-password-field.mdx
---
metaTitle: One-Time Password Field
metaDescription: A group of single-character text inputs to handle one-time password verification
name: one-time-password-field
---

# One-Time Password Field

<Description>
	A group of single-character text inputs to handle one-time password
	verification.
</Description>

<HeroContainer>
	<OneTimePasswordFieldDemo />
</HeroContainer>

<HeroCodeBlock folder="OneTimePasswordField" />

<Highlights
	features={[
		"Keyboard navigation mimicking the behavior of a single input field",
		"Overriding values on paste",
		"Password manager autofill support",
		"Input validation for numeric and alphanumeric values",
		"Auto-submit on completion",
		"Hidden input to provide a single value to form data",
	]}
/>

## Anatomy

Import all parts and piece them together.

```jsx
import { unstable_OneTimePasswordField as OneTimePasswordField } from "radix-ui";

export default () => (
	<OneTimePasswordField.Root>
		{/* one Input for each character of the value */}
		<OneTimePasswordField.Input />
		{/* single HiddenInput to store the full value */}
		<OneTimePasswordField.HiddenInput />
	</OneTimePasswordField.Root>
);
```

## API Reference

### Root

Contains all the parts of a one-time password field.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "autoComplete",
			required: false,
			type: '"off" | "one-time-code"',
			typeSimple: "enum",
			default: "one-time-code",
			description: (
				<span>
					Specifies what—if any—permission the user agent has to provide
					automated assistance in filling out form field values, as well as
					guidance to the browser as to the type of information expected in the
					field.
				</span>
			),
		},
		{
			name: "autoFocus",
			required: false,
			type: "boolean",
			description: (
				<span>
					Whether or not the first fillable input should be focused on
					page-load.
				</span>
			),
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					The controlled value of the field. Must be used in conjunction with{" "}
					<Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "defaultValue",
			required: false,
			type: "string",
			description: (
				<span>
					The value of the field when initially rendered. Use when you do not
					need to control the state of the field.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: (
				<span>Event handler called when the value of the field changes.</span>
			),
		},
		{
			name: "autoSubmit",
			required: false,
			default: "false",
			type: "boolean",
			description: (
				<span>
					Whether the component should attempt to automatically submit when all
					fields are filled. If the field is associated with an HTML{" "}
					<Code>form</Code> element, the form's <Code>requestSubmit</Code>{" "}
					method will be called.
				</span>
			),
		},
		{
			name: "onAutoSubmit",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: (
				<span>
					When the <Code>autoSubmit</Code> prop is set to <Code>true</Code>,
					this callback will be fired before attempting to submit the associated
					form. It will be called whether or not a form is located, or if
					submission is not allowed. No-op when <Code>autoSubmit</Code> is set
					to <Code>false</Code>.
				</span>
			),
		},
		{
			name: "disabled",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>Whether or not the the field's input elements are disabled.</span>
			),
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			default: '"ltr"',
			description:
				"The reading direction of the field when applicable. If omitted, assumes LTR (left-to-right) reading mode.",
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical"',
			typeSimple: "enum",
			default: '"vertical"',
			description: "The vertical orientation of the input elements.",
		},
		{
			name: "form",
			required: false,
			type: "string",
			description: (
				<span>
					A string specifying the <Code>form</Code> element with which the input
					is associated. This string's value, if present, must match the ID of a{" "}
					<Code>form</Code> element in the same document.
				</span>
			),
		},
		{
			name: "name",
			required: false,
			type: "string",
			description:
				"A string specifying a name for the input control. This name is submitted along with the control's value when the form data is submitted.",
		},
		{
			name: "placeholder",
			required: false,
			type: "string",
			description:
				"Defines the text displayed in a form control when the control has no value. Split into single-character placeholders for each Input rendered.",
		},
		{
			name: "readOnly",
			required: false,
			type: "boolean",
			default: "false",
			description:
				"Whether or not the input elements can be updated by the user.",
		},
		{
			name: "sanitizeValue",
			required: false,
			type: "(value: string) => string",
			typeSimple: "function",
			description: (
				<span>
					Function for custom sanitization when <Code>validationType</Code> is
					set to <Code>"none"</Code>. This function will be called before
					updating values in response to user interactions.
				</span>
			),
		},
		{
			name: "type",
			required: false,
			type: '"text" | "password"',
			typeSimple: "enum",
			default: '"text"',
			description: "The input type of the field's input elements.",
		},
		{
			name: "validationType",
			required: false,
			type: '"none" | "numeric" | "alpha" | "alphanumeric"',
			typeSimple: "enum",
			default: '"numeric"',
			description: "Specifies the type of input validation to be used.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Input

Renders a text input representing a single character in the value.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-index]",
			values:
				"The index corresponding with the index of the character relative to the root field value",
		},
	]}
/>

### HiddenInput

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

## Examples

### Basic usage

```jsx
// This will render a field with 6 inputs, for use with
// 6-character passwords. Render an Input component for
// each character of accepted password's length.
<OneTimePasswordField.Root>
	<OneTimePasswordField.Input />
	<OneTimePasswordField.Input />
	<OneTimePasswordField.Input />
	<OneTimePasswordField.Input />
	<OneTimePasswordField.Input />
	<OneTimePasswordField.Input />
	<OneTimePasswordField.HiddenInput />
</OneTimePasswordField.Root>
```

### Segmented controls

The `Root` component accepts arbitrary children, so rendering a visually segmented list is as simple as rendering separators between inputs. We recommend hiding decorative elements from assistive tech with `aria-hidden` and avoid rendering other meaningful content within `Root` since each child element is expected to belong to the parent with the `group` role.

```jsx line=3,5,7
<OneTimePasswordField.Root>
	<OneTimePasswordField.Input />
	<Separator.Root aria-hidden />
	<OneTimePasswordField.Input />
	<Separator.Root aria-hidden />
	<OneTimePasswordField.Input />
	<Separator.Root aria-hidden />
	<OneTimePasswordField.Input />
	<OneTimePasswordField.HiddenInput />
</OneTimePasswordField.Root>
```

### Auto-submit form when password is entered

Use the `autoSubmit` prop to submit an associated form when all inputs are filled.

```jsx
function Verify({ validCode }) {
	const PASSWORD_LENGTH = 6;
	function handleSubmit(event) {
		event.preventDefault();
		const formData = event.formData;
		if (formData.get("otp") === validCode) {
			redirect("/authenticated");
		} else {
			window.alert("Invalid code");
		}
	}
	return (
		<form onSubmit={handleSubmit}>
			<OneTimePasswordField.Root name="otp" autoSubmit>
				{PASSWORD_LENGTH.map((_, i) => (
					<OneTimePasswordField.Input key={i} />
				))}
				{/* HiddenInput is required for the form to have data associated with the field */}
				<OneTimePasswordField.HiddenInput />
			</OneTimePasswordField.Root>
			<button>Submit</button>
		</form>
	);
}
```

### Controlled value

```jsx
function Verify({ validCode }) {
	const [value, setValue] = React.useState("");
	const PASSWORD_LENGTH = 6;
	function handleSubmit() {
		if (value === validCode) {
			redirect("/authenticated");
		} else {
			window.alert("Invalid code");
		}
	}
	return (
		<OneTimePasswordField.Root
			autoSubmit
			value={value}
			onAutoSubmit={handleSubmit}
			onValueChange={setValue}
		>
			{PASSWORD_LENGTH.map((_, i) => (
				<OneTimePasswordField.Input key={i} />
			))}
		</OneTimePasswordField.Root>
	);
}
```

## Accessibility

At the time of writing, there is no singular established pattern in WCAG guidelines for implementing one-time password fields as separate inputs. The behavior aims to get as close as possible to having the field act as a single input, with a few exceptions to match user expectations based on our initial research, testing, and gathering feedback.

This component is implemented as `input` elements within a container with a role of `group` to indicate that child inputs are related. Inputs can be navigated and focused using direction keys, and typing input will move focus to the next input until the last input is reached.

Pasting a value into the field will replace the contents of all inputs, regardless of the currently focused input. Based on our research this seems to align with most user expectations, where values are often pasted from password-managers or an email.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Enter"],
			description: (
				<span>
					Attempts to submit an associated <Code>form</Code> if one is found
				</span>
			),
		},
		{
			keys: ["Tab"],
			description: (
				<span>
					Moves focus to the next focusable element outside of the{" "}
					<Code>Root</Code>
				</span>
			),
		},
		{
			keys: ["Shift + Tab"],
			description: (
				<span>
					Moves focus to the previous focusable element outside of the{" "}
					<Code>Root</Code>
				</span>
			),
		},
		{
			keys: ["ArrowDown"],
			description: (
				<span>
					Moves focus to the next <Code>Input</Code> when{" "}
					<Code>orientation</Code> is <Code>vertical</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowUp"],
			description: (
				<span>
					Moves focus to the previous <Code>Input</Code> when{" "}
					<Code>orientation</Code> is <Code>vertical</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowRight"],
			description: (
				<span>
					Moves focus to the next <Code>Input</Code> when{" "}
					<Code>orientation</Code> is <Code>horizontal</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowLeft"],
			description: (
				<span>
					Moves focus to the previous <Code>Input</Code> when{" "}
					<Code>orientation</Code> is <Code>horizontal</Code>.
				</span>
			),
		},
		{
			keys: ["Home"],
			description: (
				<span>
					Moves focus to the first <Code>Input</Code>.
				</span>
			),
		},
		{
			keys: ["End"],
			description: (
				<span>
					Moves focus to the last <Code>Input</Code>.
				</span>
			),
		},
		{
			keys: ["Delete"],
			description: (
				<span>
					Removes the character in the currently focused <Code>Input</Code> and
					shifts later values back
				</span>
			),
		},
		{
			keys: ["Backspace"],
			description: (
				<span>
					Removes the character in the currently focused <Code>Input</Code> and
					moves focus to the previous <Code>Input</Code>
				</span>
			),
		},
		{
			keys: ["Command + Backspace"],
			description: (
				<span>
					Clears the value of all <Code>Input</Code> elements
				</span>
			),
		},
	]}
/>

password-toggle-field.mdx
---
metaTitle: Password Toggle Field
metaDescription: A password input field with an integrated button to toggle the value's visibility
name: password-toggle-field
---

# Password Toggle Field

<Description>
	A password input field with an integrated button to toggle the value's
	visibility.
</Description>

<HeroContainer>
	<PasswordToggleFieldDemo />
</HeroContainer>

<HeroCodeBlock folder="PasswordToggleField" />

<Highlights
	features={[
		"Returns focus to the input when toggling with a pointer",
		"Maintains button focus when toggling with keyboard or virtual navigation",
		"Resets visibility to hidden after form submission to prevent accidental storage",
		"Implicit accessible labeling for icon-based toggle buttons",
	]}
/>

## Anatomy

Import all parts and piece them together.

```jsx
import { unstable_PasswordToggleField as PasswordToggleField } from "radix-ui";
import { EyeClosedIcon, EyeOpenIcon } from "@radix-ui/react-icons";

export default () => (
	<PasswordToggleField.Root>
		<PasswordToggleField.Input />
		<PasswordToggleField.Toggle>
			<PasswordToggleField.Icon
				visible={<EyeOpenIcon />}
				hidden={<EyeClosedIcon />}
			/>
		</PasswordToggleField.Toggle>
	</PasswordToggleField.Root>
);
```

## API Reference

### Root

Contains all the parts of a password toggle field.

<PropsTable
	data={[
		{
			name: "id",
			required: false,
			type: "string",
			description: (
				<span>
					The ID of the field. This ID is used as a basis for nested DOM element
					IDs used for accessibility attributes.
				</span>
			),
		},
		{
			name: "visible",
			required: false,
			type: "boolean",
			description: (
				<span>
					The controlled visibility state of the field. Must be used in
					conjunction with <Code>onVisiblityChange</Code>.
				</span>
			),
		},
		{
			name: "defaultVisible",
			required: false,
			type: "boolean",
			description: (
				<span>
					The visibility state of the field when initially rendered. Use when
					you do not need to control the visibility state.
				</span>
			),
		},
		{
			name: "onVisiblityChange",
			required: false,
			type: "(visible: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the field's visibility state changes.
				</span>
			),
		},
	]}
/>

### Input

Renders a the input containing the password value.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "autoComplete",
			required: false,
			type: '"current-password" | "new-password" | "off"',
			typeSimple: "enum",
			default: '"current-password"',
			description: (
				<span>
					Specifies what—if any—permission the user agent has to provide
					automated assistance in filling out form field values, as well as
					guidance to the browser as to the type of information expected in the
					field.
				</span>
			),
		},
	]}
/>

### Toggle

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Slot

<PropsTable
	data={[
		{
			name: "render",
			required: false,
			type: "(props: { visible: boolean }) => void",
			typeSimple: "function",
			description: (
				<span>
					A function that returns a React node to render. Can be used for more
					control over rendering.
				</span>
			),
		},
		{
			name: "visible",
			required: false,
			type: "boolean",
			description: (
				<span>
					The React node to render when the field's visibility state is visible.
				</span>
			),
		},
		{
			name: "hidden",
			required: false,
			type: "boolean",
			description: (
				<span>
					The React node to render when the field's visibility state is hidden.
				</span>
			),
		},
	]}
/>

### Icon

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "visible",
			required: true,
			type: "boolean",
			description: (
				<span>
					The SVG icon to render when the field's visibility state is visible.
				</span>
			),
		},
		{
			name: "hidden",
			required: true,
			type: "boolean",
			description: (
				<span>
					The SVG icon to render when the field's visibility state is hidden.
				</span>
			),
		},
	]}
/>

## Examples

### Basic usage

```jsx
<PasswordToggleField.Root>
	<PasswordToggleField.Input />
	<PasswordToggleField.Toggle>
		<PasswordToggleField.Icon
			visible={<EyeOpenIcon />}
			hidden={<EyeClosedIcon />}
		/>
	</PasswordToggleField.Toggle>
</PasswordToggleField.Root>
```

### With `Slot`

```jsx
<PasswordToggleField.Root>
	<PasswordToggleField.Input />
	<PasswordToggleField.Toggle>
		<PasswordToggleField.Slot visible="🙊" hidden="🙈" />
	</PasswordToggleField.Toggle>
</PasswordToggleField.Root>
```

### With `Slot` + `render` prop

```jsx
<PasswordToggleField.Root>
	<PasswordToggleField.Input />
	<PasswordToggleField.Toggle>
		<PasswordToggleField.Slot
			render={({ visible }) => (
				<svg aria-hidden viewBox="0 0 2 2" xmlns="http://www.w3.org/2000/svg">
					<path d={visible ? "M1 1 L2 2" : "M2 1 L1 2"} />
				</svg>
			)}
		/>
	</PasswordToggleField.Toggle>
</PasswordToggleField.Root>
```

popover.mdx
---
metaTitle: Popover
metaDescription: Displays rich content in a portal, triggered by a button.
name: popover
aria: https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal
---

# Popover

<Description>
	Displays rich content in a portal, triggered by a button.
</Description>

<HeroContainer>
	<PopoverDemo />
</HeroContainer>

<HeroCodeBlock folder="Popover" />

<Highlights
	features={[
		"Can be controlled or uncontrolled.",
		"Customize side, alignment, offsets, collision handling.",
		"Optionally render a pointing arrow.",
		"Focus is fully managed and customizable.",
		"Supports modal and non-modal modes.",
		"Dismissing and layering behavior is highly customizable.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-popover
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Popover } from "radix-ui";

export default () => (
	<Popover.Root>
		<Popover.Trigger />
		<Popover.Anchor />
		<Popover.Portal>
			<Popover.Content>
				<Popover.Close />
				<Popover.Arrow />
			</Popover.Content>
		</Popover.Portal>
	</Popover.Root>
);
```

## API Reference

### Root

Contains all the parts of a popover.

<PropsTable
	data={[
		{
			name: "defaultOpen",
			type: "boolean",
			description: (
				<span>
					The open state of the popover when it is initially rendered. Use when
					you do not need to control its open state.
				</span>
			),
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the popover. Must be used in conjunction
					with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the open state of the popover changes.
				</span>
			),
		},
		{
			name: "modal",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					The modality of the popover. When set to <Code>true</Code>,
					interaction with outside elements will be disabled and only popover
					content will be visible to screen readers.
				</span>
			),
		},
	]}
/>

### Trigger

The button that toggles the popover. By default, the `Popover.Content` will position itself against the trigger.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
	]}
/>

### Anchor

An optional element to position the `Popover.Content` against. If this part is not used, the content will position alongside the <Code>Popover.Trigger</Code>.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Portal

When used, portals the content part into the `body`.

<PropsTable
	data={[
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. If used on this
					part, it will be inherited by <Code>Popover.Content</Code>.
				</span>
			),
		},
		{
			name: "container",
			type: "HTMLElement",
			default: "document.body",
			description: "Specify a container element to portal the content into.",
		},
	]}
/>

### Content

The component that pops out when the popover is open.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "onOpenAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves into the component after
					opening. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onCloseAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves to the trigger after closing. It
					can be prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onFocusOutside",
			type: "(event: FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves outside the bounds of the
					component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onInteractOutside",
			type: "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when an interaction (pointer or focus event)
					happens outside the bounds of the component. It can be prevented by
					calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>Popover.Portal</Code>.
				</span>
			),
		},
		{
			name: "side",
			type: '"top" | "right" | "bottom" | "left"',
			typeSimple: "enum",
			default: '"bottom"',
			description: (
				<span>
					The preferred side of the anchor to render against when open. Will be
					reversed when collisions occur and <Code>avoidCollisions</Code> is
					enabled.
				</span>
			),
		},
		{
			name: "sideOffset",
			type: "number",
			default: "0",
			description: <span>The distance in pixels from the anchor.</span>,
		},
		{
			name: "align",
			type: '"start" | "center" | "end"',
			typeSimple: "enum",
			default: '"center"',
			description: (
				<span>
					The preferred alignment against the anchor. May change when collisions
					occur.
				</span>
			),
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					An offset in pixels from the <Code>"start"</Code> or{" "}
					<Code>"end"</Code> alignment options.
				</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "0",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>.
				</span>
			),
		},
		{
			name: "arrowPadding",
			type: "number",
			default: "0",
			description: (
				<span>
					The padding between the arrow and the edges of the content. If your
					content has <Code>border-radius</Code>, this will prevent it from
					overflowing the corners.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-popover-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets
				</>
			),
		},
		{
			cssVariable: "--radix-popover-content-available-width",
			description: (
				<>The remaining width between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-popover-content-available-height",
			description: (
				<>The remaining height between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-popover-trigger-width",
			description: <>The width of the trigger</>,
		},
		{
			cssVariable: "--radix-popover-trigger-height",
			description: <>The height of the trigger</>,
		},
	]}
/>

### Arrow

An optional arrow element to render alongside the popover. This can be used to help visually link the anchor with the `Popover.Content`. Must be rendered inside `Popover.Content`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "width",
			type: "number",
			default: 10,
			description: <span>The width of the arrow in pixels.</span>,
		},
		{
			name: "height",
			type: "number",
			default: 5,
			description: <span>The height of the arrow in pixels.</span>,
		},
	]}
/>

### Close

The button that closes an open popover.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

## Examples

### Constrain the content size

You may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.

We expose several CSS custom properties such as `--radix-popover-trigger-width` and `--radix-popover-content-available-height` to support this. Use them to constrain the content dimensions.

```jsx line=9
// index.jsx
import { Popover } from "radix-ui";
import "./styles.css";

export default () => (
	<Popover.Root>
		<Popover.Trigger>…</Popover.Trigger>
		<Popover.Portal>
			<Popover.Content __className__="PopoverContent" sideOffset={5}>
				…
			</Popover.Content>
		</Popover.Portal>
	</Popover.Root>
);
```

```css
/* styles.css */
.PopoverContent {
	width: var(__--radix-popover-trigger-width__);
	max-height: var(__--radix-popover-content-available-height__);
}
```

### Origin-aware animations

We expose a CSS custom property `--radix-popover-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.

```jsx line=9
// index.jsx
import { Popover } from "radix-ui";
import "./styles.css";

export default () => (
	<Popover.Root>
		<Popover.Trigger>…</Popover.Trigger>
		<Popover.Portal>
			<Popover.Content __className__="PopoverContent">…</Popover.Content>
		</Popover.Portal>
	</Popover.Root>
);
```

```css line=3
/* styles.css */
.PopoverContent {
	transform-origin: var(__--radix-popover-content-transform-origin__);
	animation: scaleIn 0.5s ease-out;
}

@keyframes scaleIn {
	from {
		opacity: 0;
		transform: scale(0);
	}
	to {
		opacity: 1;
		transform: scale(1);
	}
}
```

### Collision-aware animations

We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.

```jsx line=9
// index.jsx
import { Popover } from "radix-ui";
import "./styles.css";

export default () => (
	<Popover.Root>
		<Popover.Trigger>…</Popover.Trigger>
		<Popover.Portal>
			<Popover.Content __className__="PopoverContent">…</Popover.Content>
		</Popover.Portal>
	</Popover.Root>
);
```

```css line=6-11
/* styles.css */
.PopoverContent {
	animation-duration: 0.6s;
	animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
}
.PopoverContent[__data-side__="top"] {
	animation-name: slideUp;
}
.PopoverContent[__data-side__="bottom"] {
	animation-name: slideDown;
}

@keyframes slideDown {
	from {
		opacity: 0;
		transform: translateY(-10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

@keyframes slideUp {
	from {
		opacity: 0;
		transform: translateY(10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}
```

### With custom anchor

You can anchor the content to another element if you do not want to use the trigger as the anchor.

```jsx line=7-11
// index.jsx
import { Popover } from "radix-ui";
import "./styles.css";

export default () => (
	<Popover.Root>
		<Popover.Anchor __asChild__>
			<div className="Row">
				Row as anchor <Popover.Trigger>Trigger</Popover.Trigger>
			</div>
		</Popover.Anchor>

		<Popover.Portal>
			<Popover.Content>…</Popover.Content>
		</Popover.Portal>
	</Popover.Root>
);
```

```css
/* styles.css */
.Row {
	background-color: gainsboro;
	padding: 20px;
}
```

## Accessibility

Adheres to the [Dialog WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal).

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: "Opens/closes the popover.",
		},
		{
			keys: ["Enter"],
			description: "Opens/closes the popover.",
		},
		{
			keys: ["Tab"],
			description: "Moves focus to the next focusable element",
		},
		{
			keys: ["Shift + Tab"],
			description: "Moves focus to the previous focusable element",
		},
		{
			keys: ["Esc"],
			description: (
				<span>
					Closes the popover and moves focus to <Code>Popover.Trigger</Code>.
				</span>
			),
		},
	]}
/>

## Custom APIs

Create your own API by abstracting the primitive parts into your own component.

#### Abstract the arrow and set default configuration

This example abstracts the `Popover.Arrow` part and sets a default `sideOffset` configuration.

#### Usage

```jsx
import { Popover, PopoverTrigger, PopoverContent } from "./your-popover";

export default () => (
	<Popover>
		<PopoverTrigger>Popover trigger</PopoverTrigger>
		<PopoverContent>Popover content</PopoverContent>
	</Popover>
);
```

#### Implementation

```jsx
// your-popover.jsx
import * as React from "react";
import { Popover as PopoverPrimitive } from "radix-ui";

export const Popover = PopoverPrimitive.Root;
export const PopoverTrigger = PopoverPrimitive.Trigger;

export const PopoverContent = React.forwardRef(
	({ children, ...props }, forwardedRef) => (
		<PopoverPrimitive.Portal>
			<PopoverPrimitive.Content sideOffset={5} {...props} ref={forwardedRef}>
				{children}
				<PopoverPrimitive.Arrow />
			</PopoverPrimitive.Content>
		</PopoverPrimitive.Portal>
	),
);
```

portal.mdx
---
metaTitle: Portal
metaDescription: Renders a React subtree in a different part of the DOM.
name: portal
---

# Portal

<Description>
	Renders a React subtree in a different part of the DOM.
</Description>

<Highlights
	features={[
		"Render any React subtree outside of your App.",
		"Appends to `document.body` by default but can be customized to use a different container.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-portal
```

## Anatomy

Import the component.

```jsx
import { Portal } from "radix-ui";

export default () => <Portal.Root />;
```

## Basic example

Use the portal primitive.

```jsx
import { Portal } from "radix-ui";

export default () => <Portal.Root>Content</Portal.Root>;
```

## API Reference

### Root

Anything you put inside this component will be rendered in a separate `<div>` element. By default, this element will be appended to `document.body` but you can choose a different container by using the `container` prop.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "container",
			type: "HTMLElement",
			description:
				"A optional different container where the portaled content should be appended.",
		},
	]}
/>

progress.mdx
---
metaTitle: Progress
metaDescription: Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.
name: progress
aria: https://www.w3.org/WAI/ARIA/apg/patterns/meter
---

# Progress

<Description>
	Displays an indicator showing the completion progress of a task, typically
	displayed as a progress bar.
</Description>

<HeroContainer>
	<ProgressDemo />
</HeroContainer>

<HeroCodeBlock folder="Progress" />

<Highlights
	features={[
		"Provides context for assistive technology to read the progress of a task.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-progress
```

### Anatomy

Import all parts and piece them together.

```jsx
import { Progress } from "radix-ui";

export default () => (
	<Progress.Root>
		<Progress.Indicator />
	</Progress.Root>
);
```

## Accessibility

Adheres to the [`progressbar` role requirements](https://www.w3.org/WAI/ARIA/apg/patterns/meter).

## API Reference

### Root

Contains all of the progress parts.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			type: "number | null",
			description: "The progress value.",
		},
		{
			name: "max",
			type: "number",
			description: "The maximum progress value.",
		},
		{
			name: "getValueLabel",
			type: "(value: number, max: number) => string",
			typeSimple: "function",
			description:
				"A function to get the accessible label text representing the current value in a human-readable format. If not provided, the value label will be read as the numeric value as a percentage of the max value.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["complete", "indeterminate", "loading"],
		},
		{
			attribute: "[data-value]",
			values: "The current value",
		},
		{
			attribute: "[data-max]",
			values: "The max value",
		},
	]}
/>

### Indicator

Used to show the progress visually. It also makes progress accessible to assistive technologies.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["complete", "indeterminate", "loading"],
		},
		{
			attribute: "[data-value]",
			values: "The current value",
		},
		{
			attribute: "[data-max]",
			values: "The max value",
		},
	]}
/>

radio-group.mdx
---
metaTitle: Radio Group
metaDescription: A set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.
name: radio-group
aria: https://www.w3.org/WAI/ARIA/apg/patterns/radio
---

# Radio Group

<Description>
	A set of checkable buttons—known as radio buttons—where no more than one of
	the buttons can be checked at a time.
</Description>

<HeroContainer>
	<RadioGroupDemo />
</HeroContainer>

<HeroCodeBlock folder="RadioGroup" />

<Highlights
	features={[
		"Full keyboard navigation.",
		"Supports horizontal/vertical orientation.",
		"Can be controlled or uncontrolled.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-radio-group
```

## Anatomy

Import all parts and piece them together.

```jsx
import { RadioGroup } from "radix-ui";

export default () => (
	<RadioGroup.Root>
		<RadioGroup.Item>
			<RadioGroup.Indicator />
		</RadioGroup.Item>
	</RadioGroup.Root>
);
```

## API Reference

### Root

Contains all the parts of a radio group.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "defaultValue",
			type: "string",
			description:
				"The value of the radio item that should be checked when initially rendered. Use when you do not need to control the state of the radio items.",
		},
		{
			name: "value",
			type: "string",
			description: (
				<span>
					The controlled value of the radio item to check. Should be used in
					conjunction with <Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "onValueChange",
			type: "(value: string) => void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with radio
					items.
				</span>
			),
		},
		{
			name: "name",
			type: "string",
			description:
				"The name of the group. Submitted with its owning form as part of a name/value pair.",
		},
		{
			name: "required",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, indicates that the user must check a radio
					item before the owning form can be submitted.
				</span>
			),
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical" | undefined',
			typeSimple: "enum",
			default: "undefined",
			description: "The orientation of the component.",
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of the radio group. If omitted, inherits
					globally from <Code>DirectionProvider</Code> or assumes LTR
					(left-to-right) reading mode.
				</span>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last item
					to first, and vice versa.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Item

An item in the group that can be checked. An `input` will also render when used within a `form` to ensure events propagate correctly.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			type: "string",
			description: (
				<span>
					The value given as data when submitted with a <Code>name</Code>.
				</span>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					radio item.
				</span>
			),
		},
		{
			name: "required",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, indicates that the user must check the radio
					item before the owning form can be submitted.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Indicator

Renders when the radio item is in a checked state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description:
				"Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

## Accessibility

Adheres to the [Radio Group WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/radio) and uses [roving tabindex](https://www.w3.org/WAI/ARIA/apg/patterns/radio/examples/radio) to manage focus movement among radio items.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Tab"],
			description:
				"Moves focus to either the checked radio item or the first radio item in the group.",
		},
		{
			keys: ["Space"],
			description: "When focus is on an unchecked radio item, checks it.",
		},
		{
			keys: ["ArrowDown"],
			description: "Moves focus and checks the next radio item in the group.",
		},
		{
			keys: ["ArrowRight"],
			description: "Moves focus and checks the next radio item in the group.",
		},
		{
			keys: ["ArrowUp"],
			description: "Moves focus to the previous radio item in the group.",
		},
		{
			keys: ["ArrowLeft"],
			description: "Moves focus to the previous radio item in the group.",
		},
	]}
/>

releases.mdx
---
metaTitle: Releases
metaDescription: Radix Primitives releases and their changelogs.
---

# Releases

<Description>Radix Primitives releases and their changelogs.</Description>

## May 5, 2025

This release introduces a brand new primitive in preview: [`PasswordToggleField`](../components/password-toggle-field).

This new primitive provides components for rendering a password input alongside a button to toggle its visibility. Aside from its primary functionality, it also includes:

- Returning focus to the input when toggling with a pointer
- Maintaining focus when toggling with keyboard or virtual navigation
- Resetting visibility to hidden after form submission to prevent accidental storage
- Implicit accessible labeling for icon-based toggle buttons

This API is currently unstable, and we hope you'll help us test it out! Import the primitive using the `unstable_` prefix.

```tsx
import { unstable_PasswordToggleField as PasswordToggleField } from "radix-ui";

export function PasswordField() {
	return (
		<PasswordToggleField.Root>
			<PasswordToggleField.Input />
			<PasswordToggleField.Toggle>
				<PasswordToggleField.Icon
					visible={<EyeOpenIcon />}
					hidden={<EyeClosedIcon />}
				/>
			</PasswordToggleField.Toggle>
		</PasswordToggleField.Root>
	);
}
```

### Other updates

- Add unstable `Provider`, `Trigger` and `BubbleInput` parts to Checkbox ([#3459](https://github.com/radix-ui/primitives/pull/3459))
- Update default input type to `text` and pass to the underlying input element ([#3510](https://github.com/radix-ui/primitives/pull/3510))

## April 22, 2025

- Update the dependency for `use-sync-external-store` to ensure entrypoint is valid <PRLink id={3491} />

## April 17, 2025

This release introduces a brand new primitive in preview: [`OneTimePasswordField`](../components/one-time-password-field).

This new group of components are designed to implement a common design pattern for one-time password fields displayed as separate input fields for each character. This UI is deceptively complex to implement in such a way that interactions follow user expectations. The new primitive handles all of this complexity for you, including:

- Keyboard navigation mimicking the behavior of a single input field
- Overriding values on paste
- Password manager autofill support
- Input validation for numeric and alphanumeric values
- Auto-submit on completion
- Focus management
- Hidden input to provide a single value to form data

As this is a preview release, **the API is currently unstable**. We hope you'll help us test it out and let us know how it goes.

Import the primitive using the `unstable_` prefix.

```tsx
import { unstable_OneTimePasswordField as OneTimePasswordField } from "radix-ui";

export function Verify() {
	return (
		<OneTimePasswordField.Root>
			<OneTimePasswordField.Input />
			<OneTimePasswordField.Input />
			<OneTimePasswordField.Input />
			<OneTimePasswordField.Input />
			<OneTimePasswordField.Input />
			<OneTimePasswordField.Input />
			<OneTimePasswordField.HiddenInput />
		</OneTimePasswordField.Root>
	);
}
```

### Other updates

- All form controls with internal bubble inputs now use the Radix `Primitive` component by default. This will allow us to expose these components in a future release so users can better control this behavior in the future.
- Minor improvements to `useControllableState` to enhance performance, reduce surface area for bugs, and log warnings when misused

## April 8, 2025

- Improved rendering performance for the Tooltip provider <PRLink id={2720} />
- Ensure Tooltip is closed when `pointerdown` is fired on the trigger <PRLink id={3380} />
- Add support for `crossOrigin` in Avatar images <PRLink id={3261} />
- Fix Avatar flashing when an image is already cached <PRLink id={3008} />
- Improve `displayName` for better debugging of slottable components <PRLink id={3441} />

## February 5, 2025

- Updated dependencies to remove peer dependency warnings for `react` and `react-dom` <PRLink id={3350} />
- Skip forwarding refs to `SlotClone` when the child is a `Fragment` <PRLink id={3229} />

## January 22, 2025

- Added a `radix-ui` package that exposes the latest version of all Radix Primitives from a single place. This tree-shakable entrypoint makes it easier to bring in whatever components you need and keep them up-to-date without worrying about conflicting or duplicate dependencies.
- Updated `aria-hidden` and `react-remove-scroll` dependencies for the following components:
  - Alert Dialog
  - Context Menu
  - Dialog
  - Dropdown Menu
  - Hover Card
  - Menubar
  - Navigation Menu
  - Popover
  - Select
  - Toast
  - Tooltip

## October 1, 2024

<PackageRelease name="Alert Dialog" version="1.1.2" />

- Fix `allowPinchZoom` bug for trackpad users <PRLink id={3127} />

<PackageRelease name="Avatar" version="1.1.1" />

- Check for `referrerPolicy` when checking the image loading status <PRLink id={2772} />

<PackageRelease name="Checkbox" version="1.1.2" />

- Fix a bug where `defaultChecked` unexpectedly changed for uncontrolled checkboxes <PRLink id={2135} />
- Forward the `form` prop to the bubble input element to fix non-parent form submissions <PRLink id={3161} />

<PackageRelease name="Dialog" version="1.1.2" />

- Fix `allowPinchZoom` bug for trackpad users <PRLink id={3127} />

<PackageRelease name="Radio Group" version="1.2.1" />

- Forward the `form` prop to the bubble input element to fix non-parent form submissions <PRLink id={3161} />

<PackageRelease name="Scroll Area" version="1.2.0" />

- Fix `asChild` prop not working as expected on the `Viewport` <PRLink id={2945} />
- Update internal styles to fix other issues with `Viewport` <PRLink id={2945} />

<PackageRelease name="Select" version="2.1.2" />

- Fix error thrown when items are initially undefined <PRLink id={2623} />
- Fix several bugs for touch devices <PRLink id={2939} />
- Forward the `form` prop to the bubble input element to fix non-parent form submissions <PRLink id={3161} />
- Fix position bug where popover may start off-screen for long items <PRLink id={3149} />

<PackageRelease name="Slider" version="1.2.1" />

- Forward the root `form` prop to each thumb's bubble input element to fix non-parent form submissions <PRLink id={3161} />

<PackageRelease name="Switch" version="1.1.1" />

- Forward the `form` prop to the bubble input element to fix non-parent form submissions <PRLink id={3161} />

<PackageRelease name="Toast" version="1.2.2" />

- Fix incorrect focus when `hotkey` is an empty array <PRLink id={2491} />

## June 28, 2024

<PackageRelease name="Checkbox" version="1.1.1" />

- Export `CheckedState` type

<PackageRelease name="Tooltip" version="1.1.2" />

- Export `TooltipProviderProps` type

## June 21, 2024

<PackageRelease name="Portal" version="1.1.1" />

- Add a missing internal utility to `package.json`. The corresponding packages that provide a Portal part also received a patch update. <PRLink id={2966} />

## June 19, 2024

<PackageRelease name="All primitives" />

<br />

Released minor versions for all primitives with the following changes:

- Full React 19 compatability <PRLink id={2952} />
- Full RSC compatibility <PRLink id={2923} />
- Internal build tooling changes <PRLink id={2922} /> <PRLink id={2931} />
- Update and pin `react-remove-scroll` dependency version to avoid double scrollbar bugs in edge cases <PRLink id={2776} />
- Don’t scroll menu items in response to hover <PRLink id={2451} />
- Make sure that components that close on Escape key press capture the corresponding keyboard event. This way you can call `stopPropagation` in `onEscapeKeyDown` if you need more control rendering Radix components within another component that closes on Escape key press.
- Make sure that components with roving focus do not interfere with browser or system hotkeys, such as back navigation <PRLink id={2739} />
- Make sure that components that support `hideWhenDetached` prop do not allow interactions with hidden content <PRLink id={2743} /> <PRLink id={2745} />

<PackageRelease name="Dialog" version="1.1.0" />

- Log an error when an accessible title via the `Dialog.Title` part is missing <PRLink id={2948} />
- Log a warning when an accessible description via the `Dialog.Description` part is missing <PRLink id={2948} />

<PackageRelease name="Label" version="2.1.0" />

- Make sure that the component doesn’t interfere when clicking on the spinner of a number input

<PackageRelease name="Navigation Menu" version="1.2.0" />

- Remove unsupported `disableOutsidePointerEvents` prop

<PackageRelease name="Portal" version="1.1.0" />

- Fix hydration error in SSR on the initial render <PRLink id={2923} />

<PackageRelease name="Progress" version="1.2.0" />

- Explicitly allow `value={undefined}` to represent an indeterminate state, matching the current practical behaviour <PRLink id={2947} />

<PackageRelease name="Select" version="2.1.0" />

- Add `nonce` prop to be able to pass CSP nonce to the inline styles <PRLink id={2728} />

<PackageRelease name="Scroll Area" version="1.1.0" />

- Add `nonce` prop to be able to pass CSP nonce to the inline styles <PRLink id={2728} />

## September 25, 2023

<PackageRelease name="Alert Dialog" version="1.0.5" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />

<PackageRelease name="Avatar" version="1.0.4" />

- Prevent image flash <PRLink id={2340} />

<PackageRelease name="Context Menu" version="2.1.5" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />

<PackageRelease name="Dialog" version="1.0.5" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />

<PackageRelease name="Dropdown Menu" version="2.0.6" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />

<PackageRelease name="Hover Card" version="1.0.7" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />

<PackageRelease name="Menubar" version="1.0.4" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />

<PackageRelease name="Navigation Menu" version="1.1.4" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />

<PackageRelease name="Popover" version="1.0.7" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />
- Fix `Popover` nested inside `Dialog` not opening <PRLink id={2182} />

<PackageRelease name="Scroll Area" version="1.0.5" />

- Add `scroll-behavior: smooth` compatibility <PRLink id={2175} />

<PackageRelease name="Select" version="2.0.0" major />

- **\[Breaking\]** Add ability to reset to placeholder using `""` `value`. Note that this is only a breaking change if you were using an option with a `value` of `""`. <PRLink id={2174} />
- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />

<PackageRelease name="Toast" version="1.1.5" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />

<PackageRelease name="Tooltip" version="1.0.7" />

- Fix pointer-events issue when clicking outside <PRLink id={2177} />
- Fix `Portal` part types lying about accepting DOM props <PRLink id={2178} />
- Fix issue with boundary padding calculations <PRLink id={2185} />
- Add option to always re-position `Content` on the fly <PRLink id={2092} />

## May 26, 2023

This release ensures all of our primitives are ESM compatible. We have also updated to the latest version of [Floating UI](https://floating-ui.com/) for all of our popper-positioned primitives.

<PackageRelease name="All primitives" />

- Improve ESM compatibility <PRLink id={2130} />
- Fix possible upstream compiler errors (`@types/react` phantom dependency) <PRLink id={1896} />

<PackageRelease name="Context Menu" version="2.1.4" />

- Position content correctly when matching trigger size <PRLink id={1995} />

<PackageRelease name="Dialog" version="1.0.4" />

- Prevent non-modal dialog from re-opening when closing using trigger in Safari <PRLink id={2110} />
- Ensure focus trapping is maintained when the focused item is deleted <PRLink id={2145} />

<PackageRelease name="Dropdown Menu" version="2.0.5" />

- Position content correctly when matching trigger size <PRLink id={1995} />

<PackageRelease name="Hover Card" version="1.0.6" />

- Position content correctly when matching trigger size <PRLink id={1995} />

<PackageRelease name="Menubar" version="1.0.3" />

- Position content correctly when matching trigger size <PRLink id={1995} />

<PackageRelease name="Navigation Menu" version="1.1.3" />

- Do not close when clicking items and meta key is down <PRLink id={2080} />

<PackageRelease name="Popover" version="1.0.6" />

- Position content correctly when matching trigger size <PRLink id={1995} />
- Prevent non-modal popover from re-opening when closing using trigger in Safari <PRLink id={2110} />
- Ensure `--radix-popper-available-width` is calculated correctly when using `collisionBoundary` <PRLink id={2032} />

<PackageRelease name="Select" version="1.2.2" />

- Position content correctly when matching trigger size <PRLink id={1995} />
- Improve scroll buttons touch screen support <PRLink id={1771} />

<PackageRelease name="Slider" version="1.1.2" />

- Clamp thumb position within range <PRLink id={1988} />

<PackageRelease name="Slot" version="1.0.2" />

- Ensure `Slot` can be used in a React Server Component <PRLink id={2116} />

<PackageRelease name="Tooltip" version="1.0.6" />

- Position content correctly when matching trigger size <PRLink id={1995} />
- Improve large content hoverability <PRLink id={2155} />

## March 8, 2023

This release introduces a brand new primitive in preview: [`Form`](../components/form).

<PackageRelease name="Form" version="0.0.2" preview />

- New primitive <PRLink id={1998} />

## February 24, 2023

<PackageRelease name="Checkbox" version="1.0.2" />

- Reset checkbox state when form is reset <PRLink id={1733} />

<PackageRelease name="ContextMenu" version="2.1.2" />

- Expose new CSS custom properties to enable size constraints <PRLink id={1942} />
- Don't exit fullscreen mode when pressing escape to dismiss from submenu <PRLink id={1752} />
- Relax `onCheckedChange` type on `ContextMenu.CheckboxItem` <PRLink id={1778} />

<PackageRelease name="DropdownMenu" version="2.0.3" />

- Expose new CSS custom properties to enable size constraints <PRLink id={1942} />
- Don't exit fullscreen mode when pressing escape to dismiss from submenu <PRLink id={1752} />
- Relax `onCheckedChange` type on `DropdownMenu.CheckboxItem` <PRLink id={1778} />

<PackageRelease name="HoverCard" version="1.0.4" />

- Expose new CSS custom properties to enable size constraints <PRLink id={1942} />

<PackageRelease name="Menubar" version="1.0.1" />

- Expose new CSS custom properties to enable size constraints <PRLink id={1943} />
- Don't exit fullscreen mode when pressing escape to dismiss from submenu <PRLink id={1752} />
- Relax `onCheckedChange` type on `Menubar.CheckboxItem` <PRLink id={1778} />

<PackageRelease name="Popover" version="1.0.4" />

- Expose new CSS custom properties to enable size constraints <PRLink id={1942} />

<PackageRelease name="Tooltip" version="1.0.4" />

- Expose new CSS custom properties to enable size constraints <PRLink id={1942} />

## January 17, 2023

This release introduces a brand new primitive: [`Menubar`](../components/menubar). It also adds support for a highly requested feature for [`Select`](../components/select): the ability to position the content in a similar way to `Popover` or `DropdownMenu`.

<PackageRelease name="Accordion" version="1.1.0" />

- Add horizontal orientation support with new `orientation` prop, as well as RTL support with `dir` <PRLink id={1850} />

<PackageRelease name="Context Menu" version="2.1.1" />

- Fix consistency issue with RTL positioning <PRLink id={1890} />

<PackageRelease name="Dropdown Menu" version="2.0.2" />

- Fix consistency issue with RTL positioning <PRLink id={1890} />

<PackageRelease name="Hover Card" version="1.0.3" />

- Fix consistency issue with RTL positioning <PRLink id={1890} />

<PackageRelease name="Menubar" version="1.0.0" major />

- New primitive <PRLink id={1846} />

<PackageRelease name="Popover" version="1.0.3" />

- Fix consistency issue with RTL positioning <PRLink id={1890} />

<PackageRelease name="Select" version="1.2.0" />

- Add `position` prop to `Select.Content` to enable popper positioning <PRLink id={1853} />

<PackageRelease name="Tooltip" version="1.0.3" />

- Fix consistency issue with RTL positioning <PRLink id={1890} />

## December 14, 2022

<PackageRelease name="Context Menu" version="2.1.0" />

- Add `disabled` prop to `ContextMenu.Trigger` <PRLink id={1746} />

## November 15, 2022

<PackageRelease name="Select" version="1.1.2" />

- Fix invalid `pointerId` in Cypress when running Firefox <PRLink id={1753} />

## October 17, 2022

<PackageRelease name="Accordion" version="1.0.1" />

- Fix initial animation playback in Firefox and Safari <PRLink id={1710} />

<PackageRelease name="Alert Dialog" version="1.0.2" />

- Fix issue with textarea elements not being scrollable in Firefox <PRLink id={1550} />

<PackageRelease name="Collapsible" version="1.0.1" />

- Fix initial animation playback in Firefox and Safari <PRLink id={1710} />

<PackageRelease name="Context Menu" version="2.0.1" major />

- **\[Breaking\]** Add support for indeterminate state on `ContextMenu.CheckboxItem`. Note that this is only a breaking change if you are currently using the `CheckboxItem` part and your codebase is written in TypeScript. <PRLink id={1624} />

<PackageRelease name="Dialog" version="1.0.2" />

- Fix issue with textarea elements not being scrollable in Firefox <PRLink id={1550} />

<PackageRelease name="Dropdown Menu" version="2.0.1" major />

- **\[Breaking\]** Add support for indeterminate state on `DropdownMenu.CheckboxItem`. Note that this is only a breaking change if you are currently using the `CheckboxItem` part and your codebase is written in TypeScript. <PRLink id={1624} />
- Correctly pair `DropdownMenu.Trigger` open state with `aria-expanded` when closed <PRLink id={1644} />
- Fix issue with eager selection of items when using `asChild` <PRLink id={1647} />
- Fix issue with dismissing when the component is used in a separate popup window <PRLink id={1677} />

<PackageRelease name="Hover Card" version="1.0.2" />

- Improve text selection experience <PRLink id={1692} />

<PackageRelease name="Label" version="2.0.0" major />

- **\[Breaking\]** Remove `useLabelContext` and support for fully custom controls. For native labelling to work, ensure your custom controls are based on native elements such as `button` or `input`. <PRLink id={1686} />
- Improve native behavior by using the native `label` element <PRLink id={1686} />

<PackageRelease name="Navigation Menu" version="1.1.1" />

- Prevent menu from re-opening with the pointer after being dismissed with escape <PRLink id={1579} />
- Add `delayDuration` and `skipDelayDuration` props to `NavigationMenu.Root`. Note that by default, triggers now have a brief delay before opening in order to improve UX, this can be modified using the props provided. <PRLink id={1716} />

<PackageRelease name="Radio Group" version="1.1.0" />

- Add `disabled` prop to `RadioGroup.Root` <PRLink id={1530} />
- Fix issue where `RadioGroup.Root` was focusable when all items were disabled <PRLink id={1530} />

<PackageRelease name="Select" version="1.1.1" />

- Add `disabled` prop to `Select.Root` <PRLink id={1699} />
- Add `required` prop to `Select.Root` <PRLink id={1598} />

<PackageRelease name="Slider" version="1.1.0" />

- Add ability to visually invert the slider using the new `inverted` prop on `Slider.Root` <PRLink id={1695} />
- Add `onValueCommit` prop to `Slider.Root` to better handle discrete value changes <PRLink id={1696} />

<PackageRelease name="Slot" version="1.0.1" />

- Stop eagerly creating callback props <PRLink id={1713} />

<PackageRelease name="Toast" version="1.1.1" />

- Fix regression with screen readers announcing as "group" rather than "status" <PRLink id={1556} />
- Fix regression with `ref` assignments on child elements returning `null` <PRLink id={1668} />
- Add `onPause` and `onResume` props to `Toast.Root` <PRLink id={1669} />
- Fix timer reset issue which would cause toasts to dismiss early in some cases <PRLink id={1682} />

<PackageRelease name="Toolbar" version="1.0.1" />

- Prevent `Toolbar.Item` click handlers firing twice <PRLink id={1526} />

<PackageRelease name="Tooltip" version="1.0.2" />

- Ensure tooltip doesn't open if interacting with the trigger before the open timer expires <PRLink id={1693} />

## July 21, 2022

With this release, we start following semantic versioning strictly. All primitives are now versioned <Badge size="1" color="yellow">1.0.0</Badge>.

We also move the [`Select`](../components/select), [`Toast`](../components/toast) and [`NavigationMenu`](../components/navigation-menu) from preview to stable.

<PackageRelease name="All primitives" />

- Improve support for React 18 <PRLink id={1329} />
- **\[Breaking\]** Improve RTL performance. You need to use [`DirectionProvider`](../utilities/direction-provider) if you were relying on `dir` attribute inheritance from document (or any element). <PRLink id={1119} />

<PackageRelease name="Alert Dialog" version="1.0.0" major />

- **\[Breaking\]** Remove `allowPinchZoom` prop, now defaults to `true` <PRLink id={1514} />
- Improve compatibility with JS animation libraries with `forceMount` on `AlertDialog.Portal` <PRLink id={1075} />
- Fix regressions with page interactivity while/after closing dialog <PRLink id={1401} />

<PackageRelease name="Context Menu" version="1.0.0" major />

- **\[Breaking\]** Improve indirect nesting of context menus. Submenus must now be created using explicit parts. <PRLink id={1394} />
- **\[Breaking\]** Remove `allowPinchZoom` prop, now defaults to `true` <PRLink id={1514} />
- **\[Breaking\]** Add new `Portal` part. To avoid regressions, use this part if you want portalling behavior. Note that `z-index` isn't managed anymore so you have full control of layering. <PRLink id={1429} />
- **\[Breaking\]** Remove `offset` on `Arrow` part <PRLink id={1531} />
- **\[Breaking\]** Rename `collisionTolerance` to `collisionPadding` on `Content` part and accepts a number or a padding object <PRLink id={1531} />
- Fix issue with native context menu appearing in React 18 <PRLink id={1378} />
- Add `data-highlighted` attribute to support styling <PRLink id={1388} />
- Add `data-state` attribute to `Trigger` part <PRLink id={1455} />
- Add `collisionBoundary`, `arrowPadding`, `sticky`, `hideWhenDetached` props on `Content` part <PRLink id={1531} />

<PackageRelease name="Dialog" version="1.0.0" major />

- **\[Breaking\]** Remove `allowPinchZoom` prop, now defaults to `true` <PRLink id={1514} />
- Improve compatibility with JS animation libraries with `forceMount` on `Dialog.Portal` <PRLink id={1075} />
- Fix regressions with page interactivity while/after closing dialog <PRLink id={1401} />

<PackageRelease name="Dropdown Menu" version="1.0.0" major />

- **\[Breaking\]** Improve indirect nesting of dropdown menus. Submenus must now be created using explicit parts. <PRLink id={1394} />
- **\[Breaking\]** Remove `allowPinchZoom` prop, now defaults to `true` <PRLink id={1514} />
- **\[Breaking\]** Add new `Portal` part. To avoid regressions, use this part if you want portalling behavior. Note that `z-index` isn't managed anymore so you have full control of layering. <PRLink id={1429} />
- **\[Breaking\]** Remove `offset` on `Arrow` part <PRLink id={1531} />
- **\[Breaking\]** Rename `collisionTolerance` to `collisionPadding` on `Content` part and accepts a number or a padding object <PRLink id={1531} />
- Add `data-highlighted` attribute to support styling <PRLink id={1388} />
- Prevent escape key from exiting fullscreen mode in Firefox & Safari <PRLink id={1423} />
- Add `collisionBoundary`, `arrowPadding`, `sticky`, `hideWhenDetached` props on `Content` part <PRLink id={1531} />

<PackageRelease name="Hover Card" version="1.0.0" major />

- **\[Breaking\]** Add new `Portal` part. To avoid regressions, use this part if you want portalling behavior. Note that `z-index` isn't managed anymore so you have full control of layering. <PRLink id={1426} />
- **\[Breaking\]** Remove `offset` on `Arrow` part <PRLink id={1531} />
- **\[Breaking\]** Rename `collisionTolerance` to `collisionPadding` on `Content` part and accepts a number or a padding object <PRLink id={1531} />
- Add `collisionBoundary`, `arrowPadding`, `sticky`, `hideWhenDetached` props on `Content` part <PRLink id={1531} />

<PackageRelease name="Navigation Menu" version="1.0.0" major />

- Ensure menu closes after clicking `NavigationMenu.Link` <PRLink id={1347} />
- Add `onSelect` prop to `NavigationMenu.Link` <PRLink id={1372} />

<PackageRelease name="Popover" version="1.0.0" major />

- **\[Breaking\]** Remove `allowPinchZoom` prop, now defaults to `true` <PRLink id={1514} />
- **\[Breaking\]** Add new `Portal` part. To avoid regressions, use this part if you want portalling behavior. Note that `z-index` isn't managed anymore so you have full control of layering. <PRLink id={1425} />
- **\[Breaking\]** Remove `offset` on `Arrow` part <PRLink id={1531} />
- **\[Breaking\]** Rename `collisionTolerance` to `collisionPadding` on `Content` part and accepts a number or a padding object <PRLink id={1531} />
- Add `collisionBoundary`, `arrowPadding`, `sticky`, `hideWhenDetached` props on `Content` part <PRLink id={1531} />

<PackageRelease name="Portal" version="1.0.0" major />

- **\[Breaking\]** Note that `z-index` isn't managed anymore so you have full control of layering. The prop to provide a custom container evolves from `containerRef` (ref) to `container` (element). The `data-radix-portal` was removed because you can use `asChild` to control the element. <PRLink id={1463} />

<PackageRelease name="RadioGroup" version="1.0.0" major />

- Add `aria-required` to root <PRLink id={1422} />

<PackageRelease name="Scroll Area" version="1.0.0" major />

- `ScrollArea.Thumb` is now animatable <PRLink id={1392} />

<PackageRelease name="Select" version="1.0.0" major />

- **\[Breaking\]** Renamed `data-state` values from `active|inactive` to `checked|unchecked` <PRLink id={1388} />
- **\[Breaking\]** Add new `Portal` part. To avoid regressions, use this part if you want portalling behavior. Note that `z-index` isn't managed anymore so you have full control of layering. <PRLink id={1459} />
- Fix position breaking when using `asChild` on `Select.Content` <PRLink id={1245} />
- Improve trigger/content alignment when `Select.Content` has padding <PRLink id={1312} />
- Fix trigger/content alignment when there are less than 5 items <PRLink id={1355} />
- Support trigger/content alignment when no value is provided <PRLink id={1379} />
- Add `data-highlighted` attribute to support styling <PRLink id={1388} />
- Add support for placeholder via `placeholder` prop on `Select.Value` <PRLink id={1384} />
- Resolve value mismatch with underlying native select <PRLink id={1421} />

<PackageRelease name="Slot" version="1.0.0" major />

- Fix issue with children ordering when using `Slottable` <PRLink id={1376} />

<PackageRelease name="Tabs" version="1.0.0" major />

- Add support for lifecycle animation to `Tabs.Content` <PRLink id={1346} />

<PackageRelease name="Toast" version="1.0.0" major />

- **\[Breaking\]** The default toast order has changed, they now render top to bottom from oldest to newest <PRLink id={1469} />
- Improve Typescript types when using `asChild` <PRLink id={1300} />
- Fix issue with toast reordering when updating React's `key` prop <PRLink id={1283} />
- Improve compatability with animation libraries <PRLink id={1468} />

<PackageRelease name="Tooltip" version="1.0.0" major />

- **\[Breaking\]** Add new `Portal` part. To avoid regressions, use this part if you want portalling behavior. Note that `z-index` isn't managed anymore so you have full control of layering. <PRLink id={1427} />
- **\[Breaking\]** By default `Tooltip.Content` will remain open when hovering (WCAG 2.1 Content on Hover compliance). `disableHoverableContent` can be supplied to `Tooltip.Provider` to restore previous behavior <PRLink id={1490} />
- **\[Breaking\]** `side` on `Tooltip.Content` now defaults to `top` <PRLink id={1490} />
- **\[Breaking\]** `Tooltip.Provider` is now required, you must wrap your app to avoid regressions. <PRLink id={1490} />
- **\[Breaking\]** Remove `offset` on `Arrow` part <PRLink id={1531} />
- **\[Breaking\]** Rename `collisionTolerance` to `collisionPadding` on `Content` part and accepts a number or a padding object <PRLink id={1531} />
- Improve layering of tooltip with other primitives <PRLink id={1314} />
- Fix tooltip closing when transforming/animation trigger <PRLink id={937} />
- Add `collisionBoundary`, `arrowPadding`, `sticky`, `hideWhenDetached` props on `Content` part <PRLink id={1531} />

## February 28, 2022

This release introduces 3 brand new primitives in preview: [`Select`](../components/select), [`Toast`](../components/toast) and [`NavigationMenu`](../components/navigation-menu), whilst also shipping a ton of fixes and improvements.

<PackageRelease name="Accordion" version="0.1.6" />

- Prevent form submission when pressing `Accordion.Trigger` <PRLink id={1085} />
- Fix animation issue with React 18 <PRLink id={1125} />

<PackageRelease name="Alert Dialog" version="0.1.7" />

- Improve pointer-events management <PRLink id={1079} />

<PackageRelease name="Checkbox" version="0.1.5" />

- Prevent activation via enter key <PRLink id={1104} />

<PackageRelease name="Collapsible" version="0.1.6" />

- Fix animation issue with React 18 <PRLink id={1125} />

<PackageRelease name="Context Menu" version="0.1.6" />

- Prevent `DropdownMenu.TriggerItem` click from firing twice <PRLink id={1057} />
- Improve idle performance <PRLink id={1040} />

<PackageRelease name="Dialog" version="0.1.7" major />

- Improve pointer-events management <PRLink id={1079} />
- **\[Breaking\]** `Dialog.Title` is now a required part so will throw an error if not used. `aria-describedby={undefined}` must be passed to `Dialog.Content` if no description is needed. <PRLink id={1098} />

<PackageRelease name="Dropdown Menu" version="0.1.6" />

- Improve composability with `Dialog`/`AlertDialog` <PRLink id={1097} />
- Prevent clicking trigger to close from immediately reopening in non-modal mode <PRLink id={1059} />
- Prevent `DropdownMenu.TriggerItem` click from firing twice <PRLink id={1057} />
- Improve idle performance <PRLink id={1040} />

<PackageRelease name="Navigation Menu" version="0.1.2" preview />

- New primitive <PRLink id={1172} />

<PackageRelease name="Radio Group" version="0.1.5" />

- Prevent activation via enter key <PRLink id={1104} />

<PackageRelease name="Select" version="0.1.1" preview />

- New primitive <PRLink id={1169} />

<PackageRelease name="Slider" version="0.1.4" />

- Prevent page scroll when using `Home` and `End` keys <PRLink id={1076} />

<PackageRelease name="Tabs" version="0.1.5" />

- Prevent accidental focus activation via right click <PRLink id={1114} />

<PackageRelease name="Toast" version="0.1.1" preview />

- New primitive <PRLink id={1165} />

<PackageRelease name="Toggle Group" version="0.1.5" />

- Improve accessibility by using radio role for single toggle group <PRLink id={1118} />

## December 13, 2021

This release focuses on React 18 support and introduces a number of breaking changes to some packages, mostly related to portalling dialogs.

<PackageRelease name="All primitives" />

- **\[Breaking\]** Deprecate `IdProvider`. Improves support for React 18 going forward and is no longer needed in older versions. Remove from your app to avoid deprecation warnings. <PRLink id={1006} />

<PackageRelease name="Accordion" version="0.1.5" major />

- Improve React 18 support <PRLink id={984} />
- Improve dev mode errors with mismatched `type` and `value` props <PRLink id={979} />
- Prevent `Accordion.Content` height animation on initial page load <PRLink id={977} />

<PackageRelease name="Alert Dialog" version="0.1.5" major />

- **\[Breaking\]** Add new `Portal` part. To avoid regressions, use this part if you want portalling behavior. <PRLink id={936} />
- **\[Breaking\]** Support scrolling within `AlertDialog.Overlay`. Move `allowPinchZoom` to root. <PRLink id={963} />
- Fix `asChild` TypeScript error <PRLink id={924} />

<PackageRelease name="Collapsible" version="0.1.5" />

- Prevent `Collapsible.Content` height animation on initial page load <PRLink id={977} />

<PackageRelease name="Dialog" version="0.1.5" major />

- **\[Breaking\]** Add new `Portal` part. To avoid regressions, use this part if you want portalling behavior. <PRLink id={936} />
- **\[Breaking\]** Support scrolling within `Dialog.Overlay`. Move `allowPinchZoom` to root. <PRLink id={963} />

<PackageRelease name="Dropdown Menu" version="0.1.4" />

- Prevent disabled trigger from opening menu <PRLink id={974} />

<PackageRelease name="Hover Card" version="0.1.3" />

- Fix ability to focus `HoverCard` when inside a dialog <PRLink id={920} />

<PackageRelease name="Radio Group" version="0.1.4" />

- Prevent programmatic focus from changing value <PRLink id={939} />

<PackageRelease name="Tabs" version="0.1.4" major />

- **\[Breaking\]** Change `Tabs.Trigger` to `button` element <PRLink id={981} />
- Improve TSDocs <PRLink id={978} />

<PackageRelease name="Toggle Group" version="0.1.4" />

- Remove invalid `aria-orientation` attribute on `role=group` element <PRLink id={965} />

<PackageRelease name="Toolbar" version="0.1.4" />

- Fix `asChild` TypeScript error <PRLink id={924} />
- Remove invalid `toolbaritem` role <PRLink id={950} />

<PackageRelease name="Tooltip" version="0.1.6" major />

- **\[Breaking\]** Add new `TooltipProvider` part. You must wrap your app to avoid regressions. <PRLink id={1007} />
- **\[Breaking\]** Remove `type=button` attribute from `Tooltip.Trigger` <PRLink id={1011} />
- Fix tooltip activation regression <PRLink id={1035} />

<PackageRelease name="Slot" version="0.1.2" />

- Fix `key` warnings <PRLink id={1015} />

<Separator mt="7" />

## October 15, 2021

<PackageRelease name="All primitives" />

- All primitives are now versioned <Badge size="1" color="blue">0.1.1</Badge>
- Fix composability issues between primitives by scoping context <PRLink id={906} />
- Fix CSS unmount animations <PRLink id={851} />

<PackageRelease name="Accordion" version="0.1.1" />

- Add new CSS variable to `Accordion.Content` to help with width animations <PRLink id={879} />

<PackageRelease name="Alert Dialog" version="0.1.1" major />

- Improve composability with `Dialog` <PRLink id={906} />
- **\[Breaking\]** Remove `AlertDialog.Content` `onInteractOutside` prop <PRLink id={846} />

<PackageRelease name="Dialog" version="0.1.1" />

- Improve composability with `AlertDialog` <PRLink id={906} />
- Add pinch to zoom support to `DropdownMenu.Content` via `allowPinchZoom` prop <PRLink id={884} />

<PackageRelease name="Context Menu" version="0.1.1" />

- Add pinch to zoom support to `ContextMenu.Content` via `allowPinchZoom` prop <PRLink id={884} />
- Prevent scroll via arrow keypress on submenu triggers <PRLink id={908} />

<PackageRelease name="Collapsible" version="0.1.1" />

- Add new CSS variable to `Collapsible.Content` to help with width animations <PRLink id={879} />

<PackageRelease name="Checkbox" version="0.1.1" />

- Prevent screen reader virtual cursor from accessing hidden input <PRLink id={870} />

<PackageRelease name="Dropdown Menu" version="0.1.1" />

- Improve composability with `Tooltip` <PRLink id={906} />
- Add pinch to zoom support to `DropdownMenu.Content` via `allowPinchZoom` prop <PRLink id={884} />
- Prevent scroll via arrow keypress on submenu triggers <PRLink id={908} />

<PackageRelease name="Hover Card" version="0.1.1" />

- Open on focus to improve keyboard support <PRLink id={902} />
- Compose correct pointer events internally <PRLink id={893} />

<PackageRelease name="Label" version="0.1.1" />

- Allow its children to prevent event propagation <PRLink id={861} />

<PackageRelease name="Radio Group" version="0.1.1" />

- Prevent screen reader virtual cursor from accessing hidden inputs <PRLink id={870} />

<PackageRelease name="Popover" version="0.1.1" />

- Add pinch to zoom support to `Popover.Content` via `allowPinchZoom` prop <PRLink id={884} />

<PackageRelease name="Slider" version="0.1.1" />

- Fix calculations when value is `0` <PRLink id={866} />

<PackageRelease name="Switch" version="0.1.1" />

- Prevent screen reader virtual cursor from accessing hidden input <PRLink id={870} />

<PackageRelease name="Tabs" version="0.1.1" major />

- **\[Breaking\]** Unmount content within `Tabs.Content` when tab is inactive <PRLink id={859} />

<Separator mt="7" />

## September 7, 2021

<PackageRelease name="All primitives" />

- All primitives moved to **Beta** and are now versioned <Badge size="1" color="blue">0.1.0</Badge>
- **\[Breaking\]** Replace polymorphic `as` prop with `asChild` boolean prop. Learn more
  about how to [change the rendered element here](/primitives/docs/guides/composition) <PRLink id={835} />

<PackageRelease name="Dialog" version="0.1.0" />

- Improve composability with `DropdownMenu` <PRLink id={818} />

<PackageRelease name="Dropdown Menu" version="0.1.0" />

- Improve composability with `Dialog` <PRLink id={818} />
- Re-enable `pointer-events` when closed <PRLink id={819} />
- Prevent body text from selecting on close (Firefox) <PRLink id={812} />
- Ensure sub triggers receive focus on click (iOS Safari) <PRLink id={820} />

<PackageRelease name="Primitive" version="0.1.0" major />

- **\[Breaking\]** Deprecate `extendPrimitive` utility <PRLink id={840} />

<Separator mt="7" />

## August 4, 2021

<PackageRelease name="All primitives" />

- Improve polymorphic types performance <PRLink id={784} />

<PackageRelease name="Alert Dialog" version="0.0.20" major />

- **\[Breaking\]** Remove `AlertDialog.Content` `onPointerDownOutside` prop <PRLink id={700} />
- Prevent outside pointer events triggering prematurely on touch devices <PRLink id={767} />

<PackageRelease name="Context Menu" version="0.0.24" major />

- Add modality support via `modal` prop <PRLink id={700} />
- **\[Breaking\]** Remove `ContextMenu.Content` `disableOutsidePointerEvents` prop <PRLink id={700} />
- Prevent outside pointer events triggering prematurely on touch devices <PRLink id={767} />

<PackageRelease name="Dialog" version="0.0.20" />

- Add modality support via `modal` prop <PRLink id={700} />
- Improve animation rendering in React 18 <PRLink id={776} />
- Ensure focus is restored to trigger on close when using the `autofocus` attribute on a child element <PRLink id={739} />
- Prevent outside pointer events triggering prematurely on touch devices <PRLink id={767} />
- Ensure iOS Safari consistently focuses the first focusable element <PRLink id={776} />

<PackageRelease name="Dropdown Menu" version="0.0.23" major />

- Add modality support via `modal` prop <PRLink id={700} />
- **\[Breaking\]** Remove `DropdownMenu.Content` `disableOutsideScroll` prop <PRLink id={700} />
- **\[Breaking\]** Remove `DropdownMenu.Content` `disableOutsidePointerEvents` prop <PRLink id={700} />
- Prevent outside pointer events triggering prematurely on touch devices <PRLink id={767} />

<PackageRelease name="Popover" version="0.0.20" major />

- Add modality support via `modal` prop <PRLink id={700} />
- **\[Breaking\]** Remove `Popover.Content` `disableOutsideScroll` prop <PRLink id={700} />
- **\[Breaking\]** Remove `Popover.Content` `disableOutsidePointerEvents` prop <PRLink id={700} />
- **\[Breaking\]** Remove `Popover.Content` `trapFocus` prop <PRLink id={700} />
- Improve animation rendering in React 18 <PRLink id={776} />
- Ensure focus is restored to trigger on close when using the `autofocus` attribute on a child element <PRLink id={739} />
- Prevent outside pointer events triggering prematurely on touch devices <PRLink id={767} />
- Ensure iOS Safari consistently focuses the first focusable element <PRLink id={776} />

<PackageRelease name="Scroll Area" version="0.0.16" />

- Add `data-state` to `ScrollBar` part <PRLink id={801} />

<PackageRelease name="Slider" version="0.0.17" />

- Prevent thumb receiving focus when disabled <PRLink id={777} />
- Prevent focus loss on thumb when using `React.StrictMode` <PRLink id={794} />

<Separator mt="7" />

## June 24, 2021

<PackageRelease name="Context Menu" version="0.0.23" />

- Can now be triggered on touch with a long press <PRLink id={743} />

<PackageRelease name="Dialog" version="0.0.19" />

- Add optional `Title` and `Description` parts for simpler labelling <PRLink id={741} />

<PackageRelease name="Scroll Area" version="0.0.15" />

- Add `data-orientation` to `Scrollbar` for styling convenience <PRLink id={720} />
- Fix `forceMount` type issue on `Scrollbar` <PRLink id={738} />

<PackageRelease name="Slider" version="0.0.16" />

- Ensure the correct thumb is focused when using keyboard and crossing another thumb <PRLink id={731} />
- Ensure only one arrow press is needed when crossing another thumb <PRLink id={733} />

<PackageRelease name="Slot" version="0.0.12" />

- Improve types compatibility <PRLink id={737} />

<PackageRelease name="Toggle Group" version="0.0.10" />

- Ensure only one click is needed to toggle a single controlled toggle group <PRLink id={722} />
- Ensure focus behavior is consistent on Safari <PRLink id={727} />

<Separator mt="7" />

## June 15, 2021

<PackageRelease name="All primitives" />

- Improve polymorphic types <PRLink id={648} />

<PackageRelease name="Accordion" version="0.0.16" major />

- **\[Breaking\]** Rename `Accordion.Button` to `Accordion.Trigger` <PRLink id={651} />
- **\[Breaking\]** Rename `Accordion.Panel` to `Accordion.Content` <PRLink id={651} />
- **\[Breaking\]** Rename custom property accordingly (`--radix-accordion-content-height`) <PRLink id={651} />
- **\[Breaking\]** `type=“single”` `Accordion` now has a new `collapsible` prop which is `false` by default. This means that the default behavior has now changed. By default a user cannot close all items. <PRLink id={651} />

<PackageRelease name="Alert Dialog" version="0.0.18" major />

- **\[Breaking\]** Allow preventing default in `onPointerDownOutside` without inadvertently preventing focus <PRLink id={654} />

<PackageRelease name="Checkbox" version="0.0.16" major />

- **\[Breaking\]** `onCheckedChange(event)` is now `onCheckedChange(checked: CheckedState)` <PRLink id={672} />
- Improve compatibility with native form validation <PRLink id={650} />
- Allow stopping propagation on `Checkbox` `onClick` <PRLink id={672} />
- Improve compatibility with native `label` <PRLink id={672} />
- Improve accessibility when wrapped in native `label` <PRLink id={672} />

<PackageRelease name="Collapsible" version="0.0.16" major />

- **\[Breaking\]** Rename `Collapsible.Button` to `Collapsible.Trigger` <PRLink id={651} />

<PackageRelease name="Context Menu" version="0.0.22" major />

- Add submenu support <PRLink id={682} />
- Add `ContextMenu.TriggerItem` <PRLink id={682} />
- Add `ContextMenu.Arrow` <PRLink id={682} />
- Add `dir` prop for RTL support with submenus <PRLink id={682} />
- **\[Breaking\]** Allow preventing default in `onPointerDownOutside` without inadvertently preventing focus <PRLink id={654} />
- **\[Breaking\]** Remove `ContextMenu.Content` `side` prop <PRLink id={658} />
- **\[Breaking\]** Remove `ContextMenu.Content` `align` prop <PRLink id={658} />
- **\[Breaking\]** If you had `sideOffset` on `ContextMenu.Content` before, you should now use `alignOffset`. This is to standardize vertical alignment for both root and sub-menus. <PRLink id={712} />
- **\[Breaking\]** `onFocusOutside` is now a custom event <PRLink id={671} />
- Improve support of content and item with no padding <PRLink id={658} />
- Align with WAI-ARIA spec by focusing first item when opening via keyboard <PRLink id={694} />

<PackageRelease name="Dialog" version="0.0.18" major />

- **\[Breaking\]** Allow preventing default in `onPointerDownOutside` without inadvertently preventing focus <PRLink id={654} />

<PackageRelease name="Dropdown Menu" version="0.0.21" major />

- Add submenu support <PRLink id={682} />
- Add `DropdownMenu.TriggerItem` <PRLink id={682} />
- Add `dir` prop for RTL support with submenus <PRLink id={682} />
- **\[Breaking\]** Allow preventing default in `onPointerDownOutside` without inadvertently preventing focus <PRLink id={654} />
- **\[Breaking\]** `onFocusOutside` is now a custom event <PRLink id={671} />
- **\[Breaking\]** The up arrow no longer opens the menu <PRLink id={702} />
- Align with WAI-ARIA spec by focusing first item when opening via keyboard <PRLink id={694} />

<PackageRelease name="Popover" version="0.0.18" major />

- **\[Breaking\]** Allow preventing default in `onPointerDownOutside` without inadvertently preventing focus <PRLink id={654} />
- **\[Breaking\]** `onFocusOutside` is now a custom event <PRLink id={671} />

<PackageRelease name="Radio Group" version="0.0.17" major />

- **\[Breaking\]** `onValueChange(event)` is now `onValueChange(value: string)` <PRLink id={685} />
- **\[Breaking\]** Remove `RadioGroup.Item` `onCheckedChange` prop <PRLink id={685} />
- Improve compatibility with native form validation <PRLink id={650} />
- Improve usage within forms <PRLink id={685} />

<PackageRelease name="Scroll Area" version="0.0.14" major />

- Brand new version with a simpler API <PRLink id={624} />
- Improve Safari support <PRLink id={624} />
- Improve RTL support <PRLink id={624} />
- Improve touch support <PRLink id={624} />
- `Scrollbar` mount/unmount can now be animated <PRLink id={624} />
- Add minimum width/height to thumb so it's always grabbable <PRLink id={624} />
- Move functional CSS into component to improve DX <PRLink id={624} />
- Bundle size significantly reduced <PRLink id={624} />
- **\[Breaking\]** Remove `overflowX` and `overflowY` props <PRLink id={624} />
- **\[Breaking\]** Remove `ScrollAreaButtonStart`, `ScrollAreaButtonEnd` and `ScrollAreaTrack` <PRLink id={624} />
- **\[Breaking\]** Rename `scrollbarVisibility` prop to `type`. The values are `auto`, `always`, `scroll` or `hover` <PRLink id={624} />
- **\[Breaking\]** Rename `scrollbarVisibilityRestTimeout` prop to `scrollHideDelay` <PRLink id={624} />
- **\[Breaking\]** Remove `trackClickBehavior` prop as we've removed built-in animation. Clicking on track always snaps to pointer position <PRLink id={624} />
- **\[Breaking\]** `ScrollAreaScrollbarX` and `ScrollAreaScrollbarY` are now `<ScrollAreaScrollbar orientation="horizontal" />` and `<ScrollAreaScrollbar orientation="vertical" />` <PRLink id={624} />
- Ensure no scrollbars are shown when scrolling is disabled <PRLink id={624} />
- Ensure children event handlers don't break <PRLink id={624} />
- Ensure scroll area updates when children content size changes <PRLink id={624} />

<PackageRelease name="Slider" version="0.0.15" />

- Improve usage within forms <PRLink id={678} />
- Fix key binding issue in LTR <PRLink id={718} />

<PackageRelease name="Switch" version="0.0.14" major />

- **\[Breaking\]** `onCheckedChange(event)` is now `onCheckedChange(checked: boolean)` <PRLink id={679} />
- Improve compatibility with native form validation <PRLink id={650} />
- Improve usage within forms <PRLink id={679} />
- Improve accessibility when wrapped in native `label` <PRLink id={679} />

<PackageRelease name="Tabs" version="0.0.14" major />

- **\[Breaking\]** Rename `Tabs.Tab` to `Tabs.Trigger` <PRLink id={652} />
- **\[Breaking\]** Rename `Tabs.Panel` to `Tabs.Content` <PRLink id={652} />

<Separator mt="7" />

## May 3, 2021

<PackageRelease name="All primitives" />

- Improve polymorphic types performance <PRLink id={613} />

<PackageRelease name="Accordion" version="0.0.14" />

- Ensure only one click is needed to close a single controlled accordion <PRLink id={594} />

<PackageRelease name="Checkbox" version="0.0.14" major />

- **\[Breaking\]** Remove `readOnly` prop <PRLink id={600} />

<PackageRelease name="Context Menu" version="0.0.18" />

- Add `onOpenChange` prop <PRLink id={604} />

<PackageRelease name="Dialog" version="0.0.16" />

- Ensure focus position isn't lost when blurring out window and re-focusing it <PRLink id={589} />

<PackageRelease name="Dropdown Menu" version="0.0.18" major />

- Take into account non-visible items <PRLink id={618} />
- **\[Breaking\]** Remove `anchorRef` prop <PRLink id={580} />
- Prevent page from scrolling when selecting an item with space key <PRLink id={626} />

<PackageRelease name="Hover Card" version="0.0.1" />

- New primitive <PRLink id={595} />

<PackageRelease name="Popover" version="0.0.16" major />

- **\[Breaking\]** Remove `anchorRef` prop and replace with optional `Anchor` part <PRLink id={580} />

<PackageRelease name="Radio Group" version="0.0.15" major />

- Add optional `orientation`, `dir`, `loop` props <PRLink id={618} />
- **\[Breaking\]** Remove `readOnly` prop <PRLink id={600} />

<PackageRelease name="Switch" version="0.0.12" major />

- **\[Breaking\]** Remove `readOnly` prop <PRLink id={600} />

<PackageRelease name="Toggle Group" version="0.0.7" />

- Add optional `orientation`, `dir`, `loop` props <PRLink id={618} />

<PackageRelease name="Tooltip" version="0.0.17" major />

- **\[Breaking\]** Remove `anchorRef` prop <PRLink id={580} />

<Separator mt="7" />

## March 26, 2021

<PackageRelease name="All primitives" />

- Improve tree-shaking <PRLink id={577} />

<PackageRelease name="Context Menu" version="0.0.17" />

- Ensure you can open a context menu when one is already open <PRLink id={565} />

<PackageRelease name="Dropdown Menu" version="0.0.17" />

- Fix potential overlap issue <PRLink id={541} />

<PackageRelease name="Popover" version="0.0.15" />

- Ensure `Content` closes when it has multiple close animations <PRLink id={571} />

<PackageRelease name="Toggle" version="0.0.6" major />

- **\[Breaking\]** Rename `ToggleButton` primitive to `Toggle` <PRLink id={546} />
- **\[Breaking\]** Rename `toggled` prop to `pressed` <PRLink id={546} />
- **\[Breaking\]** Rename `defaultToggled` prop to `defaultPressed` <PRLink id={546} />
- **\[Breaking\]** Rename `onToggledChange` prop to `onPressedChange` <PRLink id={546} />

<PackageRelease name="Toggle Group" version="0.0.6" />

- New primitive <PRLink id={376} />

<PackageRelease name="Toolbar" version="0.0.9" />

- New primitive <PRLink id={[412,451,545]} />

<PackageRelease name="Tooltip" version="0.0.16" />

- Add custom timing support <PRLink id={[550,551,554,558]} />
- Add unmount animation support <PRLink id={558} />

<Separator mt="7" />

## March 5, 2021

<PackageRelease name="Accordion" version="0.0.7" />

- Add height CSS custom property to panel for easier animation <PRLink id={537} />

<PackageRelease name="Collapsible" version="0.0.7" />

- Add height CSS custom property to content for easier animation <PRLink id={537} />

<PackageRelease name="Tooltip" version="0.0.9" />

- Fix type definition conflicts <PRLink id={538} />

<Separator mt="7" />

## March 3, 2021

<PackageRelease name="All primitives" />

- Add support for SSR
- **\[Breaking\]** Remove `selector` prop and `data-radix-*` atributes <PRLink id={517} />

<PackageRelease name="Accordion" version="0.0.6" major />

- **\[Breaking\]** Add support for multiple values. Note that this is a breaking change because the new `type` prop is required <PRLink id={527} />

<PackageRelease name="Slider" version="0.0.6" />

- Ensure `step` is rounded correctly <PRLink id={463} />

<PackageRelease name="Tabs" version="0.0.6" />

- Add RTL support (`dir` prop) <PRLink id={497} />

<Separator mt="7" />

## February 17, 2021

<PackageRelease name="Tooltip" version="0.0.7" />

- Ensure events are composed when using `<Trigger as={Slot}>` <PRLink id={461} />

<Separator mt="7" />

## February 15, 2021

<PackageRelease name="Context Menu" version="0.0.8" />

- Expose `onCloseAutoFocus` prop <PRLink id={456} />

<PackageRelease name="Dropdown Menu" version="0.0.8" />

- Expose `onCloseAutoFocus` prop <PRLink id={456} />

<Separator mt="7" />

## February 10, 2021

<PackageRelease name="All primitives" />

- Fix type autocompletion when using `as` prop <PRLink id={421} />

<PackageRelease name="Accordion" version="0.0.5" />

- Prevent open/close flickering <PRLink id={431} />

<PackageRelease name="Dialog" version="0.0.6" />

- Ensure focus is returned properly on close <PRLink id={422} />

<PackageRelease name="Radio Group" version="0.0.5" major />

- **\[Breaking\]** Move `name` prop from `Item` to `Root` <PRLink id={424} />

<Separator mt="7" />

## February 1, 2021

<PackageRelease name="Context Menu" version="0.0.6" />

- Re–add missing `children` <PRLink id={414} />

<PackageRelease name="Dropdown Menu" version="0.0.6" />

- Re–add missing `children` <PRLink id={414} />

<PackageRelease name="Popover" version="0.0.5" />

- Prevent flickering (sliding) issue <PRLink id={415} />

<Separator mt="7" />

## January 29, 2021

<PackageRelease name="Slot" version="0.0.1" />

- New utility <PRLink id={409} />

<Separator mt="7" />

## January 25, 2021

<PackageRelease name="Dialog" version="0.0.3" />

- Fix regression when tabbing out would close <PRLink id={403} />

<PackageRelease name="Dropdown Menu" version="0.0.3" />

- Fix broken arrow keys navigation <PRLink id={404} />

<Separator mt="7" />

## January 22, 2021

<PackageRelease name="All primitives" />

- Add `selector` prop <PRLink id={347} />

<PackageRelease name="Accordion" version="0.0.2" />

- Ensure setting `disabled={false}` on `Root` doesn't enable disabled items <PRLink id={400} />

<PackageRelease name="Dropdown Menu" version="0.0.2" />

- Add enter key support on trigger <PRLink id={381} />
- Prevent focus race condition <PRLink id={394} />

<PackageRelease name="Popover" version="0.0.2" />

- Ensure `Content` repositions on window resize <PRLink id={359} />
- Ensure last element inside `Content` triggers blur event <PRLink id={395} />

<Separator mt="7" />

## December 15, 2020

<PackageRelease name="All primitives" version="0.0.1" major />

- Initial release! 🎉 <PRLink id={338} />

scroll-area.mdx
---
metaTitle: Scroll Area
metaDescription: Augments native scroll functionality for custom, cross-browser styling.
name: scroll-area
---

# Scroll Area

<Description>
	Augments native scroll functionality for custom, cross-browser styling.
</Description>

<HeroContainer>
	<ScrollAreaDemo />
</HeroContainer>

<HeroCodeBlock folder="ScrollArea" />

<Highlights
	features={[
		"Scrollbar sits on top of the scrollable content, taking up no space.",
		"Scrolling is native; no underlying position movements via CSS transformations.",
		"Shims pointer behaviors only when interacting with the controls, so keyboard controls are unaffected.",
		"Supports Right to Left direction.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-scroll-area
```

## Anatomy

Import all parts and piece them together.

```jsx
import { ScrollArea } from "radix-ui";

export default () => (
	<ScrollArea.Root>
		<ScrollArea.Viewport />
		<ScrollArea.Scrollbar orientation="horizontal">
			<ScrollArea.Thumb />
		</ScrollArea.Scrollbar>
		<ScrollArea.Scrollbar orientation="vertical">
			<ScrollArea.Thumb />
		</ScrollArea.Scrollbar>
		<ScrollArea.Corner />
	</ScrollArea.Root>
);
```

## API Reference

### Root

Contains all the parts of a scroll area.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "type",
			type: '"auto" | "always" | "scroll" | "hover"',
			typeSimple: "enum",
			default: '"hover"',
			description: (
				<span>
					Describes the nature of scrollbar visibility, similar to how the
					scrollbar preferences in MacOS control visibility of native
					scrollbars.
					<br />
					<br />
					<Code>"auto"</Code> means that scrollbars are visible when content is
					overflowing on the corresponding orientation.
					<br />
					<Code>"always"</Code> means that scrollbars are always visible
					regardless of whether the content is overflowing.
					<br />
					<Code>"scroll"</Code> means that scrollbars are visible when the user
					is scrolling along its corresponding orientation.
					<br />
					<Code>"hover"</Code> when the user is scrolling along its
					corresponding orientation and when the user is hovering over the
					scroll area.
				</span>
			),
		},
		{
			name: "scrollHideDelay",
			type: "number",
			default: "600",
			description: (
				<span>
					If <Code>type</Code> is set to either <Code>"scroll"</Code> or{" "}
					<Code>"hover"</Code>, this prop determines the length of time, in
					milliseconds, before the scrollbars are hidden after the user stops
					interacting with scrollbars.
				</span>
			),
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of the scroll area. If omitted, inherits
					globally from <Code>DirectionProvider</Code> or assumes LTR
					(left-to-right) reading mode.
				</span>
			),
		},
		{
			name: "nonce",
			required: false,
			type: "string",
			description: (
				<span>
					An optional nonce attribute that is passed to the inline styles for
					use in CSP-enabled environments that use strict rules to enhance
					security.
				</span>
			),
		},
	]}
/>

### Viewport

The viewport area of the scroll area.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Scrollbar

The vertical scrollbar. Add a second `Scrollbar` with an `orientation` prop to enable horizontal scrolling.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries.
				</span>
			),
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical"',
			typeSimple: "enum",
			default: "vertical",
			description: "The orientation of the scrollbar",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["visible", "hidden"],
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Thumb

The thumb to be used in `ScrollArea.Scrollbar`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["visible", "hidden"],
		},
	]}
/>

### Corner

The corner where both vertical and horizontal scrollbars meet.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

## Accessibility

In most cases, it's best to rely on native scrolling and work with the customization options available in CSS. When that isn't enough, `ScrollArea` provides additional customizability while maintaining the browser's native scroll behavior (as well as accessibility features, like keyboard scrolling).

### Keyboard Interactions

Scrolling via keyboard is supported by default because the component relies on native scrolling. Specific keyboard interactions may differ between platforms, so we do not specify them here or add specific event listeners to handle scrolling via key events.

select.mdx
---
metaTitle: Select
metaDescription: Displays a list of options for the user to pick from—triggered by a button.
name: select
aria: https://www.w3.org/WAI/ARIA/apg/patterns/listbox
---

# Select

<Description>
	Displays a list of options for the user to pick from—triggered by a button.
</Description>

<HeroContainer>
	<SelectDemo />
</HeroContainer>

<HeroCodeBlock folder="Select" />

<Highlights
	features={[
		"Can be controlled or uncontrolled.",
		"Offers 2 positioning modes.",
		"Supports items, labels, groups of items.",
		"Focus is fully managed.",
		"Full keyboard navigation.",
		"Supports custom placeholder.",
		"Typeahead support.",
		"Supports Right to Left direction.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-select
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Select } from "radix-ui";

export default () => (
	<Select.Root>
		<Select.Trigger>
			<Select.Value />
			<Select.Icon />
		</Select.Trigger>

		<Select.Portal>
			<Select.Content>
				<Select.ScrollUpButton />
				<Select.Viewport>
					<Select.Item>
						<Select.ItemText />
						<Select.ItemIndicator />
					</Select.Item>

					<Select.Group>
						<Select.Label />
						<Select.Item>
							<Select.ItemText />
							<Select.ItemIndicator />
						</Select.Item>
					</Select.Group>

					<Select.Separator />
				</Select.Viewport>
				<Select.ScrollDownButton />
				<Select.Arrow />
			</Select.Content>
		</Select.Portal>
	</Select.Root>
);
```

## API Reference

### Root

Contains all the parts of a select.

<PropsTable
	data={[
		{
			name: "defaultValue",
			required: false,
			type: "string",
			description:
				"The value of the select when initially rendered. Use when you do not need to control the state of the select.",
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					The controlled value of the select. Should be used in conjunction with{" "}
					<Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
		{
			name: "defaultOpen",
			type: "boolean",
			description:
				"The open state of the select when it is initially rendered. Use when you do not need to control its open state.",
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the select. Must be used in conjunction
					with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the open state of the select changes.
				</span>
			),
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of the select when applicable. If omitted,
					inherits globally from <Code>DirectionProvider</Code> or assumes LTR
					(left-to-right) reading mode.
				</span>
			),
		},
		{
			name: "name",
			type: "string",
			description:
				"The name of the select. Submitted with its owning form as part of a name/value pair.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with
					select.
				</span>
			),
		},
		{
			name: "required",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, indicates that the user must select a value
					before the owning form can be submitted.
				</span>
			),
		},
	]}
/>

### Trigger

The button that toggles the select. The `Select.Content` will position itself by aligning over the trigger.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-placeholder]",
			values: "Present when has placeholder",
		},
	]}
/>

### Value

The part that reflects the selected value. By default the selected item's text will be rendered. if you require more control, you can instead control the select and pass your own `children`. It should not be styled to ensure correct positioning. An optional `placeholder` prop is also available for when the select has no value.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "placeholder",
			required: false,
			type: "ReactNode",
			description: (
				<>
					The content that will be rendered inside the <Code>Select.Value</Code>{" "}
					when no <Code>value</Code> or <Code>defaultValue</Code> is set.
				</>
			),
		},
	]}
/>

### Icon

A small icon often displayed next to the value as a visual affordance for the fact it can be open. By default renders ▼ but you can use your own icon via `asChild` or use `children`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Portal

When used, portals the content part into the `body`.

<PropsTable
	data={[
		{
			name: "container",
			type: "HTMLElement",
			default: "document.body",
			description: "Specify a container element to portal the content into.",
		},
	]}
/>

### Content

The component that pops out when the select is open.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "onCloseAutoFocus",
			type: "(event: Event) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when focus moves to the trigger after closing. It
					can be prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "position",
			type: '"item-aligned" | "popper"',
			typeSimple: "enum",
			default: '"item-aligned"',
			description: (
				<span>
					The positioning mode to use, <Code>item-aligned</Code> is the default
					and behaves similarly to a native MacOS menu by positioning content
					relative to the active item. <Code>popper</Code> positions content in
					the same way as our other primitives, for example <Code>Popover</Code>{" "}
					or <Code>DropdownMenu</Code>.
				</span>
			),
		},
		{
			name: "side",
			type: '"top" | "right" | "bottom" | "left"',
			typeSimple: "enum",
			default: '"bottom"',
			description: (
				<span>
					The preferred side of the anchor to render against when open. Will be
					reversed when collisions occur and <Code>avoidCollisions</Code> is
					enabled. Only available when <Code>position</Code> is set to{" "}
					<Code>popper</Code>.
				</span>
			),
		},
		{
			name: "sideOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					The distance in pixels from the anchor. Only available when{" "}
					<Code>position</Code> is set to <Code>popper</Code>.
				</span>
			),
		},
		{
			name: "align",
			type: '"start" | "center" | "end"',
			typeSimple: "enum",
			default: '"start"',
			description: (
				<span>
					The preferred alignment against the anchor. May change when collisions
					occur. Only available when <Code>position</Code> is set to{" "}
					<Code>popper</Code>.
				</span>
			),
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					An offset in pixels from the <Code>"start"</Code> or{" "}
					<Code>"end"</Code> alignment options. Only available when{" "}
					<Code>position</Code> is set to <Code>popper</Code>.
				</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges. Only available when <Code>position</Code> is set to{" "}
					<Code>popper</Code>.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check. Only available when <Code>position</Code> is set to{" "}
					<Code>popper</Code>.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "10",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>. Only available when{" "}
					<Code>position</Code> is set to <Code>popper</Code>.
				</span>
			),
		},
		{
			name: "arrowPadding",
			type: "number",
			default: "0",
			description: (
				<span>
					The padding between the arrow and the edges of the content. If your
					content has <Code>border-radius</Code>, this will prevent it from
					overflowing the corners. Only available when <Code>position</Code> is
					set to <Code>popper</Code>.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless. Only available when{" "}
					<Code>position</Code> is set to <Code>popper</Code>.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
					Only available when <Code>position</Code> is set to{" "}
					<Code>popper</Code>.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-select-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets. Only present when <Code>position="popper"</Code>.
				</>
			),
		},
		{
			cssVariable: "--radix-select-content-available-width",
			description: (
				<>
					The remaining width between the trigger and the boundary edge. Only
					present when <Code>position="popper"</Code>.
				</>
			),
		},
		{
			cssVariable: "--radix-select-content-available-height",
			description: (
				<>
					The remaining height between the trigger and the boundary edge. Only
					present when <Code>position="popper"</Code>.
				</>
			),
		},
		{
			cssVariable: "--radix-select-trigger-width",
			description: (
				<>
					The width of the trigger. Only present when{" "}
					<Code>position="popper"</Code>.
				</>
			),
		},
		{
			cssVariable: "--radix-select-trigger-height",
			description: (
				<>
					The height of the trigger. Only present when{" "}
					<Code>position="popper"</Code>.
				</>
			),
		},
	]}
/>

### Viewport

The scrolling viewport that contains all of the items.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Item

The component that contains the select items.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			required: true,
			type: "string",
			description: (
				<span>
					The value given as data when submitted with a <Code>name</Code>.
				</span>
			),
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
		{
			name: "textValue",
			type: "string",
			description: (
				<span>
					Optional text used for typeahead purposes. By default the typeahead
					behavior will use the <Code>.textContent</Code> of the{" "}
					<Code>Select.ItemText</Code> part. Use this when the content is
					complex, or you have non-textual content inside.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked"],
		},
		{
			attribute: "[data-highlighted]",
			values: "Present when highlighted",
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### ItemText

The textual part of the item. It should only contain the text you want to see in the trigger when that item is selected. It should not be styled to ensure correct positioning.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### ItemIndicator

Renders when the item is selected. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### ScrollUpButton

An optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling upwards.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### ScrollDownButton

An optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling downwards.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Group

Used to group multiple items. use in conjunction with `Select.Label` to ensure good accessibility via automatic labelling.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Label

Used to render the label of a group. It won't be focusable using arrow keys.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Separator

Used to visually separate items in the select.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Arrow

An optional arrow element to render alongside the content. This can be used to help visually link the trigger with the `Select.Content`. Must be rendered inside `Select.Content`. Only available when `position` is set to `popper`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "width",
			type: "number",
			default: 10,
			description: <span>The width of the arrow in pixels.</span>,
		},
		{
			name: "height",
			type: "number",
			default: 5,
			description: <span>The height of the arrow in pixels.</span>,
		},
	]}
/>

## Examples

### Change the positioning mode

By default, `Select` will behave similarly to a native MacOS menu by positioning `Select.Content` relative to the active item. If you would prefer an alternative positioning approach similar to `Popover` or `DropdownMenu` then you can set `position` to `popper` and make use of additional alignment options such as `side`, `sideOffset` and more.

```jsx line=8
// index.jsx
import { Select } from "radix-ui";

export default () => (
	<Select.Root>
		<Select.Trigger>…</Select.Trigger>
		<Select.Portal>
			<Select.Content __position__="popper" __sideOffset__={5}>
				…
			</Select.Content>
		</Select.Portal>
	</Select.Root>
);
```

### Constrain the content size

When using `position="popper"` on `Select.Content`, you may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.

We expose several CSS custom properties such as `--radix-select-trigger-width` and `--radix-select-content-available-height` to support this. Use them to constrain the content dimensions.

```jsx line=9
// index.jsx
import { Select } from "radix-ui";
import "./styles.css";

export default () => (
	<Select.Root>
		<Select.Trigger>…</Select.Trigger>
		<Select.Portal>
			<Select.Content
				__className__="SelectContent"
				position="popper"
				sideOffset={5}
			>
				…
			</Select.Content>
		</Select.Portal>
	</Select.Root>
);
```

```css
/* styles.css */
.SelectContent {
	width: var(__--radix-select-trigger-width__);
	max-height: var(__--radix-select-content-available-height__);
}
```

### With disabled items

You can add special styles to disabled items via the `data-disabled` attribute.

```jsx line=11
// index.jsx
import { Select } from "radix-ui";
import "./styles.css";

export default () => (
	<Select.Root>
		<Select.Trigger>…</Select.Trigger>
		<Select.Portal>
			<Select.Content>
				<Select.Viewport>
					<Select.Item __className__="SelectItem" __disabled__>
						…
					</Select.Item>
					<Select.Item>…</Select.Item>
					<Select.Item>…</Select.Item>
				</Select.Viewport>
			</Select.Content>
		</Select.Portal>
	</Select.Root>
);
```

```css line=2
/* styles.css */
.SelectItem[__data-disabled__] {
	color: "gainsboro";
}
```

### With a placeholder

You can use the `placeholder` prop on `Value` for when the select has no value. There's also a `data-placeholder` attribute on `Trigger` to help with styling.

```jsx line=7,8
// index.jsx
import { Select } from "radix-ui";
import "./styles.css";

export default () => (
	<Select.Root>
		<Select.Trigger __className__="SelectTrigger">
			<Select.Value __placeholder__="Pick an option" />
			<Select.Icon />
		</Select.Trigger>
		<Select.Portal>
			<Select.Content>…</Select.Content>
		</Select.Portal>
	</Select.Root>
);
```

```css line=2
/* styles.css */
.SelectTrigger[__data-placeholder__] {
	color: "gainsboro";
}
```

### With separators

Use the `Separator` part to add a separator between items.

```jsx line=9
<Select.Root>
	<Select.Trigger>…</Select.Trigger>
	<Select.Portal>
		<Select.Content>
			<Select.Viewport>
				<Select.Item>…</Select.Item>
				<Select.Item>…</Select.Item>
				<Select.Item>…</Select.Item>
				<Select.Separator />
				<Select.Item>…</Select.Item>
				<Select.Item>…</Select.Item>
			</Select.Viewport>
		</Select.Content>
	</Select.Portal>
</Select.Root>
```

### With grouped items

Use the `Group` and `Label` parts to group items in a section.

```jsx line=6-7,11
<Select.Root>
	<Select.Trigger>…</Select.Trigger>
	<Select.Portal>
		<Select.Content>
			<Select.Viewport>
				<Select.Group>
					<Select.Label>Label</Select.Label>
					<Select.Item>…</Select.Item>
					<Select.Item>…</Select.Item>
					<Select.Item>…</Select.Item>
				</Select.Group>
			</Select.Viewport>
		</Select.Content>
	</Select.Portal>
</Select.Root>
```

### With complex items

You can use custom content in your items.

```jsx line=11
import { Select } from "radix-ui";

export default () => (
	<Select.Root>
		<Select.Trigger>…</Select.Trigger>
		<Select.Portal>
			<Select.Content>
				<Select.Viewport>
					<Select.Item>
						<Select.ItemText>
							<img src="…" />
							Adolfo Hess
						</Select.ItemText>
						<Select.ItemIndicator>…</Select.ItemIndicator>
					</Select.Item>
					<Select.Item>…</Select.Item>
					<Select.Item>…</Select.Item>
				</Select.Viewport>
			</Select.Content>
		</Select.Portal>
	</Select.Root>
);
```

### Controlling the value displayed in the trigger

By default the trigger will automatically display the selected item `ItemText`'s content. You can control what appears by chosing to put things inside/outside the `ItemText` part.

If you need more flexibility, you can control the component using `value`/`onValueChange` props and passing `children` to `SelectValue`. Remember to make sure what you put in there is accessible.

```jsx line=1,4,6
const countries = { france: "🇫🇷", "united-kingdom": "🇬🇧", spain: "🇪🇸" };

export default () => {
	const [value, setValue] = React.useState("france");
	return (
		<Select.Root __value__={value} __onValueChange__={setValue}>
			<Select.Trigger>
				<Select.Value __aria-label__={value}>
					{__countries[value]__}
				</Select.Value>
				<Select.Icon />
			</Select.Trigger>
			<Select.Portal>
			<Select.Content>
				<Select.Viewport>
					<Select.Item value="france">
						<Select.ItemText>France</Select.ItemText>
						<Select.ItemIndicator>…</Select.ItemIndicator>
					</Select.Item>
					<Select.Item value="united-kingdom">
						<Select.ItemText>United Kingdom</Select.ItemText>
						<Select.ItemIndicator>…</Select.ItemIndicator>
					</Select.Item>
					<Select.Item value="spain">
						<Select.ItemText>Spain</Select.ItemText>
						<Select.ItemIndicator>…</Select.ItemIndicator>
					</Select.Item>
				</Select.Viewport>
			</Select.Content>
			</Select.Portal>
		</Select.Root>
	);
};
```

### With custom scrollbar

The native scrollbar is hidden by default as we recommend using the `ScrollUpButton` and `ScrollDownButton` parts for the best UX. If you do not want to use these parts, compose your select with our [Scroll Area](scroll-area) primitive.

```jsx line=10,12,18-20
// index.jsx
import { Select, ScrollArea } from "radix-ui";
import "./styles.css";

export default () => (
	<Select.Root>
		<Select.Trigger>…</Select.Trigger>
		<Select.Portal>
			<Select.Content>
				<ScrollArea.Root __className__="ScrollAreaRoot" type="auto">
					<Select.Viewport __asChild__>
						<ScrollArea.Viewport __className__="ScrollAreaViewport">
							<StyledItem>…</StyledItem>
							<StyledItem>…</StyledItem>
							<StyledItem>…</StyledItem>
						</ScrollArea.Viewport>
					</Select.Viewport>
					<ScrollArea.Scrollbar
						__className__="ScrollAreaScrollbar"
						orientation="vertical"
					>
						<ScrollArea.Thumb __className__="ScrollAreaThumb" />
					</ScrollArea.Scrollbar>
				</ScrollArea.Root>
			</Select.Content>
		</Select.Portal>
	</Select.Root>
);
```

```css
/* styles.css */
.ScrollAreaRoot {
	width: 100%;
	height: 100%;
}

.ScrollAreaViewport {
	width: 100%;
	height: 100%;
}

.ScrollAreaScrollbar {
	width: 4px;
	padding: 5px 2px;
}

.ScrollAreaThumb {
	background: rgba(0, 0, 0, 0.3);
	border-radius: 3px;
}
```

## Accessibility

Adheres to the [ListBox WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/listbox).

See the W3C [Select-Only Combobox](https://www.w3.org/TR/wai-aria-practices/examples/combobox/combobox-select-only.html) example for more information.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: (
				<span>
					When focus is on <Code>Select.Trigger</Code>, opens the select and
					focuses the selected item.
					<br />
					When focus is on an item, selects the focused item.
				</span>
			),
		},
		{
			keys: ["Enter"],
			description: (
				<span>
					When focus is on <Code>Select.Trigger</Code>, opens the select and
					focuses the first item.
					<br />
					When focus is on an item, selects the focused item.
				</span>
			),
		},
		{
			keys: ["ArrowDown"],
			description: (
				<span>
					When focus is on <Code>Select.Trigger</Code>, opens the select.
					<br />
					When focus is on an item, moves focus to the next item.
				</span>
			),
		},
		{
			keys: ["ArrowUp"],
			description: (
				<span>
					When focus is on <Code>Select.Trigger</Code>, opens the select.
					<br />
					When focus is on an item, moves focus to the previous item.
				</span>
			),
		},
		{
			keys: ["Esc"],
			description: (
				<span>
					Closes the select and moves focus to <Code>Select.Trigger</Code>.
				</span>
			),
		},
	]}
/>

### Labelling

Use our [Label](label) component in order to offer a visual and accessible label for the select.

```jsx line=5,8,12
import { Select, Label } from "radix-ui";

export default () => (
	<>
		<Label>
			Country
			<Select.Root>…</Select.Root>
		</Label>

		{/* or */}

		<Label htmlFor="country">Country</Label>
		<Select.Root>
			<Select.Trigger __id__="country">…</Select.Trigger>
			<Select.Portal>
				<Select.Content>…</Select.Content>
			</Select.Portal>
		</Select.Root>
	</>
);
```

## Custom APIs

Create your own API by abstracting the primitive parts into your own component.

### Abstract down to `Select` and `SelectItem`

This example abstracts most of the parts.

#### Usage

```jsx
import { Select, SelectItem } from "./your-select";

export default () => (
	<Select defaultValue="2">
		<SelectItem value="1">Item 1</SelectItem>
		<SelectItem value="2">Item 2</SelectItem>
		<SelectItem value="3">Item 3</SelectItem>
	</Select>
);
```

#### Implementation

```jsx
// your-select.jsx
import * as React from "react";
import { Select as SelectPrimitive } from "radix-ui";
import {
	CheckIcon,
	ChevronDownIcon,
	ChevronUpIcon,
} from "@radix-ui/react-icons";

export const Select = React.forwardRef(
	({ children, ...props }, forwardedRef) => {
		return (
			<SelectPrimitive.Root {...props}>
				<SelectPrimitive.Trigger ref={forwardedRef}>
					<SelectPrimitive.Value />
					<SelectPrimitive.Icon>
						<ChevronDownIcon />
					</SelectPrimitive.Icon>
				</SelectPrimitive.Trigger>
				<SelectPrimitive.Portal>
					<SelectPrimitive.Content>
						<SelectPrimitive.ScrollUpButton>
							<ChevronUpIcon />
						</SelectPrimitive.ScrollUpButton>
						<SelectPrimitive.Viewport>{children}</SelectPrimitive.Viewport>
						<SelectPrimitive.ScrollDownButton>
							<ChevronDownIcon />
						</SelectPrimitive.ScrollDownButton>
					</SelectPrimitive.Content>
				</SelectPrimitive.Portal>
			</SelectPrimitive.Root>
		);
	},
);

export const SelectItem = React.forwardRef(
	({ children, ...props }, forwardedRef) => {
		return (
			<SelectPrimitive.Item {...props} ref={forwardedRef}>
				<SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
				<SelectPrimitive.ItemIndicator>
					<CheckIcon />
				</SelectPrimitive.ItemIndicator>
			</SelectPrimitive.Item>
		);
	},
);
```

separator.mdx
---
metaTitle: Separator
metaDescription: Visually or semantically separates content.
name: separator
aria: https://www.w3.org/TR/wai-aria-1.2/#separator
---

# Separator

<Description>Visually or semantically separates content.</Description>

<HeroContainer>
	<SeparatorDemo />
</HeroContainer>

<HeroCodeBlock folder="Separator" />

<Highlights features={["Supports horizontal and vertical orientations."]} />

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-separator
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Separator } from "radix-ui";

export default () => <Separator.Root />;
```

## API Reference

### Root

The separator.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "orientation",
			type: '"horizontal" | "vertical"',
			typeSimple: "enum",
			default: '"horizontal"',
			description: "The orientation of the separator.",
		},
		{
			name: "decorative",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, signifies that it is purely visual, carries no
					semantic meaning, and ensures it is not present in the accessibility
					tree.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

## Accessibility

Adheres to the [`separator` role requirements](https://www.w3.org/TR/wai-aria-1.2/#separator).

server-side-rendering.mdx
---
metaTitle: Server-side rendering
metaDescription: Radix Primitives can be rendered on the server. However, Primitives in React versions less than 18 rely on hydration for ids.
---

# Server-side rendering

<Description>
	Radix Primitives can be rendered on the server. However, Primitives in React
	versions less than 18 rely on hydration for ids.
</Description>

## Overview

Server-side rendering or `SSR`, is a technique used to render components to HTML on the server, as opposed to rendering them only on the client.

Static rendering is another similar approach. Instead it pre-renders pages to HTML at build time rather than on each request.

You should be able to use all of our primitives with both approaches, for example with [Next.js](https://nextjs.org/), [Remix](https://remix.run/), or [Gatsby](https://www.gatsbyjs.com/).

## Gotcha

Primitives in React versions less than 18 rely on hydration for ids (used in aria attributes) to avoid server/client mismatch errors.

In other words, the equivalent of [Time to Interactive](https://web.dev/interactive/) for screen reader users will depend on the download speed of the JS bundle. If you'd like to generate ids server-side to improve this experience, we suggest upgrading to React 18.

slider.mdx
---
metaTitle: Slider
metaDescription: An input where the user selects a value from within a given range.
name: slider
aria: https://www.w3.org/WAI/ARIA/apg/patterns/slider-multithumb
---

# Slider

<Description>
	An input where the user selects a value from within a given range.
</Description>

<HeroContainer>
	<SliderDemo />
</HeroContainer>

<HeroCodeBlock folder="Slider" />

<Highlights
	features={[
		"Can be controlled or uncontrolled.",
		"Supports multiple thumbs.",
		"Supports a minimum value between thumbs.",
		"Supports touch or click on track to update value.",
		"Supports Right to Left direction.",
		"Full keyboard navigation.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-slider
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Slider } from "radix-ui";

export default () => (
	<Slider.Root>
		<Slider.Track>
			<Slider.Range />
		</Slider.Track>
		<Slider.Thumb />
	</Slider.Root>
);
```

## API Reference

### Root

Contains all the parts of a slider. It will render an `input` for each thumb when used within a `form` to ensure events propagate correctly.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "defaultValue",
			required: false,
			type: "number[]",
			description:
				"The value of the slider when initially rendered. Use when you do not need to control the state of the slider.",
		},
		{
			name: "value",
			required: false,
			type: "number[]",
			description: (
				<span>
					The controlled value of the slider. Must be used in conjunction with{" "}
					<Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "onValueChange?(value: number[]): void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
		{
			name: "onValueCommit",
			required: false,
			type: "onValueCommit?(value: number[]): void",
			typeSimple: "function",
			description:
				"Event handler called when the value changes at the end of an interaction. Useful when you only need to capture a final value e.g. to update a backend service.",
		},
		{
			name: "name",
			required: false,
			type: "string",
			description:
				"The name of the slider. Submitted with its owning form as part of a name/value pair.",
		},
		{
			name: "disabled",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					slider.
				</span>
			),
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical"',
			typeSimple: "enum",
			default: '"horizontal"',
			description: "The orientation of the slider.",
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of the slider. If omitted, inherits globally
					from <Code>DirectionProvider</Code> or assumes LTR (left-to-right)
					reading mode.
				</span>
			),
		},
		{
			name: "inverted",
			required: false,
			type: "boolean",
			default: "false",
			description: "Whether the slider is visually inverted.",
		},
		{
			name: "min",
			required: false,
			type: "number",
			default: "0",
			description: "The minimum value for the range.",
		},
		{
			name: "max",
			required: false,
			type: "number",
			default: "100",
			description: "The maximum value for the range.",
		},
		{
			name: "step",
			required: false,
			type: "number",
			default: "1",
			description: "The stepping interval.",
		},
		{
			name: "minStepsBetweenThumbs",
			required: false,
			type: "number",
			default: "0",
			description: (
				<span>
					The minimum permitted <Code>step</Code>s between multiple thumbs.
				</span>
			),
		},
		{
			name: "form",
			required: false,
			type: "string",
			description:
				"The ID of the form that the slider belongs to. If omitted, the slider will be associated with a parent form if one exists.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Track

The track that contains the `Slider.Range`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Range

The range part. Must live inside `Slider.Track`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Thumb

A draggable thumb. You can render multiple thumbs.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

## Examples

### Vertical orientation

Use the `orientation` prop to create a vertical slider.

```jsx line=6
// index.jsx
import { Slider } from "radix-ui";
import "./styles.css";

export default () => (
	<Slider.Root
		className="SliderRoot"
		defaultValue={[50]}
		__orientation__="vertical"
	>
		<Slider.Track className="SliderTrack">
			<Slider.Range className="SliderRange" />
		</Slider.Track>
		<Slider.Thumb className="SliderThumb" />
	</Slider.Root>
);
```

```css line=7,18,26
/* styles.css */
.SliderRoot {
	position: relative;
	display: flex;
	align-items: center;
}
.SliderRoot[__data-orientation="vertical"__] {
	flex-direction: column;
	width: 20px;
	height: 100px;
}

.SliderTrack {
	position: relative;
	flex-grow: 1;
	background-color: grey;
}
.SliderTrack[__data-orientation="vertical"__] {
	width: 3px;
}

.SliderRange {
	position: absolute;
	background-color: black;
}
.SliderRange[__data-orientation="vertical"__] {
	width: 100%;
}

.SliderThumb {
	display: block;
	width: 20px;
	height: 20px;
	background-color: black;
}
```

### Create a range

Add multiple thumbs and values to create a range slider.

```jsx line=4,8-9
import { Slider } from "radix-ui";

export default () => (
	<Slider.Root defaultValue={__[25, 75]__}>
		<Slider.Track>
			<Slider.Range />
		</Slider.Track>
		<Slider.Thumb />
		<Slider.Thumb />
	</Slider.Root>
);
```

### Define step size

Use the `step` prop to increase the stepping interval.

```jsx line=4
import { Slider } from "radix-ui";

export default () => (
	<Slider.Root defaultValue={[50]} __step__={10}>
		<Slider.Track>
			<Slider.Range />
		</Slider.Track>
		<Slider.Thumb />
	</Slider.Root>
);
```

### Prevent thumb overlap

Use `minStepsBetweenThumbs` to avoid thumbs with equal values.

```jsx line=4
import { Slider } from "radix-ui";

export default () => (
	<Slider.Root defaultValue={[25, 75]} step={10} __minStepsBetweenThumbs__={1}>
		<Slider.Track>
			<Slider.Range />
		</Slider.Track>
		<Slider.Thumb />
		<Slider.Thumb />
	</Slider.Root>
);
```

## Accessibility

Adheres to the [Slider WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/slider-multithumb).

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["ArrowRight"],
			description: (
				<span>
					Increments/decrements by the <Code>step</Code> value depending on{" "}
					<Code>orientation</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowLeft"],
			description: (
				<span>
					Increments/decrements by the <Code>step</Code> value depending on{" "}
					<Code>orientation</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowUp"],
			description: (
				<span>
					Increases the value by the <Code>step</Code> amount.
				</span>
			),
		},
		{
			keys: ["ArrowDown"],
			description: (
				<span>
					Decreases the value by the <Code>step</Code> amount.
				</span>
			),
		},
		{
			keys: ["PageUp"],
			description: (
				<span>
					Increases the value by a larger <Code>step</Code>.
				</span>
			),
		},
		{
			keys: ["PageDown"],
			description: (
				<span>
					Decreases the value by a larger <Code>step</Code>.
				</span>
			),
		},
		{
			keys: ["Shift + ArrowUp"],
			description: (
				<span>
					Increases the value by a larger <Code>step</Code>.
				</span>
			),
		},
		{
			keys: ["Shift + ArrowDown"],
			description: (
				<span>
					Decreases the value by a larger <Code>step</Code>.
				</span>
			),
		},
		{
			keys: ["Home"],
			description: "Sets the value to its minimum.",
		},
		{
			keys: ["End"],
			description: "Sets the value to its maximum.",
		},
	]}
/>

## Custom APIs

Create your own API by abstracting the primitive parts into your own component.

### Abstract all parts

This example abstracts all of the `Slider` parts so it can be used as a self closing element.

#### Usage

```jsx
import { Slider } from "./your-slider";

export default () => <Slider defaultValue={[25]} />;
```

#### Implementation

```jsx
// your-slider.jsx
import { Slider as SliderPrimitive } from "radix-ui";

export const Slider = React.forwardRef((props, forwardedRef) => {
	const value = props.value || props.defaultValue;

	return (
		<SliderPrimitive.Slider {...props} ref={forwardedRef}>
			<SliderPrimitive.Track>
				<SliderPrimitive.Range />
			</SliderPrimitive.Track>
			{value.map((_, i) => (
				<SliderPrimitive.Thumb key={i} />
			))}
		</SliderPrimitive.Slider>
	);
});
```

## Caveats

### Mouse events are not fired

Because of [a limitation](https://github.com/radix-ui/primitives/blob/83a8c13bf66f3d9f17d77caeb187a69eb146930b/packages/react/slider/src/Slider.tsx#L383-L384) we faced during implementation, the following example won't work as expected and the `onMouseDown` and `onMouseUp` event handlers won't be fired:

```jsx
<Slider.Root
	onMouseDown={() => console.log("onMouseDown")}
	onMouseUp={() => console.log("onMouseUp")}
>
	…
</Slider.Root>
```

We recommend using pointer events instead (eg. `onPointerDown`, `onPointerUp`). Regardless of the above limitation, these events are better suited for cross-platform/device handling as they are fired for all pointer input types (mouse, touch, pen, etc.).

slot.mdx
---
metaTitle: Slot
metaDescription: Merges its props onto its immediate child.
name: slot
---

# Slot

<Description>Merges its props onto its immediate child.</Description>

<Highlights features={["Can be used to support your own `asChild` prop."]} />

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-slot
```

## Anatomy

Import the component.

```jsx
import { Slot } from "radix-ui";

export default () => (
	<Slot.Root>
		<div>Hello</div>
	</Slot.Root>
);
```

## Basic example

Use to create your own `asChild` API.

When your component has a single children element:

```jsx line=9
// your-button.jsx
import * as React from "react";
import { Slot } from "radix-ui";

function Button({ asChild, ...props }) {
	const Comp = asChild ? Slot.Root : "button";
	return <Comp {...props} />;
}
```

Use `Slottable` when your component has multiple children to pass the props to the correct element:

```jsx
// your-button.jsx
import * as React from "react";
import { Slot } from "radix-ui";

function Button({ asChild, children, leftElement, rightElement, ...props }) {
	const Comp = asChild ? Slot.Root : "button";
	return (
		<Comp {...props}>
			{leftElement}
			<Slot.Slottable>{children}</Slot.Slottable>
			{rightElement}
		</Comp>
	);
}
```

### Usage

```jsx
import { Button } from "./your-button";

export default () => (
	<Button asChild>
		<a href="/contact">Contact</a>
	</Button>
);
```

### Event handlers

Any prop that starts with `on` (e.g., `onClick`) is considered an event handler.

When merging event handlers, `Slot` will create a new function where the child handler takes precedence over the slot handler.

If one of the event handlers relies on `event.defaultPrevented` make sure that the order is correct.

```jsx
import { Slot } from "radix-ui";

export default () => (
	<Slot.Root
		onClick={(event) => {
			if (!event.defaultPrevented)
				console.log("Not logged because default is prevented.");
		}}
	>
		<button onClick={(event) => event.preventDefault()} />
	</Slot.Root>
);
```

styling.mdx
---
metaTitle: Styling
metaDescription: Radix Primitives are unstyled—and compatible with any styling solution—giving you complete control over styling.
---

# Styling

<Description>
	Radix Primitives are unstyled—and compatible with any styling solution—giving
	you complete control over styling.
</Description>

## Styling overview

### Functional styles

You are in control of all aspects of styling, including functional styles. For example—by default—a [Dialog Overlay](../components/dialog) won't cover the entire viewport. You're responsible for adding those styles, plus any presentation styles.

### Classes

All components and their parts accept a `className` prop. This class will be passed through to the DOM element. You can use it in CSS as expected.

### Data attributes

When components are stateful, their state will be exposed in a `data-state` attribute. For example, when an [Accordion Item](../components/accordion) is opened, it includes a `data-state="open"` attribute.

## Styling with CSS

### Styling a part

You can style a component part by targeting the `className` that you provide.

```jsx line=3,7
import * as React from "react";
import { Accordion } from "radix-ui";
import "./styles.css";

const AccordionDemo = () => (
	<Accordion.Root>
		<Accordion.Item __className__="AccordionItem" value="item-1" />
		{/* … */}
	</Accordion.Root>
);

export default AccordionDemo;
```

### Styling a state

You can style a component state by targeting its `data-state` attribute.

```css
.AccordionItem {
	border-bottom: 1px solid gainsboro;
}

.AccordionItem[__data-state__="open"] {
	border-bottom-width: 2px;
}
```

## Styling with CSS-in-JS

The examples below are using [styled-components](https://styled-components.com/), but you can use any CSS-in-JS library of your choice.

### Styling a part

Most CSS-in-JS libraries export a function for passing components and their styles. You can provide the Radix primitive component directly.

```jsx line=5-7,11
import * as React from "react";
import { Accordion } from "radix-ui";
import styled from "styled-components";

const StyledItem = __styled__(Accordion.Item)`
  border-bottom: 1px solid gainsboro;
`;

const AccordionDemo = () => (
	<Accordion.Root>
		<StyledItem value="item-1" />
		{/* … */}
	</Accordion.Root>
);

export default AccordionDemo;
```

### Styling a state

You can style a component state by targeting its `data-state` attribute.

```jsx
import { Accordion } from "radix-ui";
import styled from "styled-components";

const StyledItem = styled(Accordion.Item)`
	border-bottom: 1px solid gainsboro;

	&[__data-state__="open"] {
		border-bottom-width: 2px;
	}
`;
```

## Extending a primitive

Extending a primitive is done the same way you extend any React component.

```tsx
import * as React from "react";
import { Accordion as AccordionPrimitive } from "radix-ui";

const AccordionItem = React.forwardRef<
	React.ElementRef<typeof AccordionPrimitive.Item>,
	React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>((props, forwardedRef) => (
	<AccordionPrimitive.Item {...props} ref={forwardedRef} />
));
AccordionItem.displayName = "AccordionItem";
```

## Summary

Radix Primitives were designed to encapsulate accessibility concerns and other complex functionalities, while ensuring you retain complete control over styling.

For convenience, stateful components include a `data-state` attribute.

switch.mdx
---
metaTitle: Switch
metaDescription: A control that allows the user to toggle between checked and not checked.
name: switch
aria: https://www.w3.org/WAI/ARIA/apg/patterns/switch
---

# Switch

<Description>
	A control that allows the user to toggle between checked and not checked.
</Description>

<HeroContainer>
	<SwitchDemo />
</HeroContainer>

<HeroCodeBlock folder="Switch" />

<Highlights
	features={["Full keyboard navigation.", "Can be controlled or uncontrolled."]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-switch
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Switch } from "radix-ui";

export default () => (
	<Switch.Root>
		<Switch.Thumb />
	</Switch.Root>
);
```

## API Reference

### Root

Contains all the parts of a switch. An `input` will also render when used within a `form` to ensure events propagate correctly.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "defaultChecked",
			type: "boolean",
			description:
				"The state of the switch when it is initially rendered. Use when you do not need to control its state.",
		},
		{
			name: "checked",
			type: "boolean",
			description: (
				<span>
					The controlled state of the switch. Must be used in conjunction with{" "}
					<Code>onCheckedChange</Code>.
				</span>
			),
		},
		{
			name: "onCheckedChange",
			type: "(checked: boolean) => void",
			typeSimple: "function",
			description: "Event handler called when the state of the switch changes.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					switch.
				</span>
			),
		},
		{
			name: "required",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, indicates that the user must check the switch
					before the owning form can be submitted.
				</span>
			),
		},
		{
			name: "name",
			type: "string",
			description:
				"The name of the switch. Submitted with its owning form as part of a name/value pair.",
		},
		{
			name: "value",
			type: "string",
			default: "on",
			description: (
				<span>
					The value given as data when submitted with a <Code>name</Code>.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

### Thumb

The thumb that is used to visually indicate whether the switch is on or off.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["checked", "unchecked"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

## Accessibility

Adheres to the [`switch` role requirements](https://www.w3.org/WAI/ARIA/apg/patterns/switch).

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: "Toggles the component's state.",
		},
		{
			keys: ["Enter"],
			description: "Toggles the component's state.",
		},
	]}
/>

tabs.mdx
---
metaTitle: Tabs
metaDescription: A set of layered sections of content—known as tab panels—that are displayed one at a time.
name: tabs
aria: https://www.w3.org/WAI/ARIA/apg/patterns/tabs
---

# Tabs

<Description>
	A set of layered sections of content—known as tab panels—that are displayed
	one at a time.
</Description>

<HeroContainer>
	<TabsDemo />
</HeroContainer>

<HeroCodeBlock folder="Tabs" />

<Highlights
	features={[
		"Can be controlled or uncontrolled.",
		"Supports horizontal/vertical orientation.",
		"Supports automatic/manual activation.",
		"Full keyboard navigation.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-tabs
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Tabs } from "radix-ui";

export default () => (
	<Tabs.Root>
		<Tabs.List>
			<Tabs.Trigger />
		</Tabs.List>
		<Tabs.Content />
	</Tabs.Root>
);
```

## API Reference

### Root

Contains all the tabs component parts.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "defaultValue",
			required: false,
			type: "string",
			description:
				"The value of the tab that should be active when initially rendered. Use when you do not need to control the state of the tabs.",
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					The controlled value of the tab to activate. Should be used in
					conjunction with <Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: "Event handler called when the value changes.",
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical" | undefined',
			typeSimple: "enum",
			default: '"horizontal"',
			description: "The orientation of the component.",
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of the tabs. If omitted, inherits globally from{" "}
					<Code>DirectionProvider</Code> or assumes LTR (left-to-right) reading
					mode.
				</span>
			),
		},
		{
			name: "activationMode",
			required: false,
			type: '"automatic" | "manual"',
			typeSimple: "enum",
			default: '"automatic"',
			description: (
				<span>
					When <Code>automatic</Code>, tabs are activated when receiving focus.
					When <Code>manual</Code>, tabs are activated when clicked.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### List

Contains the triggers that are aligned along the edge of the active content.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last tab to
					first, and vice versa.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Trigger

The button that activates its associated content.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			required: true,
			type: "string",
			description: "A unique value that associates the trigger with a content.",
		},
		{
			name: "disabled",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					tab.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["active", "inactive"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Content

Contains the content associated with each trigger.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			required: true,
			type: "string",
			description: "A unique value that associates the content with a trigger.",
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["active", "inactive"],
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

## Examples

### Vertical

You can create vertical tabs by using the `orientation` prop.

```jsx line=4
import { Tabs } from "radix-ui";

export default () => (
	<Tabs.Root defaultValue="tab1" __orientation__="vertical">
		<Tabs.List aria-label="tabs example">
			<Tabs.Trigger value="tab1">One</Tabs.Trigger>
			<Tabs.Trigger value="tab2">Two</Tabs.Trigger>
			<Tabs.Trigger value="tab3">Three</Tabs.Trigger>
		</Tabs.List>
		<Tabs.Content value="tab1">Tab one content</Tabs.Content>
		<Tabs.Content value="tab2">Tab two content</Tabs.Content>
		<Tabs.Content value="tab3">Tab three content</Tabs.Content>
	</Tabs.Root>
);
```

## Accessibility

Adheres to the [Tabs WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tabs).

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Tab"],
			description: (
				<span>
					When focus moves onto the tabs, focuses the active trigger. When a
					trigger is focused, moves focus to the active content.
				</span>
			),
		},
		{
			keys: ["ArrowDown"],
			description: (
				<span>
					Moves focus to the next trigger depending on <Code>orientation</Code>{" "}
					and activates its associated content.
				</span>
			),
		},
		{
			keys: ["ArrowRight"],
			description: (
				<span>
					Moves focus to the next trigger depending on <Code>orientation</Code>{" "}
					and activates its associated content.
				</span>
			),
		},
		{
			keys: ["ArrowUp"],
			description: (
				<span>
					Moves focus to the previous trigger depending on{" "}
					<Code>orientation</Code> and activates its associated content.
				</span>
			),
		},
		{
			keys: ["ArrowLeft"],
			description: (
				<span>
					Moves focus to the previous trigger depending on{" "}
					<Code>orientation</Code> and activates its associated content.
				</span>
			),
		},
		{
			keys: ["Home"],
			description: (
				<span>
					Moves focus to the first trigger and activates its associated content.
				</span>
			),
		},
		{
			keys: ["End"],
			description: (
				<span>
					Moves focus to the last trigger and activates its associated content.
				</span>
			),
		},
	]}
/>

toast.mdx
---
metaTitle: Toast
metaDescription: A succinct message that is displayed temporarily.
name: toast
aria: https://www.w3.org/TR/wai-aria/#aria-live
---

# Toast

<Description>A succinct message that is displayed temporarily.</Description>

<HeroContainer>
	<ToastDemo />
</HeroContainer>

<HeroCodeBlock folder="Toast" />

<Highlights
	features={[
		"Automatically closes.",
		"Pauses closing on hover, focus and window blur.",
		"Supports hotkey to jump to toast viewport.",
		"Supports closing via swipe gesture.",
		"Exposes CSS variables for swipe gesture animations.",
		"Can be controlled or uncontrolled.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-toast
```

## Anatomy

Import the component.

```jsx
import { Toast } from "radix-ui";

export default () => (
	<Toast.Provider>
		<Toast.Root>
			<Toast.Title />
			<Toast.Description />
			<Toast.Action />
			<Toast.Close />
		</Toast.Root>

		<Toast.Viewport />
	</Toast.Provider>
);
```

## API Reference

### Provider

The provider that wraps your toasts and toast viewport. It usually wraps the application.

<PropsTable
	data={[
		{
			name: "duration",
			type: "number",
			default: 5000,
			description:
				"The time in milliseconds that should elapse before automatically closing each toast.",
		},
		{
			name: "label",
			required: true,
			type: "string",
			default: '"Notification"',
			description:
				"An author-localized label for each toast. Used to help screen reader users associate the interruption with a toast.",
		},
		{
			name: "swipeDirection",
			type: '"right" | "left" | "up" | "down"',
			typeSimple: "enum",
			default: '"right"',
			description:
				"The direction of the pointer swipe that should close the toast.",
		},
		{
			name: "swipeThreshold",
			type: "number",
			default: 50,
			description:
				"The distance in pixels that the swipe gesture must travel before a close is triggered.",
		},
	]}
/>

### Viewport

The fixed area where toasts appear. Users can jump to the viewport by pressing a hotkey. It is up to you to ensure the discoverability of the hotkey for keyboard users.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "hotkey",
			type: "string[]",
			default: '["F8"]',
			description: (
				<span>
					The keys to use as the keyboard shortcut that will move focus to the
					toast viewport. Use <Code>event.code</Code> value for each key from{" "}
					<Link href="https://keycode.info/" variant="blue" target="_blank">
						keycode.info
					</Link>
					. For meta keys, use <Code>ctrlKey</Code>, <Code>shiftKey</Code>,{" "}
					<Code>altKey</Code> and/or <Code>metaKey</Code>.
				</span>
			),
		},
		{
			name: "label",
			type: "string",
			default: '"Notifications ({hotkey})"',
			description:
				"An author-localized label for the toast region to provide context for screen reader users when navigating page landmarks. The available `{hotkey}` placeholder will be replaced for you.",
		},
	]}
/>

### Root

The toast that automatically closes. It should not be held open to [acquire a user response](/primitives/docs/components/toast#action).

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "type",
			type: '"foreground" | "background"',
			typeSimple: "enum",
			default: '"foreground"',
			description: (
				<span>
					Control the{" "}
					<Link
						href="/primitives/docs/components/toast#sensitivity"
						variant="blue"
					>
						sensitivity
					</Link>{" "}
					of the toast for accessibility purposes. For toasts that are the
					result of a user action, choose <Code>foreground</Code>. Toasts
					generated from background tasks should use <Code>background</Code>.
				</span>
			),
		},
		{
			name: "duration",
			type: "number",
			description:
				"The time in milliseconds that should elapse before automatically closing the toast. This will override the value supplied to the provider.",
		},
		{
			name: "defaultOpen",
			type: "boolean",
			default: "true",
			description:
				"The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.",
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the dialog. Must be used in conjunction
					with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description:
				"Event handler called when the open state of the dialog changes.",
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onPause",
			type: "() => void",
			typeSimple: "function",
			description:
				"Event handler called when the dismiss timer is paused. This occurs when the pointer is moved over the viewport, the viewport is focused or when the window is blurred.",
		},
		{
			name: "onResume",
			type: "() => void",
			typeSimple: "function",
			description:
				"Event handler called when the dismiss timer is resumed. This occurs when the pointer is moved away from the viewport, the viewport is blurred or when the window is focused.",
		},
		{
			name: "onSwipeStart",
			type: "(event: SwipeEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when starting a swipe interaction. It can be
					prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onSwipeMove",
			type: "(event: SwipeEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called during a swipe interaction. It can be prevented
					by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onSwipeEnd",
			type: "(event: SwipeEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called at the end of a swipe interaction. It can be
					prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onSwipeCancel",
			type: "(event: SwipeEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a swipe interaction is cancelled. It can be
					prevented by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description:
				"Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.",
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["open", "closed"],
		},
		{
			attribute: "[data-swipe]",
			values: ["start", "move", "cancel", "end"],
		},
		{
			attribute: "[data-swipe-direction]",
			values: ["up", "down", "left", "right"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-toast-swipe-move-x",
			description: "The offset position of the toast when horizontally swiping",
		},
		{
			cssVariable: "--radix-toast-swipe-move-y",
			description: "The offset position of the toast when vertically swiping",
		},
		{
			cssVariable: "--radix-toast-swipe-end-x",
			description:
				"The offset end position of the toast after horizontally swiping",
		},
		{
			cssVariable: "--radix-toast-swipe-end-y",
			description:
				"The offset end position of the toast after vertically swiping",
		},
	]}
/>

### Title

An optional title for the toast.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Description

The toast message.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### Action

An action that is safe to ignore to ensure users are not expected to complete tasks with unexpected side effects as a result of a [time limit](https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-required-behaviors.html).

When obtaining a user response is necessary, portal an [`AlertDialog`](/primitives/docs/components/alert-dialog) styled as a toast into the viewport instead.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "altText",
			required: true,
			type: "string",
			description: (
				<>
					Describe an{" "}
					<Link variant="subtle" href="./toast#alternative-action">
						alternative way to achieve the action
					</Link>{" "}
					for screen reader users who cannot access the toast easily.
				</>
			),
		},
	]}
/>

### Close

A button that allows users to dismiss the toast before its duration has elapsed.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

## Examples

### Custom hotkey

Override the default hotkey using the `event.code` value for each key from [keycode.info](https://keycode.info/).

```jsx line=3
<Toast.Provider>
	{/* ... */}
	<Toast.Viewport __hotkey__={["altKey", "KeyT"]} />
</Toast.Provider>
```

### Custom duration

Customise the duration of a toast to override the provider value.

```jsx line=1
<Toast.Root __duration__={3000}>
	<Toast.Description>Saved!</Toast.Description>
</Toast.Root>
```

### Duplicate toasts

When a toast must appear every time a user clicks a button, use state to render multiple instances of the same toast (see below). Alternatively, you can abstract the parts to create your own [imperative API](/primitives/docs/components/toast#imperative-api).

```jsx line=6,11-15
export default () => {
	const [savedCount, setSavedCount] = React.useState(0);

	return (
		<div>
			<form onSubmit={() => setSavedCount((count) => count + 1)}>
				{/* ... */}
				<button>save</button>
			</form>

			{Array.from({ length: savedCount }).map((_, index) => (
				<Toast.Root key={index}>
					<Toast.Description>Saved!</Toast.Description>
				</Toast.Root>
			))}
		</div>
	);
};
```

### Animating swipe gesture

Combine `--radix-toast-swipe-move-[x|y]` and `--radix-toast-swipe-end-[x|y]` CSS variables with `data-swipe="[start|move|cancel|end]"` attributes to animate a swipe to close gesture. Here's an example:

```jsx line=6,7
// index.jsx
import { Toast } from "radix-ui";
import "./styles.css";

export default () => (
	<Toast.Provider __swipeDirection__="right">
		<Toast.Root __className__="ToastRoot">...</Toast.Root>
		<Toast.Viewport />
	</Toast.Provider>
);
```

```css line=2,3,5,9,15
/* styles.css */
.ToastRoot[__data-swipe__="move"] {
	transform: translateX(var(__--radix-toast-swipe-move-x__));
}
.ToastRoot[__data-swipe__="cancel"] {
	transform: translateX(0);
	transition: transform 200ms ease-out;
}
.ToastRoot[__data-swipe__="end"] {
	animation: slideRight 100ms ease-out;
}

@keyframes slideRight {
	from {
		transform: translateX(var(__--radix-toast-swipe-end-x__));
	}
	to {
		transform: translateX(100%);
	}
}
```

## Accessibility

Adheres to the [`aria-live` requirements](https://www.w3.org/TR/wai-aria/#aria-live).

### Sensitivity

Control the sensitivity of the toast for screen readers using the `type` prop.

For toasts that are the result of a user action, choose `foreground`. Toasts generated from background tasks should use `background`.

#### Foreground

Foreground toasts are announced immediately. Assistive technologies may choose to clear previously queued messages when a foreground toast appears. Try to avoid stacking distinct foreground toasts at the same time.

#### Background

Background toasts are announced at the next graceful opportunity, for example, when the screen reader has finished reading its current sentence. They do not clear queued messages so overusing them can be perceived as a laggy user experience for screen reader users when used in response to a user interaction.

```jsx line=1,6
<Toast.Root type="foreground">
	<Toast.Description>File removed successfully.</Toast.Description>
	<Toast.Close>Dismiss</Toast.Close>
</Toast.Root>

<Toast.Root type="background">
	<Toast.Description>We've just released Radix 1.0.</Toast.Description>
	<Toast.Close>Dismiss</Toast.Close>
</Toast.Root>
```

### Alternative action

Use the `altText` prop on the `Action` to instruct an alternative way of actioning the toast to screen reader users.

You can direct the user to a permanent place in your application where they can action it or implement your own custom hotkey logic. If implementing the latter, use `foreground` type to announce immediately and increase the duration to give the user ample time.

```jsx line=4,10,12
<Toast.Root type="background">
	<Toast.Title>Upgrade Available!</Toast.Title>
	<Toast.Description>We've just released Radix 1.0.</Toast.Description>
	<Toast.Action altText="Goto account settings to upgrade">
		Upgrade
	</Toast.Action>
	<Toast.Close>Dismiss</Toast.Close>
</Toast.Root>

<Toast.Root __type__="foreground" __duration__={10000}>
	<Toast.Description>File removed successfully.</Toast.Description>
	<Toast.Action altText="Undo (Alt+U)">
		Undo <kbd>Alt</kbd>+<kbd>U</kbd>
	</Toast.Action>
	<Toast.Close>Dismiss</Toast.Close>
</Toast.Root>
```

### Close icon button

When providing an icon (or font icon), remember to label it correctly for screen reader users.

```jsx line=3-4
<Toast.Root type="foreground">
	<Toast.Description>Saved!</Toast.Description>
	<Toast.Close aria-label="Close">
		<span aria-hidden>×</span>
	</Toast.Close>
</Toast.Root>
```

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["F8"],
			description: "Focuses toasts viewport.",
		},
		{
			keys: ["Tab"],
			description: "Moves focus to the next focusable element.",
		},
		{
			keys: ["Shift + Tab"],
			description: "Moves focus to the previous focusable element.",
		},
		{
			keys: ["Space"],
			description: (
				<span>
					When focus is on a <Code>Toast.Action</Code> or{" "}
					<Code>Toast.Close</Code>, closes the toast.
				</span>
			),
		},
		{
			keys: ["Enter"],
			description: (
				<span>
					When focus is on a <Code>Toast.Action</Code> or{" "}
					<Code>Toast.Close</Code>, closes the toast.
				</span>
			),
		},
		{
			keys: ["Esc"],
			description: (
				<span>
					When focus is on a <Code>Toast</Code>, closes the toast.
				</span>
			),
		},
	]}
/>

## Custom APIs

### Abstract parts

Create your own API by abstracting the primitive parts into your own component.

#### Usage

```jsx
import { Toast } from "./your-toast";

export default () => (
	<Toast title="Upgrade available" content="We've just released Radix 3.0!">
		<button onClick={handleUpgrade}>Upgrade</button>
	</Toast>
);
```

#### Implementation

```jsx
// your-toast.jsx
import { Toast as ToastPrimitive } from "radix-ui";

export const Toast = ({ title, content, children, ...props }) => {
	return (
		<ToastPrimitive.Root {...props}>
			{title && <ToastPrimitive.Title>{title}</ToastPrimitive.Title>}
			<ToastPrimitive.Description>{content}</ToastPrimitive.Description>
			{children && (
				<ToastPrimitive.Action asChild>{children}</ToastPrimitive.Action>
			)}
			<ToastPrimitive.Close aria-label="Close">
				<span aria-hidden>×</span>
			</ToastPrimitive.Close>
		</ToastPrimitive.Root>
	);
};
```

### Imperative API

Create your own imperative API to allow [toast duplication](/primitives/docs/components/toast#duplicate-toasts) if preferred.

#### Usage

```jsx
import { Toast } from "./your-toast";

export default () => {
	const savedRef = React.useRef();
	return (
		<div>
			<form onSubmit={() => savedRef.current.publish()}>
				{/* ... */}
				<button>Save</button>
			</form>
			<Toast ref={savedRef}>Saved successfully!</Toast>
		</div>
	);
};
```

#### Implementation

```jsx
// your-toast.jsx
import * as React from "react";
import { Toast as ToastPrimitive } from "radix-ui";

export const Toast = React.forwardRef((props, forwardedRef) => {
	const { children, ...toastProps } = props;
	const [count, setCount] = React.useState(0);

	React.useImperativeHandle(forwardedRef, () => ({
		publish: () => setCount((count) => count + 1),
	}));

	return (
		<>
			{Array.from({ length: count }).map((_, index) => (
				<ToastPrimitive.Root key={index} {...toastProps}>
					<ToastPrimitive.Description>{children}</ToastPrimitive.Description>
					<ToastPrimitive.Close>Dismiss</ToastPrimitive.Close>
				</ToastPrimitive.Root>
			))}
		</>
	);
});
```

toggle-group.mdx
---
metaTitle: Toggle Group
metaDescription: A set of two-state buttons that can be toggled on or off.
name: toggle-group
aria: https://www.w3.org/WAI/ARIA/apg/patterns/button
---

# Toggle Group

<Description>
	A set of two-state buttons that can be toggled on or off.
</Description>

<HeroContainer>
	<ToggleGroupDemo />
</HeroContainer>

<HeroCodeBlock folder="ToggleGroup" />

<Highlights
	features={[
		"Full keyboard navigation.",
		"Supports horizontal/vertical orientation.",
		"Support single and multiple pressed buttons.",
		"Can be controlled or uncontrolled.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-toggle-group
```

## Anatomy

Import the component.

```jsx
import { ToggleGroup } from "radix-ui";

export default () => (
	<ToggleGroup.Root>
		<ToggleGroup.Item />
	</ToggleGroup.Root>
);
```

## API Reference

### Root

Contains all the parts of a toggle group.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "type",
			required: true,
			type: '"single" | "multiple"',
			typeSimple: "enum",
			description: (
				<span>
					Determines whether a single or multiple items can be pressed at a
					time.
				</span>
			),
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					The controlled value of the pressed item when <Code>type</Code> is{" "}
					<Code>"single"</Code>. Must be used in conjunction with{" "}
					<Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "defaultValue",
			required: false,
			type: "string",
			description: (
				<span>
					The value of the item to show as pressed when initially rendered and{" "}
					<Code>type</Code> is <Code>"single"</Code>. Use when you do not need
					to control the state of the items.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the pressed state of an item changes and{" "}
					<Code>type</Code> is <Code>"single"</Code>.
				</span>
			),
		},
		{
			name: "value",
			required: false,
			default: "[]",
			type: "string[]",
			description: (
				<span>
					The controlled value of the pressed items when <Code>type</Code> is{" "}
					<Code>"multiple"</Code>. Must be used in conjunction with{" "}
					<Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "defaultValue",
			required: false,
			default: "[]",
			type: "string[]",
			description: (
				<span>
					The values of the items to show as pressed when initially rendered and{" "}
					<Code>type</Code> is <Code>"multiple"</Code>. Use when you do not need
					to control the state of the items.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string[]) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the pressed state of an item changes and{" "}
					<Code>type</Code> is <Code>"multiple"</Code>.
				</span>
			),
		},
		{
			name: "disabled",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					toggle group and all its items.
				</span>
			),
		},
		{
			name: "rovingFocus",
			required: false,
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>false</Code>, navigating through the items using arrow keys
					will be disabled.
				</span>
			),
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical" | undefined',
			typeSimple: "enum",
			default: "undefined",
			description: (
				<span>
					The orientation of the component, which determines how focus moves:{" "}
					<Code>horizontal</Code> for left/right arrows and{" "}
					<Code>vertical</Code> for up/down arrows.
				</span>
			),
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of the toggle group. If omitted, inherits
					globally from <Code>DirectionProvider</Code> or assumes LTR
					(left-to-right) reading mode.
				</span>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code> and <Code>rovingFocus</Code> is{" "}
					<Code>true</Code>, keyboard navigation will loop from last item to
					first, and vice versa.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Item

An item in the group.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			required: true,
			type: "string",
			description: "A unique value for the item.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["on", "off"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

## Examples

### Ensuring there is always a value

You can control the component to ensure a value.

```jsx line=5,8
import * as React from "react";
import { ToggleGroup } from "radix-ui";

export default () => {
	const [value, setValue] = React.useState("left");

	return (
		<ToggleGroup.Root
			type="single"
			value={value}
			onValueChange={(value) => {
				if (value) setValue(value);
			}}
		>
			<ToggleGroup.Item value="left">
				<TextAlignLeftIcon />
			</ToggleGroup.Item>
			<ToggleGroup.Item value="center">
				<TextAlignCenterIcon />
			</ToggleGroup.Item>
			<ToggleGroup.Item value="right">
				<TextAlignRightIcon />
			</ToggleGroup.Item>
		</ToggleGroup.Root>
	);
};
```

## Accessibility

Uses [roving tabindex](https://www.w3.org/TR/wai-aria-practices-1.2/examples/radio/radio.html) to manage focus movement among items.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Tab"],
			description:
				"Moves focus to either the pressed item or the first item in the group.",
		},
		{
			keys: ["Space"],
			description: "Activates/deactivates the item.",
		},
		{
			keys: ["Enter"],
			description: "Activates/deactivates the item.",
		},
		{
			keys: ["ArrowDown"],
			description: "Moves focus to the next item in the group.",
		},
		{
			keys: ["ArrowRight"],
			description: "Moves focus to the next item in the group.",
		},
		{
			keys: ["ArrowUp"],
			description: "Moves focus to the previous item in the group.",
		},
		{
			keys: ["ArrowLeft"],
			description: "Moves focus to the previous item in the group.",
		},
		{
			keys: ["Home"],
			description: "Moves focus to the first item.",
		},
		{
			keys: ["End"],
			description: "Moves focus to the last item.",
		},
	]}
/>

toggle.mdx
---
metaTitle: Toggle
metaDescription: A two-state button that can be either on or off.
name: toggle
aria: https://www.w3.org/WAI/ARIA/apg/patterns/button
---

# Toggle

<Description>A two-state button that can be either on or off.</Description>

<HeroContainer>
	<ToggleDemo />
</HeroContainer>

<HeroCodeBlock folder="Toggle" />

<Highlights
	features={["Full keyboard navigation.", "Can be controlled or uncontrolled."]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-toggle
```

## Anatomy

Import the component.

```jsx
import { Toggle } from "radix-ui";

export default () => <Toggle.Root />;
```

## API Reference

### Root

The toggle.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "defaultPressed",
			type: "boolean",
			description:
				"The pressed state of the toggle when it is initially rendered. Use when you do not need to control its pressed state.",
		},
		{
			name: "pressed",
			type: "boolean",
			description: (
				<span>
					The controlled pressed state of the toggle. Must be used in
					conjunction with <Code>onPressedChange</Code>.
				</span>
			),
		},
		{
			name: "onPressedChange",
			type: "(pressed: boolean) => void",
			typeSimple: "function",
			description:
				"Event handler called when the pressed state of the toggle changes.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					toggle.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["on", "off"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
	]}
/>

## Accessibility

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Space"],
			description: "Activates/deactivates the toggle.",
		},
		{
			keys: ["Enter"],
			description: "Activates/deactivates the toggle.",
		},
	]}
/>

toolbar.mdx
---
metaTitle: Toolbar
metaDescription: A container for grouping a set of controls, such as buttons, toggle groups or dropdown menus.
name: toolbar
aria: https://www.w3.org/WAI/ARIA/apg/patterns/toolbar
---

# Toolbar

<Description>
	A container for grouping a set of controls, such as buttons, toggle groups or
	dropdown menus.
</Description>

<HeroContainer>
	<Flex style={{ flex: 1, maxWidth: 600 }}>
		<Box style={{ flex: "0 0 40px" }} />
		<Box style={{ flex: 1 }}>
			<ToolbarDemo />
		</Box>
		<Box style={{ flex: "0 0 40px" }} />
	</Flex>
</HeroContainer>

<HeroCodeBlock folder="Toolbar" />

<Highlights features={["Full keyboard navigation."]} />

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-toolbar
```

## Anatomy

Import the component.

```jsx
import { Toolbar } from "radix-ui";

export default () => (
	<Toolbar.Root>
		<Toolbar.Button />
		<Toolbar.Separator />
		<Toolbar.Link />
		<Toolbar.ToggleGroup>
			<Toolbar.ToggleItem />
		</Toolbar.ToggleGroup>
	</Toolbar.Root>
);
```

## API Reference

### Root

Contains all the toolbar component parts.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "orientation",
			required: false,
			type: '"horizontal" | "vertical" | undefined',
			typeSimple: "enum",
			default: '"horizontal"',
			description: "The orientation of the toolbar.",
		},
		{
			name: "dir",
			required: false,
			type: '"ltr" | "rtl"',
			typeSimple: "enum",
			description: (
				<span>
					The reading direction of the toolbar. If omitted, inherits globally
					from <Code>DirectionProvider</Code> or assumes LTR (left-to-right)
					reading mode.
				</span>
			),
		},
		{
			name: "loop",
			required: false,
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, keyboard navigation will loop from last tab to
					first, and vice versa.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Button

A button item.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Link

A link item.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

### ToggleGroup

A set of two-state buttons that can be toggled on or off.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "type",
			required: true,
			type: '"single" | "multiple"',
			typeSimple: "enum",
			description: (
				<span>
					Determines whether a single or multiple items can be pressed at a
					time.
				</span>
			),
		},
		{
			name: "value",
			required: false,
			type: "string",
			description: (
				<span>
					The controlled value of the pressed item when <Code>type</Code> is{" "}
					<Code>"single"</Code>. Must be used in conjunction with{" "}
					<Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "defaultValue",
			required: false,
			type: "string",
			description: (
				<span>
					The value of the item to show as pressed when initially rendered and{" "}
					<Code>type</Code> is <Code>"single"</Code>. Use when you do not need
					to control the state of the items.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the pressed state of an item changes and{" "}
					<Code>type</Code> is <Code>"single"</Code>.
				</span>
			),
		},
		{
			name: "value",
			required: false,
			default: "[]",
			type: "string[]",
			description: (
				<span>
					The controlled value of the pressed items when <Code>type</Code> is{" "}
					<Code>"multiple"</Code>. Must be used in conjunction with{" "}
					<Code>onValueChange</Code>.
				</span>
			),
		},
		{
			name: "defaultValue",
			required: false,
			default: "[]",
			type: "string[]",
			description: (
				<span>
					The values of the items to show as pressed when initially rendered and{" "}
					<Code>type</Code> is <Code>"multiple"</Code>. Use when you do not need
					to control the state of the items.
				</span>
			),
		},
		{
			name: "onValueChange",
			required: false,
			type: "(value: string[]) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the pressed state of an item changes and{" "}
					<Code>type</Code> is <Code>"multiple"</Code>.
				</span>
			),
		},
		{
			name: "disabled",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					toggle group and all its items.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### ToggleItem

An item in the group.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "value",
			required: true,
			type: "string",
			description: "A unique value for the item.",
		},
		{
			name: "disabled",
			type: "boolean",
			description: (
				<span>
					When <Code>true</Code>, prevents the user from interacting with the
					item.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["on", "off"],
		},
		{
			attribute: "[data-disabled]",
			values: "Present when disabled",
		},
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

### Separator

Used to visually separate items in the toolbar.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-orientation]",
			values: ["vertical", "horizontal"],
		},
	]}
/>

## Examples

### Use with other primitives

All our primitives which expose a `Trigger` part, such as `Dialog`, `AlertDialog`, `Popover`, `DropdownMenu` can be composed within a toolbar by using the [`asChild` prop](/primitives/docs/guides/composition).

Here is an example using our `DropdownMenu` primitive.

```jsx line=8-10
import { Toolbar, DropdownMenu } from "radix-ui";

export default () => (
	<Toolbar.Root>
		<Toolbar.Button>Action 1</Toolbar.Button>
		<Toolbar.Separator />
		<DropdownMenu.Root>
			<Toolbar.Button __asChild__>
				<DropdownMenu.Trigger>Trigger</DropdownMenu.Trigger>
			</Toolbar.Button>
			<DropdownMenu.Content>…</DropdownMenu.Content>
		</DropdownMenu.Root>
	</Toolbar.Root>
);
```

## Accessibility

Uses [roving tabindex](https://www.w3.org/TR/wai-aria-practices-1.2/examples/radio/radio.html) to manage focus movement among items.

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Tab"],
			description: "Moves focus to the first item in the group.",
		},
		{
			keys: ["Space"],
			description: "Activates/deactivates the item.",
		},
		{
			keys: ["Enter"],
			description: "Activates/deactivates the item.",
		},
		{
			keys: ["ArrowDown"],
			description: (
				<span>
					Moves focus to the next item depending on <Code>orientation</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowRight"],
			description: (
				<span>
					Moves focus to the next item depending on <Code>orientation</Code>.
				</span>
			),
		},
		{
			keys: ["ArrowUp"],
			description: (
				<span>
					Moves focus to the previous item depending on <Code>orientation</Code>
					.
				</span>
			),
		},
		{
			keys: ["ArrowLeft"],
			description: (
				<span>
					Moves focus to the previous item depending on <Code>orientation</Code>
					.
				</span>
			),
		},
		{
			keys: ["Home"],
			description: <span>Moves focus to the first item.</span>,
		},
		{
			keys: ["End"],
			description: <span>Moves focus to the last item.</span>,
		},
	]}
/>

tooltip.mdx
---
metaTitle: Tooltip
metaDescription: A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.
name: tooltip
aria: https://www.w3.org/WAI/ARIA/apg/patterns/tooltip
---

# Tooltip

<Description>
	A popup that displays information related to an element when the element
	receives keyboard focus or the mouse hovers over it.
</Description>

<HeroContainer>
	<TooltipDemo />
</HeroContainer>

<HeroCodeBlock folder="Tooltip" />

<Highlights
	features={[
		"Provider to control display delay globally.",
		"Opens when the trigger is focused or hovered.",
		"Closes when the trigger is activated or when pressing escape.",
		"Supports custom timings.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-tooltip
```

## Anatomy

Import all parts and piece them together.

```jsx
import { Tooltip } from "radix-ui";

export default () => (
	<Tooltip.Provider>
		<Tooltip.Root>
			<Tooltip.Trigger />
			<Tooltip.Portal>
				<Tooltip.Content>
					<Tooltip.Arrow />
				</Tooltip.Content>
			</Tooltip.Portal>
		</Tooltip.Root>
	</Tooltip.Provider>
);
```

## API Reference

### Provider

Wraps your app to provide global functionality to your tooltips.

<PropsTable
	data={[
		{
			name: "delayDuration",
			type: "number",
			default: 700,
			description:
				"The duration from when the mouse enters a tooltip trigger until the tooltip opens.",
		},
		{
			name: "skipDelayDuration",
			type: "number",
			default: 300,
			description:
				"How much time a user has to enter another trigger without incurring a delay again.",
		},
		{
			name: "disableHoverableContent",
			type: "boolean",
			description: (
				<span>
					Prevents <Code>Tooltip.Content</Code> from remaining open when
					hovering. Disabling this has accessibility consequences.
				</span>
			),
		},
	]}
/>

### Root

Contains all the parts of a tooltip.

<PropsTable
	data={[
		{
			name: "defaultOpen",
			type: "boolean",
			description: (
				<span>
					The open state of the tooltip when it is initially rendered. Use when
					you do not need to control its open state.
				</span>
			),
		},
		{
			name: "open",
			type: "boolean",
			description: (
				<span>
					The controlled open state of the tooltip. Must be used in conjunction
					with <Code>onOpenChange</Code>.
				</span>
			),
		},
		{
			name: "onOpenChange",
			type: "(open: boolean) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the open state of the tooltip changes.
				</span>
			),
		},
		{
			name: "delayDuration",
			type: "number",
			default: 700,
			description:
				"Override the duration given to the `Provider` to customise the open delay for a specific tooltip.",
		},
		{
			name: "disableHoverableContent",
			type: "boolean",
			default: false,
			description: (
				<span>
					Prevents <Code>Tooltip.Content</Code> from remaining open when
					hovering. Disabling this has accessibility consequences. Inherits from{" "}
					<Code>Tooltip.Provider</Code>.
				</span>
			),
		},
	]}
/>

### Trigger

The button that toggles the tooltip. By default, the `Tooltip.Content` will position itself against the trigger.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["closed", "delayed-open", "instant-open"],
		},
	]}
/>

### Portal

When used, portals the content part into the `body`.

<PropsTable
	data={[
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. If used on this
					part, it will be inherited by <Code>Tooltip.Content</Code>.
				</span>
			),
		},
		{
			name: "container",
			type: "HTMLElement",
			default: "document.body",
			description: "Specify a container element to portal the content into.",
		},
	]}
/>

### Content

The component that pops out when the tooltip is open.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "aria-label",
			type: "string",
			description: (
				<span>
					By default, screenreaders will announce the content inside the
					component. If this is not descriptive enough, or you have content that
					cannot be announced, use <Code>aria-label</Code> as a more descriptive
					label.
				</span>
			),
		},
		{
			name: "onEscapeKeyDown",
			type: "(event: KeyboardEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when the escape key is down. It can be prevented
					by calling <Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "onPointerDownOutside",
			type: "(event: PointerDownOutsideEvent) => void",
			typeSimple: "function",
			description: (
				<span>
					Event handler called when a pointer event occurs outside the bounds of
					the component. It can be prevented by calling{" "}
					<Code>event.preventDefault</Code>.
				</span>
			),
		},
		{
			name: "forceMount",
			type: "boolean",
			description: (
				<span>
					Used to force mounting when more control is needed. Useful when
					controlling animation with React animation libraries. It inherits from{" "}
					<Code>Tooltip.Portal</Code>.
				</span>
			),
		},
		{
			name: "side",
			type: '"top" | "right" | "bottom" | "left"',
			typeSimple: "enum",
			default: '"top"',
			description: (
				<span>
					The preferred side of the trigger to render against when open. Will be
					reversed when collisions occur and <Code>avoidCollisions</Code> is
					enabled.
				</span>
			),
		},
		{
			name: "sideOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					<span>The distance in pixels from the trigger.</span>
				</span>
			),
		},
		{
			name: "align",
			type: '"start" | "center" | "end"',
			typeSimple: "enum",
			default: '"center"',
			description: (
				<span>
					The preferred alignment against the trigger. May change when
					collisions occur.
				</span>
			),
		},
		{
			name: "alignOffset",
			type: "number",
			default: "0",
			description: (
				<span>
					An offset in pixels from the <Code>"start"</Code> or{" "}
					<Code>"end"</Code> alignment options.
				</span>
			),
		},
		{
			name: "avoidCollisions",
			type: "boolean",
			default: "true",
			description: (
				<span>
					When <Code>true</Code>, overrides the <Code>side</Code> and
					<Code>align</Code> preferences to prevent collisions with boundary
					edges.
				</span>
			),
		},
		{
			name: "collisionBoundary",
			type: "Element | null | Array<Element | null>",
			typeSimple: "Boundary",
			default: "[]",
			description: (
				<span>
					The element used as the collision boundary. By default this is the
					viewport, though you can provide additional element(s) to be included
					in this check.
				</span>
			),
		},
		{
			name: "collisionPadding",
			type: "number | Partial<Record<Side, number>>",
			typeSimple: "number | Padding",
			default: "0",
			description: (
				<span>
					The distance in pixels from the boundary edges where collision
					detection should occur. Accepts a number (same for all sides), or a
					partial padding object, for example:{" "}
					<Code>{`{ top: 20, left: 20 }`}</Code>.
				</span>
			),
		},
		{
			name: "arrowPadding",
			type: "number",
			default: "0",
			description: (
				<span>
					The padding between the arrow and the edges of the content. If your
					content has <Code>border-radius</Code>, this will prevent it from
					overflowing the corners.
				</span>
			),
		},
		{
			name: "sticky",
			type: '"partial" | "always"',
			typeSimple: "enum",
			default: '"partial"',
			description: (
				<span>
					The sticky behavior on the align axis. <Code>"partial"</Code> will
					keep the content in the boundary as long as the trigger is at least
					partially in the boundary whilst <Code>"always"</Code> will keep the
					content in the boundary regardless.
				</span>
			),
		},
		{
			name: "hideWhenDetached",
			type: "boolean",
			default: "false",
			description: (
				<span>
					Whether to hide the content when the trigger becomes fully occluded.
				</span>
			),
		},
	]}
/>

<DataAttributesTable
	data={[
		{
			attribute: "[data-state]",
			values: ["closed", "delayed-open", "instant-open"],
		},
		{
			attribute: "[data-side]",
			values: ["left", "right", "bottom", "top"],
		},
		{
			attribute: "[data-align]",
			values: ["start", "end", "center"],
		},
	]}
/>

<CssVariablesTable
	data={[
		{
			cssVariable: "--radix-tooltip-content-transform-origin",
			description: (
				<>
					The <Code>transform-origin</Code> computed from the content and arrow
					positions/offsets
				</>
			),
		},
		{
			cssVariable: "--radix-tooltip-content-available-width",
			description: (
				<>The remaining width between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-tooltip-content-available-height",
			description: (
				<>The remaining height between the trigger and the boundary edge</>
			),
		},
		{
			cssVariable: "--radix-tooltip-trigger-width",
			description: <>The width of the trigger</>,
		},
		{
			cssVariable: "--radix-tooltip-trigger-height",
			description: <>The height of the trigger</>,
		},
	]}
/>

### Arrow

An optional arrow element to render alongside the tooltip. This can be used to help visually link the trigger with the `Tooltip.Content`. Must be rendered inside `Tooltip.Content`.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
		{
			name: "width",
			type: "number",
			default: 10,
			description: <span>The width of the arrow in pixels.</span>,
		},
		{
			name: "height",
			type: "number",
			default: 5,
			description: <span>The height of the arrow in pixels.</span>,
		},
	]}
/>

## Examples

### Configure globally

Use the `Provider` to control `delayDuration` and `skipDelayDuration` globally.

```jsx line=4
import { Tooltip } from "radix-ui";

export default () => (
	<Tooltip.Provider __delayDuration__={800} __skipDelayDuration__={500}>
		<Tooltip.Root>
			<Tooltip.Trigger>…</Tooltip.Trigger>
			<Tooltip.Content>…</Tooltip.Content>
		</Tooltip.Root>
		<Tooltip.Root>
			<Tooltip.Trigger>…</Tooltip.Trigger>
			<Tooltip.Content>…</Tooltip.Content>
		</Tooltip.Root>
	</Tooltip.Provider>
);
```

### Show instantly

Use the `delayDuration` prop to control the time it takes for the tooltip to open.

```jsx line=4
import { Tooltip } from "radix-ui";

export default () => (
	<Tooltip.Root __delayDuration__={0}>
		<Tooltip.Trigger>…</Tooltip.Trigger>
		<Tooltip.Content>…</Tooltip.Content>
	</Tooltip.Root>
);
```

### Constrain the content size

You may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.

We expose several CSS custom properties such as `--radix-tooltip-trigger-width` and `--radix-tooltip-content-available-height` to support this. Use them to constrain the content dimensions.

```jsx line=9
// index.jsx
import { Tooltip } from "radix-ui";
import "./styles.css";

export default () => (
	<Tooltip.Root>
		<Tooltip.Trigger>…</Tooltip.Trigger>
		<Tooltip.Portal>
			<Tooltip.Content __className__="TooltipContent" sideOffset={5}>
				…
			</Tooltip.Content>
		</Tooltip.Portal>
	</Tooltip.Root>
);
```

```css
/* styles.css */
.TooltipContent {
	width: var(__--radix-tooltip-trigger-width__);
	max-height: var(__--radix-tooltip-content-available-height__);
}
```

### Origin-aware animations

We expose a CSS custom property `--radix-tooltip-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.

```jsx line=8
// index.jsx
import { Tooltip } from "radix-ui";
import "./styles.css";

export default () => (
	<Tooltip.Root>
		<Tooltip.Trigger>…</Tooltip.Trigger>
		<Tooltip.Content __className__="TooltipContent">…</Tooltip.Content>
	</Tooltip.Root>
);
```

```css line=3-4
/* styles.css */
.TooltipContent {
	transform-origin: var(--radix-tooltip-content-transform-origin);
	animation: scaleIn 0.5s ease-out;
}

@keyframes scaleIn {
	from {
		opacity: 0;
		transform: scale(0);
	}
	to {
		opacity: 1;
		transform: scale(1);
	}
}
```

### Collision-aware animations

We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.

```jsx line=8
// index.jsx
import { Tooltip } from "radix-ui";
import "./styles.css";

export default () => (
	<Tooltip.Root>
		<Tooltip.Trigger>…</Tooltip.Trigger>
		<Tooltip.Content __className__="TooltipContent">…</Tooltip.Content>
	</Tooltip.Root>
);
```

```css line=6,9
/* styles.css */
.TooltipContent {
	animation-duration: 0.6s;
	animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
}
.TooltipContent[data-side="top"] {
	animation-name: slideUp;
}
.TooltipContent[data-side="bottom"] {
	animation-name: slideDown;
}

@keyframes slideDown {
	from {
		opacity: 0;
		transform: translateY(-10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

@keyframes slideUp {
	from {
		opacity: 0;
		transform: translateY(10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}
```

## Accessibility

### Keyboard Interactions

<KeyboardTable
	data={[
		{
			keys: ["Tab"],
			description: "Opens/closes the tooltip without delay.",
		},
		{
			keys: ["Space"],
			description: "If open, closes the tooltip without delay.",
		},
		{
			keys: ["Enter"],
			description: "If open, closes the tooltip without delay.",
		},
		{
			keys: ["Escape"],
			description: "If open, closes the tooltip without delay.",
		},
	]}
/>

## Custom APIs

Create your own API by abstracting the primitive parts into your own component.

### Abstract parts and introduce a content prop

This example abstracts all of the `Tooltip` parts and introduces a new `content` prop.

#### Usage

```jsx
import { Tooltip } from "./your-tooltip";

export default () => (
	<Tooltip content="Tooltip content">
		<button>Tooltip trigger</button>
	</Tooltip>
);
```

#### Implementation

Use the [`asChild` prop](/primitives/docs/guides/composition) to convert the trigger part into a slottable area. It will replace the trigger with the child that gets passed to it.

```jsx line=8-10
// your-tooltip.jsx
import * as React from "react";
import { Tooltip as TooltipPrimitive } from "radix-ui";

export function Tooltip({
	children,
	content,
	open,
	defaultOpen,
	onOpenChange,
	...props
}) {
	return (
		<TooltipPrimitive.Root
			open={open}
			defaultOpen={defaultOpen}
			onOpenChange={onOpenChange}
		>
			<TooltipPrimitive.Trigger __asChild__>
				{children}
			</TooltipPrimitive.Trigger>
			<TooltipPrimitive.Content side="top" align="center" {...props}>
				{content}
				<TooltipPrimitive.Arrow width={11} height={5} />
			</TooltipPrimitive.Content>
		</TooltipPrimitive.Root>
	);
}
```

visually-hidden.mdx
---
metaTitle: Visually Hidden
metaDescription: Hides content from the screen in an accessible way.
name: visually-hidden
---

# Visually Hidden

<Description>Hides content from the screen in an accessible way.</Description>

<Highlights
	features={[
		"Visually hides content while preserving it for assistive technology.",
	]}
/>

## Installation

Install the component from your command line.

```bash
npm install @radix-ui/react-visually-hidden
```

## Anatomy

Import the component.

```jsx
import { VisuallyHidden } from "radix-ui";

export default () => <VisuallyHidden.Root />;
```

## Basic example

Use the visually hidden primitive.

```jsx
import { VisuallyHidden } from "radix-ui";
import { GearIcon } from "@radix-ui/react-icons";

export default () => (
	<button>
		<GearIcon />
		<VisuallyHidden.Root>Settings</VisuallyHidden.Root>
	</button>
);
```

## API Reference

### Root

Anything you put inside this component will be hidden from the screen but will be announced by screen readers.

<PropsTable
	data={[
		{
			name: "asChild",
			required: false,
			type: "boolean",
			default: "false",
			description: (
				<>
					Change the default rendered element for the one passed as a child,
					merging their props and behavior.
					<br />
					<br />
					Read our <a href="../guides/composition">Composition</a> guide for
					more details.
				</>
			),
		},
	]}
/>

## Accessibility

This is useful in certain scenarios as an alternative to traditional labelling with `aria-label` or `aria-labelledby`.

